<?xml version="1.0" encoding="utf-8"?>
<SyntaxEdit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <SearchOptions>None</SearchOptions>
  <BorderStyle>None</BorderStyle>
  <Pages>
    <DefaultPage>
      <Header>
        <Offset>
          <X>0</X>
          <Y>0</Y>
        </Offset>
      </Header>
      <Footer>
        <Offset>
          <X>0</X>
          <Y>0</Y>
        </Offset>
      </Footer>
      <PageSize>
        <Width>0</Width>
        <Height>0</Height>
      </PageSize>
    </DefaultPage>
  </Pages>
  <DisplayStrings />
  <Selection>
    <SelectionRect>
      <Location>
        <X>0</X>
        <Y>3386</Y>
      </Location>
      <Size>
        <Width>24</Width>
        <Height>3</Height>
      </Size>
      <X>0</X>
      <Y>3386</Y>
      <Width>24</Width>
      <Height>3</Height>
    </SelectionRect>
    <Options>UseColors OverwriteBlocks SelectLineOnTripleClick CopyLineWhenEmpty SelectWordOnCtrlClick</Options>
  </Selection>
  <Gutter>
    <LineNumbersForeColor>WindowText</LineNumbersForeColor>
    <Options>PaintLineNumbers PaintBookMarks PaintLineModificators</Options>
  </Gutter>
  <Margin>
    <Visible>false</Visible>
  </Margin>
  <LineStyles />
  <LineSeparator />
  <Printing>
    <Footer>
      <Offset>
        <X>0</X>
        <Y>0</Y>
      </Offset>
    </Footer>
    <Header>
      <Offset>
        <X>0</X>
        <Y>0</Y>
      </Offset>
    </Header>
  </Printing>
  <WhiteSpace />
  <TextSource>
    <Position>
      <X>0</X>
      <Y>3386</Y>
    </Position>
    <Lexer>
      <Scheme>
        <Author>Quantum Whale, LLC.</Author>
        <Copyright>Copyright (c) 2004 - 2014 Quantum Whale LLC.</Copyright>
        <FileType>gas</FileType>
        <Version>1.5</Version>
        <Styles>
          <Style>
            <Name>idents</Name>
            <ForeColor>ControlText</ForeColor>
          </Style>
          <Style>
            <Name>numbers</Name>
            <ForeColor>ControlText</ForeColor>
          </Style>
          <Style>
            <Name>reswords</Name>
            <ForeColor>Blue</ForeColor>
          </Style>
          <Style>
            <Name>comments</Name>
            <ForeColor>Green</ForeColor>
            <PlainText>true</PlainText>
          </Style>
          <Style>
            <Name>xmlcomments</Name>
            <ForeColor>Gray</ForeColor>
          </Style>
          <Style>
            <Name>symbols</Name>
            <ForeColor>WindowText</ForeColor>
          </Style>
          <Style>
            <Name>whitespace</Name>
            <ForeColor>WindowText</ForeColor>
          </Style>
          <Style>
            <Name>strings</Name>
            <ForeColor>Maroon</ForeColor>
            <PlainText>true</PlainText>
          </Style>
          <Style>
            <Name>directives</Name>
            <ForeColor>Blue</ForeColor>
          </Style>
          <Style>
            <Name>htmlparams</Name>
            <ForeColor>Red</ForeColor>
          </Style>
          <Style>
            <Name>syntax errors</Name>
            <ForeColor>Red</ForeColor>
          </Style>
          <Style>
            <Name>codes nippets</Name>
            <ForeColor>Black</ForeColor>
            <BackColor>255:180:228:180</BackColor>
          </Style>
          <Style>
            <Name>GabReservedWords</Name>
            <ForeColor>Blue</ForeColor>
          </Style>
          <Style>
            <Name>GabTokenWithBrackets</Name>
            <ForeColor>Gray</ForeColor>
          </Style>
          <Style>
            <Name>GabFunctionIntrinsicDebug</Name>
            <ForeColor>White</ForeColor>
            <BackColor>Red</BackColor>
            <FontStyle>Bold</FontStyle>
            <PlainText>true</PlainText>
          </Style>
          <Style>
            <Name>GabVariable</Name>
            <ForeColor>Teal</ForeColor>
          </Style>
          <Style>
            <Name>GabVariableSystemDefined</Name>
            <ForeColor>Teal</ForeColor>
            <FontStyle>Bold Italic</FontStyle>
          </Style>
          <Style>
            <Name>GabGui</Name>
            <ForeColor>OrangeRed</ForeColor>
          </Style>
          <Style>
            <Name>GabProgramSubStartEnd</Name>
            <ForeColor>Black</ForeColor>
            <BackColor>LightGray</BackColor>
            <FontStyle>Bold</FontStyle>
            <PlainText>true</PlainText>
          </Style>
        </Styles>
      </Scheme>
    </Lexer>
    <TextStrings>
      <Lines>
        <string>Program.Sub.ScreenSU.Start</string>
        <string>Gui.SS_Form_File..create</string>
        <string>Gui.SS_Form_File..caption("File Selection")</string>
        <string>Gui.SS_Form_File..size(5370,1860)</string>
        <string>Gui.SS_Form_File..position(0,0)</string>
        <string>Gui.SS_Form_File..forecolor(0)</string>
        <string>Gui.SS_Form_File..BackColor(-2147483633)</string>
        <string>Gui.SS_Form_File..maxbutton(False)</string>
        <string>Gui.SS_Form_File..minbutton(False)</string>
        <string>Gui.SS_Form_File..mousepointer(0)</string>
        <string>Gui.SS_Form_File..sizeable(False)</string>
        <string>Gui.SS_Form_File..MinX(0)</string>
        <string>Gui.SS_Form_File..MinY(0)</string>
        <string>Gui.SS_Form_File..Event(UnLoad,SS_Form_File_UnLoad)</string>
        <string>Gui.SS_Form_File.lbl_txt_FileSelection.create(label,"File Name",True,1800,200,1,100,135,True,0,Arial,8,-2147483633,0)</string>
        <string>Gui.SS_Form_File.lbl_txt_FileSelection.LabelStretch(True)</string>
        <string>Gui.SS_Form_File.txt_FileSelection.create(textbox,"",True,4500,300,1,105,375,True,0,Arial,8,16777215,1)</string>
        <string>Gui.SS_Form_File.txt_FileSelection.tabstop(True)</string>
        <string>Gui.SS_Form_File.txt_FileSelection.tabindex(1)</string>
        <string>Gui.SS_Form_File.cmd_txt_FileSelection.create(button)</string>
        <string>Gui.SS_Form_File.cmd_txt_FileSelection.Caption("^")</string>
        <string>Gui.SS_Form_File.cmd_txt_FileSelection.size(330,330)</string>
        <string>Gui.SS_Form_File.cmd_txt_FileSelection.position(4680,375)</string>
        <string>Gui.SS_Form_File.cmd_txt_FileSelection.tabstop(True)</string>
        <string>Gui.SS_Form_File.cmd_txt_FileSelection.tabindex(2)</string>
        <string>Gui.SS_Form_File.cmd_txt_FileSelection.Event(Click,cmd_txt_FileSelection_Click)</string>
        <string>Gui.SS_Form_File.cmd_Done.create(button)</string>
        <string>Gui.SS_Form_File.cmd_Done.Caption("Done")</string>
        <string>Gui.SS_Form_File.cmd_Done.size(1005,360)</string>
        <string>Gui.SS_Form_File.cmd_Done.position(105,795)</string>
        <string>Gui.SS_Form_File.cmd_Done.tabstop(True)</string>
        <string>Gui.SS_Form_File.cmd_Done.tabindex(3)</string>
        <string>Gui.SS_Form_File.cmd_Done.Event(Click,cmd_Done_Click)</string>
        <string>Gui.Form..Create</string>
        <string>Gui.Form..Caption("BOM Comparison")</string>
        <string>Gui.Form..Size(23775,8640)</string>
        <string>Gui.Form..MinX(0)</string>
        <string>Gui.Form..MinY(0)</string>
        <string>Gui.Form..Position(0,0)</string>
        <string>Gui.Form..BackColor(-2147483633)</string>
        <string>Gui.Form..MousePointer(0)</string>
        <string>Gui.Form..Sizeable(False)</string>
        <string>Gui.Form..Event(UnLoad,Form_UnLoad)</string>
        <string>Gui.Form.frame1.Create(Frame)</string>
        <string>Gui.Form.frame1.Size(11445,7560)</string>
        <string>Gui.Form.frame1.Position(300,240)</string>
        <string>Gui.Form.GsGridControlImport.Create(GsGridControl)</string>
        <string>Gui.Form.GsGridControlImport.Size(10950,4785)</string>
        <string>Gui.Form.GsGridControlImport.Position(285,1785)</string>
        <string>Gui.Form.GsGridControlImport.Parent("frame1")</string>
        <string>Gui.Form.cmdUpload.Create(Button)</string>
        <string>Gui.Form.cmdUpload.Size(1545,555)</string>
        <string>Gui.Form.cmdUpload.Position(285,6720)</string>
        <string>Gui.Form.cmdUpload.Caption("Upload")</string>
        <string>Gui.Form.cmdUpload.FontStyle(True,False,False,False,False)</string>
        <string>Gui.Form.cmdUpload.Parent("frame1")</string>
        <string>Gui.Form.cmdUpload.Event(Click,cmdUpload_Click)</string>
        <string>Gui.Form.cmdUpload.Enabled(False)</string>
        <string>Gui.Form.cmdCreate.Create(Button)</string>
        <string>Gui.Form.cmdCreate.Size(1545,555)</string>
        <string>Gui.Form.cmdCreate.Position(9660,6720)</string>
        <string>Gui.Form.cmdCreate.Caption("Create Parts")</string>
        <string>Gui.Form.cmdCreate.FontStyle(True,False,False,False,False)</string>
        <string>Gui.Form.cmdCreate.Event(Click,cmdCreate_Click)</string>
        <string>Gui.Form.cmdCreate.Parent("frame1")</string>
        <string>Gui.Form.lblPN1.Create(Label,"Parent Number",True,1305,255,0,255,1035,True,0,"Arial",8,-2147483633,0)</string>
        <string>Gui.Form.lblPN1.Parent("frame1")</string>
        <string>Gui.Form.lblRev1.Create(Label,"Rev",True,630,255,0,2580,1035,True,0,"Arial",8,-2147483633,0)</string>
        <string>Gui.Form.lblRev1.Parent("frame1")</string>
        <string>Gui.Form.lblDesc1.Create(Label,"Description",True,1935,255,0,3420,1035,True,0,"Arial",8,-2147483633,0)</string>
        <string>Gui.Form.lblDesc1.Parent("frame1")</string>
        <string>Gui.Form.txtPN1.Create(TextBox,"",True,2160,300,0,270,1275,False,0,"Arial",8,-2147483643,1)</string>
        <string>Gui.Form.txtPN1.Parent("frame1")</string>
        <string>Gui.Form.txtRev1.Create(TextBox,"",True,660,300,0,2565,1275,False,0,"Arial",8,-2147483643,1)</string>
        <string>Gui.Form.txtRev1.Parent("frame1")</string>
        <string>Gui.Form.txtDesc1.Create(TextBox,"",True,2970,300,0,3420,1275,False,0,"Arial",8,-2147483643,1)</string>
        <string>Gui.Form.txtDesc1.Parent("frame1")</string>
        <string>Gui.Form.lblAero.Create(Label,"Aero",True,1680,525,0,270,270,True,0,"Arial",23,-2147483633,0)</string>
        <string>Gui.Form.lblAero.Parent("frame1")</string>
        <string>Gui.Form.frame2.Create(Frame)</string>
        <string>Gui.Form.frame2.Size(11445,7560)</string>
        <string>Gui.Form.frame2.Position(11910,255)</string>
        <string>Gui.Form.GsGridControlMatch.Create(GsGridControl)</string>
        <string>Gui.Form.GsGridControlMatch.Size(10950,4785)</string>
        <string>Gui.Form.GsGridControlMatch.Position(285,1785)</string>
        <string>Gui.Form.GsGridControlMatch.Parent("frame2")</string>
        <string>Gui.Form.lblKey.Create(Label,"Key:",True,735,255,0,510,7005,True,0,"Arial",15,-2147483633,0)</string>
        <string>Gui.Form.lblKey.Parent("frame2")</string>
        <string>Gui.Form.lblyellow.Create(Label,"Yellow - Part Needs to be Created in Global Shop",True,3915,255,0,1575,6870,True,0,"Arial",8,-2147483633,0)</string>
        <string>Gui.Form.lblyellow.Parent("frame2")</string>
        <string>Gui.Form.txtDesc2.Create(TextBox,"",True,2970,300,0,3510,1275,False,0,"Arial",8,-2147483643,1)</string>
        <string>Gui.Form.txtDesc2.Parent("frame2")</string>
        <string>Gui.Form.lblDesc2.Create(Label,"Description",True,1935,255,0,3480,1035,True,0,"Arial",8,-2147483633,0)</string>
        <string>Gui.Form.lblDesc2.Parent("frame2")</string>
        <string>Gui.Form.txtRev2.Create(TextBox,"",True,660,300,0,2610,1275,False,0,"Arial",8,-2147483643,1)</string>
        <string>Gui.Form.txtRev2.Parent("frame2")</string>
        <string>Gui.Form.lblRev2.Create(Label,"Rev",True,630,255,0,2625,1035,True,0,"Arial",8,-2147483633,0)</string>
        <string>Gui.Form.lblRev2.Parent("frame2")</string>
        <string>Gui.Form.txtPN2.Create(TextBox,"",True,2160,300,0,315,1275,False,0,"Arial",8,-2147483643,1)</string>
        <string>Gui.Form.txtPN2.Parent("frame2")</string>
        <string>Gui.Form.lblPN2.Create(Label,"Parent Number",True,1305,255,0,300,1035,True,0,"Arial",8,-2147483633,0)</string>
        <string>Gui.Form.lblPN2.Parent("frame2")</string>
        <string>Gui.Form.lblGSS.Create(Label,"Global Shop Solutions",True,5055,525,0,285,270,True,0,"Arial",23,-2147483633,0)</string>
        <string>Gui.Form.lblGSS.Parent("frame2")</string>
        <string>Gui.Form.lblPink.Create(Label,"Pink - Child of a BOM within the Parent BOM",True,3540,255,0,1605,7215,True,0,"Arial",8,-2147483633,0)</string>
        <string>Gui.Form.lblPink.Parent("frame2")</string>
        <string>Gui.Form.lblOrange.Create(Label,"Orange - Difference between XML and GSS",True,4170,255,0,18345,7140,True,0,"Arial",8,-2147483633,0)</string>
        <string>Program.Sub.ScreenSU.End</string>
        <string />
        <string>Program.Sub.Preflight.Start</string>
        <string>Program.Sub.Preflight.End</string>
        <string />
        <string>Program.Sub.Main.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("Main_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>Variable.Global.sYellow.Declare(string)</string>
        <string>Variable.Global.isBOM.Declare(Boolean,False)</string>
        <string>Variable.Global.bExists.Declare(Boolean,False)</string>
        <string>v.Global.sprefix.Declare(string)</string>
        <string>v.global.fincrement.Declare(float)</string>
        <string>v.Global.ballowupload.Declare(boolean,True)</string>
        <string>v.Global.sbatchtext.Declare(string)</string>
        <string>v.Global.botheruploads.Declare(boolean)</string>
        <string>v.Global.sparentpart.Declare(String)</string>
        <string>v.Local.ssql.Declare(string)</string>
        <string />
        <string>'opening connection</string>
        <string>F.ODBC.Connection!con.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)</string>
        <string />
        <string>'read the company options to set the prefix and incrementation</string>
        <string>f.Intrinsic.String.Build("Select F_LONG FROM OP_HEADER where ID = '{0}' and SEQUENCE = '{1}'","400460","0002",v.Local.ssql)</string>
        <string>F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,False)</string>
        <string>	v.Global.fincrement.Set(v.ODBC.con!rst.fieldvaltrim!F_LONG)</string>
        <string>f.Intrinsic.Control.EndIf</string>
        <string>f.ODBC.con!rst.Close</string>
        <string>f.Intrinsic.String.Build("Select TEXT1 FROM OP_HEADER where ID = '{0}' and SEQUENCE = '{1}'","400460","0001",v.Local.ssql)</string>
        <string>F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,False)</string>
        <string>	v.Global.sprefix.Set(v.ODBC.con!rst.FieldValTrim!TEXT1)</string>
        <string>f.Intrinsic.Control.EndIf</string>
        <string>f.ODBC.con!rst.Close</string>
        <string />
        <string>'call sub to create datatable that will be populated by the import</string>
        <string>F.Intrinsic.Control.CallSub(createdatatable)</string>
        <string>'showing form to select file</string>
        <string>Gui.SS_Form_File..Show</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("Main_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(ss_form_file_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.Main.End</string>
        <string />
        <string>Program.Sub.SS_Form_File_UnLoad.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("SS_Form_File_UnLoad_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>'closing connection and ending program</string>
        <string>F.ODBC.Connection!con.Close</string>
        <string>Function.Intrinsic.Control.End</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("SS_Form_File_UnLoad_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.End</string>
        <string />
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.SS_Form_File_UnLoad.End</string>
        <string />
        <string>Program.Sub.cmd_txt_FileSelection_Click.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmd_txt_FileSelection_Click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>Variable.Local.sFile.Declare(String)</string>
        <string>Variable.Local.sDir.Declare(String)</string>
        <string />
        <string>'show the file browser to allow the user to select the XML file</string>
        <string>F.Intrinsic.String.Build("{0}\Select File",V.Caller.FilesDir,V.Local.sDir)</string>
        <string>Function.Intrinsic.UI.ShowOpenFileDialog("","xml|*xml",V.Local.sDir,V.Local.sFile)</string>
        <string>Function.Intrinsic.Control.If(V.Local.sFile,&lt;&gt;,"***CANCEL***")</string>
        <string>	Gui.SS_Form_File.txt_FileSelection.Text(V.Local.sFile)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("cmd_txt_FileSelection_Click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(ss_form_file_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.cmd_txt_FileSelection_Click.End</string>
        <string />
        <string>Program.Sub.cmd_Done_Click.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmd_Done_Click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>'hide the form and call the xml subroutine</string>
        <string>Gui.SS_Form_File..Visible(False)</string>
        <string>F.Intrinsic.UI.InvokeWaitDialog("Reading import file","DesignInterface")</string>
        <string>F.Intrinsic.Control.CallSub(Readxml)</string>
        <string>'call the explode bom sub</string>
        <string>f.Intrinsic.Control.CallSub(explodebom)</string>
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("cmd_Done_Click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(ss_form_file_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.cmd_Done_Click.End</string>
        <string />
        <string>Program.Sub.ReadXML.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("ReadXML_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sQuery.Declare(String,"//Rows/Row/Values/NameValuePair/Name")</string>
        <string>V.Local.bEOF.Declare(Boolean)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string>V.Local.sDataTable.Declare(String)</string>
        <string>V.Local.iUB.Declare(Long,-1)</string>
        <string>V.Local.sVal.Declare(String)</string>
        <string>V.Local.sMsg.Declare(String)</string>
        <string>V.Local.sParent.Declare(String)</string>
        <string>v.Local.sdesc.Declare(string)</string>
        <string>v.Local.bdesc.Declare(boolean, False)</string>
        <string>v.Local.ilength.Declare(long)</string>
        <string>v.Local.sextradesc.Declare(string)</string>
        <string>V.Local.sValue.Declare(String,"//Rows/Row/Values/NameValuePair/Value")</string>
        <string>'load the doc</string>
        <string>F.Global.XML.LoadDocument("BOM",V.Screen.SS_Form_File!txt_FileSelection.Text,False,False,False,False)</string>
        <string>F.Global.XML.Query("BOM","Rows",V.Local.sQuery,False)</string>
        <string>F.Global.XML.Query("BOM","Value",V.Local.sValue,False)</string>
        <string>F.Intrinsic.Control.DoUntil(V.Local.bEOF,=,True)</string>
        <string>	F.Global.XML.ReadNodeSetValue("BOM","Rows","text",V.Local.sRet)</string>
        <string>	F.Global.XML.ReadNodeSetValue("BOM","Value","text",V.Local.sVal)</string>
        <string>	F.Intrinsic.Control.SelectCase(V.Local.sRet.UCase)</string>
        <string>		'set the desc boolean to false</string>
        <string>		v.Local.bdesc.Set(false)</string>
        <string>		'clear the description string</string>
        <string>		v.Local.sdesc.Set("")</string>
        <string>		F.Intrinsic.Control.Case("GSS PARENT")</string>
        <string>			F.Intrinsic.Control.If(V.Local.iUB,=,-1)</string>
        <string>				F.Intrinsic.Math.Add(V.Local.iUB,1,V.Local.iUB)</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_PARENT",V.Local.sVal.Trim)</string>
        <string>			F.Intrinsic.Control.Else</string>
        <string>				F.Intrinsic.Math.Add(V.Local.iUB,1,V.Local.iUB)</string>
        <string>				F.Data.DataTable.AddRow("Import","GSS_PARENT",V.Local.sVal.Trim,"GSS_SEQUENCE"," ","GSS_PART_NUMBER"," ","GSS_IsPARENT"," ","GSS_COUNT"," ","GSS_LEVEL"," ","GSS_DESCRIPTION"," ","GSS_REVISION"," ","GSS_UOM"," ","GSS_SOURCE_CODE"," ","GSS_PART_TYPE"," ","GSS_FILE_NAME"," ","GSS_ASSEMBLY_TYPE"," ","GSS_BALLOON_CALLOUT"," ","GSS_SPARE"," ","GSS_SUPPLIER_PART_NUMBER"," ","GSS_SUPPLIER"," ","GSS_CHILD_SOURCE_CODE"," ","GSS_LENGTH"," ","GSS_CATEGORY"," ")</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>		'sequence	</string>
        <string>		F.Intrinsic.Control.Case("GSS SEQUENCE")</string>
        <string>			F.Intrinsic.Control.If(v.Local.sVal,&lt;&gt;," ")</string>
        <string>				F.Intrinsic.String.Format(V.Local.sVal,"0000",V.Local.sVal)</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_SEQUENCE",V.Local.sVal)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>		'part nmbr	</string>
        <string>		F.Intrinsic.Control.Case("GSS PART NUMBER")</string>
        <string>			f.Intrinsic.String.Len(v.Local.sValue,v.Local.ilength)</string>
        <string>				f.Intrinsic.Control.If(v.Local.ilength,&gt;,20)</string>
        <string>					F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_EXTRA_DESC",V.Local.sextradesc)</string>
        <string>				f.Intrinsic.Control.EndIf</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_PART_NUMBER",V.Local.sVal)</string>
        <string>			F.Intrinsic.Control.If(V.DataTable.Import(V.Local.iUB).GSS_Parent!FieldVal,=,V.DataTable.Import(V.Local.iUB).GSS_Part_Number!FieldVal)</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_IsPARENT","Y")</string>
        <string>			F.Intrinsic.Control.Else</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_IsPARENT"," ")</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>		'count	</string>
        <string>		F.Intrinsic.Control.Case("GSS COUNT")	</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_COUNT",V.Local.sVal)</string>
        <string>		'level	</string>
        <string>		F.Intrinsic.Control.Case("GSS LEVEL")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_LEVEL",V.Local.sVal)</string>
        <string>		'description	</string>
        <string>		F.Intrinsic.Control.Case("GSS DESCRIPTION")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_DESCRIPTION",V.Local.sVal)</string>
        <string>			'check to see if *C is in the description, if so this will be our extra desc</string>
        <string>			f.Intrinsic.String.IsInString(v.Local.sVal,"*C",True,v.Local.bdesc)</string>
        <string>			'if bdesc is true, set your extra desc</string>
        <string>			f.Intrinsic.Control.If(v.Local.bdesc,=,True)</string>
        <string>				f.Intrinsic.String.Split(v.Local.sValue,"*C",v.Local.sdesc)</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_DESCRIPTION",V.Local.sdesc(0))</string>
        <string>			'otherwise just set it as the description</string>
        <string>			f.Intrinsic.Control.Else</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_DESCRIPTION",V.Local.sVal)</string>
        <string>			f.Intrinsic.Control.EndIf</string>
        <string>		'revision</string>
        <string>		F.Intrinsic.Control.Case("GSS REVISION")</string>
        <string>			F.Intrinsic.Control.If(V.Local.sVal.Trim,=,"0")</string>
        <string>				V.Local.sVal.Set("  0")</string>
        <string>			f.Intrinsic.Control.elseif(v.Local.sVal.Trim,=,"")</string>
        <string>				V.Local.sVal.Set("  0")</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>		F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_REVISION",V.Local.sVal)</string>
        <string>		'UM	</string>
        <string>		F.Intrinsic.Control.Case("GSS UOM")</string>
        <string>			F.Intrinsic.Control.If(V.Local.sVal.Trim,=,"")</string>
        <string>				V.Local.sVal.Set("EA")</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_UOM",V.Local.sVal)</string>
        <string>		'BOM Designation	</string>
        <string>		f.Intrinsic.Control.Case("GSS BOM DESIGNATION")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_BOM_DESIGNATION",V.Local.sVal)</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_UOM",V.Local.sVal)</string>
        <string>		'Source Code		</string>
        <string>		F.Intrinsic.Control.Case("GSS SOURCE CODE")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_SOURCE_CODE",V.Local.sVal)</string>
        <string>		'Part Type	</string>
        <string>		F.Intrinsic.Control.Case("GSS PART TYPE")	</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_PART_TYPE",V.Local.sVal)</string>
        <string>		'File name	</string>
        <string>		F.Intrinsic.Control.Case("GSS FILE NAME")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_FILE_NAME",V.Local.sVal)</string>
        <string>		'GSS Assembly Type	</string>
        <string>		F.Intrinsic.Control.Case("GSS ASSEMBLY TYPE")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_ASSEMBLY_TYPE",V.Local.sVal)</string>
        <string>		'Balloon Callout			</string>
        <string>		F.Intrinsic.Control.Case("GSS BALLOON CALLOUT")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_BALLOON_CALLOUT",V.Local.sVal)</string>
        <string>		'Spare</string>
        <string>		F.Intrinsic.Control.Case("GSS SPARE")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_SPARE",V.Local.sVal)</string>
        <string>		'supplier part</string>
        <string>		F.Intrinsic.Control.Case("GSS SUPPLIER PART NUMBER")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_SUPPLIER_PART_NUMBER",V.Local.sVal)</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_SPARE",V.Local.sVal)</string>
        <string>		'supplier</string>
        <string>		F.Intrinsic.Control.Case("GSS SUPPLIER")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_SUPPLIER",V.Local.sVal)</string>
        <string>		'child source code</string>
        <string>		F.Intrinsic.Control.Case("GSS CHILD SOURCE CODE")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_CHILD_SOURCE_CODE",V.Local.sVal)</string>
        <string>		'length</string>
        <string>		F.Intrinsic.Control.Case("GSS LENGTH")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_LENGTH",V.Local.sVal)</string>
        <string>		'category</string>
        <string>		F.Intrinsic.Control.Case("GSS CATEGORY")</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.iUB,"GSS_CATEGORY",V.Local.sVal)</string>
        <string>	F.Intrinsic.Control.EndSelect</string>
        <string>	'000-RJD          -</string>
        <string>	F.Global.XML.Next("BOM","Rows",V.Local.bEOF)</string>
        <string>	F.Global.XML.Next("BOM","Value",V.Local.bEOF)</string>
        <string>F.Intrinsic.Control.Loop</string>
        <string />
        <string>F.Global.XML.CloseSet("BOM","Rows")</string>
        <string>F.Global.XML.CloseSet("BOM","Value")</string>
        <string />
        <string>f.Data.DataTable.AddColumn("IMPORT","Color","String")</string>
        <string />
        <string>F.Intrinsic.UI.CloseWaitDialog</string>
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("ReadXML_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(ss_form_file_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.ReadXML.End</string>
        <string />
        <string>Program.Sub.ExplodeBOM.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("ExplodeBOM_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>v.Local.ssql.Declare(string)</string>
        <string>v.Local.i.Declare(long)</string>
        <string>v.Local.sparentpart.Declare(string)</string>
        <string>v.Local.srev.Declare(String)</string>
        <string>v.Local.sbominfosql.Declare(string)</string>
        <string>v.Local.spart.Declare(String)</string>
        <string>v.Local.sparentpN.Declare(String)</string>
        <string>v.Local.sparentrev.Declare(string)</string>
        <string>V.Local.sHold.Declare(String)</string>
        <string>V.Local.sBOM.Declare(String)</string>
        <string>V.Local.sFilePath.Declare(String)</string>
        <string>V.Local.sFile.Declare(String)</string>
        <string>V.Local.sParams.Declare(String)</string>
        <string>V.Local.bExists.Declare(Boolean)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string>V.Local.iFor.Declare(Long)</string>
        <string>V.Local.iRow.Declare(Long)</string>
        <string>v.Local.icount.Declare(long)</string>
        <string>v.Local.sfieldnames.Declare(string)</string>
        <string>v.Local.stypes.Declare(string)</string>
        <string>v.Local.sreturn.Declare(string)</string>
        <string>v.Local.icount.Set(0)</string>
        <string>v.Local.itest.Declare(long,0)</string>
        <string>v.Local.sballooncallout.Declare(String)</string>
        <string>v.Local.ballowupload.Declare(boolean,True)</string>
        <string>v.Local.ssource.Declare(String)</string>
        <string>v.Local.ssupplierpart.Declare(String)</string>
        <string>v.Local.slevel.Declare(string)</string>
        <string>v.Local.sfilename.Declare(string)</string>
        <string>v.Local.spare.Declare(string)</string>
        <string>v.Local.sum.Declare(String)</string>
        <string>v.Local.sextradesc.Declare(String)</string>
        <string>v.Local.sdesc.Declare(String)</string>
        <string>v.Local.scount2.Declare(String)</string>
        <string>v.Local.sspare.Declare(String)</string>
        <string>v.Local.ssupplier.Declare(String)</string>
        <string>v.Local.svendor.Declare(String)</string>
        <string>v.Local.ssequence.declare(string)</string>
        <string>v.Local.sadditionalbom.Declare(string)</string>
        <string>v.Local.iadditional.Declare(long)</string>
        <string>v.Local.sline.Declare(string)</string>
        <string>v.Local.saddbomnumber.Declare(string)</string>
        <string>v.Local.sretaddbom.Declare(string)</string>
        <string>v.Local.sdata.Declare(String)</string>
        <string>v.Local.fcount.Declare(String)</string>
        <string>v.Local.scount.Declare(string)</string>
        <string>v.Local.scount1.Declare(string)</string>
        <string>v.Local.bdecimal.Declare(boolean)</string>
        <string>v.Local.sfiller.Declare(String)</string>
        <string>v.Local.ifiller.Declare(long)</string>
        <string>v.Local.sfillersql.Declare(String)</string>
        <string>v.Local.stext.Declare(string)</string>
        <string>v.Local.sbomdesignation.Declare(string)</string>
        <string>v.Local.sbomdefinedlength.declare(String)</string>
        <string>v.Local.fbomdefinedlength.Declare(String)</string>
        <string>v.Local.sloc.Declare(String)</string>
        <string>v.Local.slast2.Declare(string)</string>
        <string>v.Local.irowtest.Declare(long)</string>
        <string>v.Global.iassembly.Declare(long)</string>
        <string>v.Local.schildsource.Declare(string)</string>
        <string>v.Local.ballowupload.Set(true)</string>
        <string>v.Local.ilengths.Declare(long)</string>
        <string>v.Local.selements.Declare(String)</string>
        <string>v.Local.suploadtypes.Declare(String)</string>
        <string>v.Local.suploaddata.Declare(String)</string>
        <string>v.Local.ssupplierpart2.Declare(string)</string>
        <string>v.Local.fincrement.declare(float)</string>
        <string>v.Local.sincrement.declare(String)</string>
        <string>v.Local.sremovedUM.Declare(string)</string>
        <string>v.Local.bslash.Declare(boolean)</string>
        <string>v.Local.fleadingnumber.Declare(float)</string>
        <string>v.Local.fnumerator.Declare(float)</string>
        <string>v.Local.fdenominator.declare(float)</string>
        <string>v.Local.baddzeros.Declare(boolean)</string>
        <string>v.Local.scategory.Declare(String)</string>
        <string>v.Local.stextsql.declare(string)</string>
        <string>v.Local.iret.Declare(long)</string>
        <string>v.Local.sfirstpart.Declare(string)</string>
        <string>v.Local.syeller.Declare(String)</string>
        <string>v.Local.sexp.Declare(string)</string>
        <string>v.Local.iloop.Declare(long)</string>
        <string>v.Local.scountnotloaded.Declare(string)</string>
        <string>v.Local.sTrimmedPart.Declare(string)</string>
        <string>v.Local.ibomloop.Declare(long,0)</string>
        <string>v.Local.itemplate.Declare(long,0)</string>
        <string>v.Local.sbomseq.Declare(String)</string>
        <string>v.Local.fcountgss.Declare(float)</string>
        <string>v.Local.smodline.Declare(string)</string>
        <string>v.Local.sparentpartcombo.Declare(string)</string>
        <string />
        <string>f.Intrinsic.UI.InvokeWaitDialog("Validating Data...")</string>
        <string>'set the fields and types</string>
        <string>V.Local.sFieldNames.Set("Line*!*Seq*!*Part*!*Description*!*Cat*!*Source*!*Count*!*OnHand*!*OnOrder*!*Required*!*Net*!*RtrNet*!*Parent*!*ldHrs*!*LdDate*!*filler*!*UM*!*GSS_EXTRA_DESC")</string>
        <string>V.Local.sTypes.Set("String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String")</string>
        <string>'create the upload datatable</string>
        <string>v.Local.suploadtypes.set("string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string")</string>
        <string>v.Local.suploaddata.Set("*!**!**!**!**!**!**!**!*")</string>
        <string>V.Local.sElements.Set("PARENT*!*SEQUENCE*!*PART*!*UM*!*DESC*!*REV*!*CATEGORY*!*SOURCE*!*COUNT")</string>
        <string>F.Data.DataTable.CreateFromString("UPLOAD",v.Local.suploaddata,V.Local.selements,V.Local.suploadtypes,"*!*","@!@",True)</string>
        <string>'display status</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Getting GSS BOM Data")</string>
        <string>'set the part rev and desc</string>
        <string>gui.Form.txtDesc1.Text(v.datatable.Import(v.Local.icount).GSS_DESCRIPTION.fieldvaltrim)</string>
        <string>gui.Form.txtPN1.Text(v.datatable.Import(v.Local.icount).GSS_PARENT.fieldvaltrim)</string>
        <string>gui.Form.txtRev1.Text(v.datatable.Import(v.Local.icount).GSS_REVISION.fieldvaltrim)</string>
        <string>'set the parent part</string>
        <string>f.Intrinsic.String.GSSPartString(v.Screen.Form!txtPN1.Text,v.Screen.Form!txtRev1.text,v.local.sparentpart)</string>
        <string>V.Local.sData.Set("*!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!*")</string>
        <string>V.Local.sFieldNames.Set("GSS_LEVEL*!*GSS_PART_NUMBER*!*GSS_REVISION*!*GSS_DESCRIPTION*!*GSS_UOM*!*GSS_PART_TYPE*!*GSS_SOURCE_CODE*!*GSS_PARENT*!*GSS_COUNT*!*GSS_BOM_DESIGNATION*!*GSS_SEQUENCE*!*GSS_IsParent*!*GSS_FILE_NAME*!*GSS_ASSEMBLY_TYPE*!*GSS_BALLOON_CALLOUT*!*GSS_SPARE*!*GSS_SUPPLIER_PART_NUMBER*!*GSS_SUPPLIER*!*GSS_CHILD_SOURCE_CODE*!*GSS_LENGTH*!*GSS_EXTRA_DESC*!*Color*!*ALREADYMADE*!*GSS_CATEGORY")</string>
        <string>V.Local.sTypes.Set("String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String")</string>
        <string>F.Data.DataTable.CreateFromString("TEMPLATE",V.Local.sData,V.Local.sFieldNames,V.Local.sTypes,"*!*","@!@",True)</string>
        <string />
        <string>'check to see if that BOM already exists if so populate the second grid</string>
        <string>f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.sparentpart.Trim,v.Local.ssql)</string>
        <string>F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)</string>
        <string>                F.ODBC.con!rst.Close</string>
        <string>'               set the values in the textboxes</string>
        <string>                gui.Form.txtPN2.Text(v.Screen.Form!txtPN1.Text)</string>
        <string>                gui.Form.txtRev2.Text(v.Screen.Form!txtRev1.Text)</string>
        <string>                gui.Form.txtDesc2.Text(v.Screen.Form!txtDesc1.Text)</string>
        <string>                v.Global.bExists.Set(false)</string>
        <string>                gui.Form.cmdUpload.Enabled(True)</string>
        <string>'               otherwise call the loadwithnothingingss sub</string>
        <string>                f.Intrinsic.Control.CallSub(loadwithnothingingss)</string>
        <string>                f.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>F.ODBC.con!rst.Close</string>
        <string>''set the exist variable to true</string>
        <string>v.Global.bExists.Set(true)</string>
        <string>'set the values in the textboxes</string>
        <string>gui.Form.txtPN2.Text(v.Screen.Form!txtPN1.Text)</string>
        <string>gui.Form.txtRev2.Text(v.Screen.Form!txtRev1.Text)</string>
        <string>gui.Form.txtDesc2.Text(v.Screen.Form!txtDesc1.Text)</string>
        <string />
        <string>'build the file to explode</string>
        <string>F.Intrinsic.String.Build("{0}\BOM{1}",V.System.Temp,V.Caller.Terminal,V.Local.sFilePath)</string>
        <string />
        <string>'setting just as part for now until the rev gets fixed for parent</string>
        <string>'F.Intrinsic.String.Build("0{0}{1}{0}{2}",V.Ambient.Tab,v.Screen.Form!txtPN1.Text,v.Local.sFilePath,V.Local.sParams)</string>
        <string />
        <string>F.Intrinsic.String.Build("0{0}{1}{0}{2}",V.Ambient.Tab,V.Local.sparentpart.Trim,v.Local.sFilePath,V.Local.sParams)</string>
        <string>F.Intrinsic.File.String2File(V.Local.sFilePath,V.Local.sParams)</string>
        <string>'fire the explode BOM callwrapper</string>
        <string>F.Global.General.CallWrapperSync(410000,V.Local.sFilePath)</string>
        <string>F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>'check if the file exists</string>
        <string>F.Intrinsic.Control.If(V.Local.bExists,=,False)</string>
        <string>                V.Global.IsBOM.Set(False)</string>
        <string>                F.Intrinsic.Control.ExitSub</string>
        <string>f.Intrinsic.Control.Else</string>
        <string>                v.Global.bExists.Set(True)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>'send the file to a string array</string>
        <string>F.Intrinsic.File.FiletoStringArray(V.Local.sFilePath,V.Ambient.Tab,V.Local.sret)</string>
        <string>V.Local.sret.RedimPreserve(0,3)</string>
        <string>F.Intrinsic.File.GetFileNameFromFQN(V.Local.sret(3),V.Local.sFile.Trim)</string>
        <string>F.Intrinsic.String.Split(V.Local.sFile," ",V.Local.sFile)</string>
        <string>F.Intrinsic.String.Build("{0}\{1}",V.System.Temp,V.Local.sFile(0).Trim,V.Local.sFilePath)</string>
        <string>F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>'check if the file exists</string>
        <string>F.Intrinsic.Control.If(V.Local.bExists,=,False)</string>
        <string>                V.Global.IsBOM.Set(False)</string>
        <string>                F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.EndIf'load it to a string</string>
        <string>F.Intrinsic.File.File2String(V.Local.sFilePath,V.Local.sret)</string>
        <string>f.Intrinsic.String.Replace(v.Local.sret,"*","",v.Local.sret)</string>
        <string>'load it to a string</string>
        <string>F.Intrinsic.File.File2String(V.Local.sFilePath,V.Local.sretaddbom)</string>
        <string>f.Intrinsic.String.Replace(v.Local.sretaddbom,"*","",v.Local.sadditionalbom)</string>
        <string>'split the return</string>
        <string>f.Intrinsic.String.Split(v.Local.sadditionalbom.Trim,v.Ambient.NewLine,v.Local.sadditionalbom)</string>
        <string>'check the ubound</string>
        <string />
        <string>f.Intrinsic.Control.If(v.Local.sadditionalbom.UBound,&lt;&gt;,0)</string>
        <string>f.Intrinsic.Control.AndIf(v.Local.sadditionalbom.UBound,&lt;&gt;,-1)</string>
        <string>                'loop through and check each part</string>
        <string>                f.Intrinsic.Control.For(v.Local.iadditional,7,v.Local.sadditionalbom.UBound,1)</string>
        <string>                                'split the line</string>
        <string>                                f.Intrinsic.String.Split(v.Local.sadditionalbom(v.Local.iadditional),"|~|",v.Local.sline)</string>
        <string>                                'set the router number</string>
        <string>                                v.Local.saddbomnumber.Set(v.Local.sline(2))</string>
        <string>                                'query to see if it is a BOM in Gss</string>
        <string>                                'check to see if that BOM already exists if so populate the second grid</string>
        <string>                                f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.saddbomnumber.Trim,v.Local.ssql)</string>
        <string>                                F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>                                F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,&lt;&gt;,True)</string>
        <string>                                                'build the file to explode</string>
        <string>                                                F.Intrinsic.String.Build("{0}\BOM{1}",V.System.Temp,V.Caller.Terminal,V.Local.sFilePath)</string>
        <string>                                                F.Intrinsic.String.Build("0{0}{1}{0}{2}",V.Ambient.Tab,V.Local.saddbomnumber.Trim,v.Local.sFilePath,V.Local.sParams)</string>
        <string>                                                F.Intrinsic.File.String2File(V.Local.sFilePath,V.Local.sParams)</string>
        <string>                                                F.Global.General.CallWrapperSync(410000,V.Local.sFilePath)</string>
        <string>                                                F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>                                                                v.Global.isBOM.Set(true)</string>
        <string>                                                'check if the file exists</string>
        <string>                                                F.Intrinsic.Control.If(V.Local.bExists,=,False)</string>
        <string>                                                                'exit the sub if there is no BOM</string>
        <string>                                                                V.Global.IsBOM.Set(False)</string>
        <string>                                                                F.ODBC.con!rst.Close</string>
        <string>                                                                F.Intrinsic.Control.ExitSub</string>
        <string>                                                F.Intrinsic.Control.EndIf</string>
        <string>                                                F.Intrinsic.File.FiletoStringArray(V.Local.sFilePath,V.Ambient.Tab,V.Local.sretaddbom)</string>
        <string>                                                V.Local.sretaddbom.RedimPreserve(0,3)</string>
        <string>                                                F.Intrinsic.File.GetFileNameFromFQN(V.Local.sRetaddbom(3),V.Local.sFile.Trim)</string>
        <string>                                                F.Intrinsic.String.Split(V.Local.sFile," ",V.Local.sFile)</string>
        <string>                                                F.Intrinsic.String.Build("{0}\{1}",V.System.Temp,V.Local.sFile(0).Trim,V.Local.sFilePath)</string>
        <string>                                                F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>                                                'check if the file exists</string>
        <string>                                                F.Intrinsic.Control.If(V.Local.bExists,=,False)</string>
        <string>                                                                V.Global.IsBOM.Set(False)</string>
        <string>                                                                F.ODBC.con!rst.Close</string>
        <string>                                                                F.Intrinsic.Control.ExitSub</string>
        <string>                                                F.Intrinsic.Control.EndIf</string>
        <string>                                                v.Global.isbom.Set(true)</string>
        <string>                                                'load it to a string</string>
        <string>                                                F.Intrinsic.File.File2String(V.Local.sFilePath,V.Local.sretaddbom)</string>
        <string>                                                f.Intrinsic.String.Replace(v.Local.sretaddbom,"*","",v.Local.sretaddbom)</string>
        <string>                                                'split the return</string>
        <string>                                                f.Intrinsic.String.Split(v.Local.sretaddbom.Trim,v.Ambient.NewLine,v.Local.sretaddbom)</string>
        <string>                                F.Intrinsic.Control.EndIf</string>
        <string>                                F.ODBC.con!rst.Close</string>
        <string>                f.Intrinsic.Control.Next(v.Local.iadditional)</string>
        <string>                'clear the bom number</string>
        <string>                v.Local.saddbomnumber.Set("")</string>
        <string>f.Intrinsic.Control.EndIf</string>
        <string>'delete the file</string>
        <string>f.Intrinsic.File.DeleteFile(v.Local.sFilePath)</string>
        <string />
        <string>'f.Intrinsic.Control.If(v.Global.isBOM,=,true)</string>
        <string>'               v.Local.ibomloop.Set(1)</string>
        <string>'f.Intrinsic.Control.Else</string>
        <string>'               v.Local.ibomloop.Set(0)</string>
        <string>'f.Intrinsic.Control.EndIf</string>
        <string />
        <string>'f.Data.datatable.DeleteRow("IMPORT",0)</string>
        <string />
        <string>'loop through the datatable</string>
        <string>F.Intrinsic.Control.For(v.Local.i,0,v.dataTable.Import.RowCount--,1)</string>
        <string />
        <string />
        <string>F.Intrinsic.Debug.InvokeDebugger</string>
        <string />
        <string>F.Intrinsic.Debug.Stop</string>
        <string />
        <string>                v.Local.sparentpart.Set(v.DataTable.import(v.Local.i).GSS_PARENT.fieldvaltrim)</string>
        <string>                'format the parent</string>
        <string>                F.Intrinsic.String.RPad(V.Local.sparentpart," ",20,v.Local.sparentpart)</string>
        <string>                'set the global parent</string>
        <string>                v.Global.sparentpart.set(v.Local.sparentpart)</string>
        <string>                'set and format the count</string>
        <string>                v.Local.scount.Set(v.DataTable.import(v.Local.i).GSS_COUNT.fieldvaltrim)</string>
        <string>                v.Local.scountnotloaded.Set(v.DataTable.import(v.Local.i).GSS_COUNT.fieldvaltrim)</string>
        <string>                'check to see if there is a decimal in the count</string>
        <string>'               f.Intrinsic.String.IsInString(v.Local.scount,".",true,v.Local.bdecimal)</string>
        <string>'               'if there is a decimal format correctly otherwise add and then format</string>
        <string>'               f.Intrinsic.Control.If(v.Local.bdecimal,=,True)</string>
        <string>'                               'split on the dec</string>
        <string>'                               f.Intrinsic.String.Split(v.Local.scount,".",v.Local.scount2)</string>
        <string>'                               F.Intrinsic.String.RPad(V.Local.scount2,"0",4,V.Local.sCount2)</string>
        <string>'                               f.Intrinsic.String.Build("{0}.{1}",v.Local.scount1,v.Local.scount2,v.Local.scount)</string>
        <string>'               f.Intrinsic.Control.Else</string>
        <string>'                               f.Intrinsic.String.Build("{0}.{1}",v.Local.scount,"0000",v.Local.scount)</string>
        <string>'               f.Intrinsic.Control.EndIf</string>
        <string>                'set the spare</string>
        <string>                v.Local.sspare.Set(v.DataTable.import(v.Local.i).GSS_SPARE.fieldvaltrim)</string>
        <string>                'set the level</string>
        <string>                v.Local.slevel.Set(v.DataTable.import(v.Local.i).GSS_LEVEL.fieldvaltrim)</string>
        <string>                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_COUNT",V.Local.scount)</string>
        <string>                v.Local.fcount.Set(v.Local.scount)</string>
        <string>                'get the part and desc and format</string>
        <string>                v.Local.sdesc.Set(v.datatable.import(v.Local.i).GSS_DESCRIPTION.fieldvaltrim)</string>
        <string>                F.Intrinsic.String.left(V.Local.sdesc,30,V.Local.sdesc)</string>
        <string>                F.Intrinsic.String.RPad(V.Local.sdesc," ",30,V.Local.sdesc)</string>
        <string>                'get the part number and format</string>
        <string>                v.Local.spart.Set(v.datatable.import(v.Local.i).GSS_PART_NUMBER!fieldvaltrim)</string>
        <string>                F.Intrinsic.String.RPad(V.Local.spart," ",20,V.Local.spart)</string>
        <string>                'get the sequence and format</string>
        <string>                v.Local.ssequence.Set(v.DataTable.import(v.Local.i).GSS_SEQUENCE.fieldvaltrim)</string>
        <string>                F.Intrinsic.String.LPad(V.Local.ssequence,"0",4,V.Local.ssequence)</string>
        <string>                'get the rev and location and UM and source code</string>
        <string>                v.Local.srev.Set(v.datatable.import(v.Local.i).GSS_REVISION.fieldvaltrim)</string>
        <string>                F.Intrinsic.String.LPad(V.Local.srev," ",3,V.Local.srev)</string>
        <string>                'UM</string>
        <string>                v.Local.sUM.Set(v.datatable.import(v.Local.i).GSS_UOM.fieldvaltrim)</string>
        <string>                F.Intrinsic.String.RPad(V.Local.sum," ",2,V.Local.sum)</string>
        <string>                'Source</string>
        <string>                v.Local.ssource.Set(v.datatable.import(v.Local.i).GSS_SOURCE_CODE.fieldvaltrim)</string>
        <string>                F.Intrinsic.String.RPad(V.Local.ssource," ",1,V.Local.ssource)</string>
        <string>                'Supplier part, supplier, vendor, sballooncallout, file, bom designation</string>
        <string>                v.Local.ssupplierpart.Set(v.datatable.import(v.Local.i).GSS_SUPPLIER_PART_NUMBER.fieldvaltrim)</string>
        <string>                v.Local.ssupplier.Set(v.datatable.import(v.Local.i).GSS_SUPPLIER.fieldvaltrim)</string>
        <string>                v.Local.svendor.Set(v.datatable.import(v.Local.i).GSS_SUPPLIER.fieldvaltrim)</string>
        <string>                v.Local.sballooncallout.Set(v.datatable.import(v.Local.i).GSS_BALLOON_CALLOUT.fieldvaltrim)</string>
        <string>                v.Local.sfilename.Set(v.datatable.import(v.Local.i).GSS_FILE_NAME.fieldvaltrim)</string>
        <string>                v.Local.scategory.Set(v.datatable.import(v.Local.i).GSS_CATEGORY.fieldvaltrim)</string>
        <string>                v.local.sbomdesignation.Set(v.datatable.import(v.Local.i).GSS_BOM_DESIGNATION.fieldvaltrim)</string>
        <string>                v.Local.itemplate.Set(v.dataTable.TEMPLATE.RowCount--)</string>
        <string />
        <string>                'if party type is custom</string>
        <string>                f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"CUSTOM")                  </string>
        <string>                                'check to see if that BOM already exists if so populate the second grid</string>
        <string>                                f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.spart.Trim,v.Local.ssql)</string>
        <string>                                F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>                                F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,&lt;&gt;,True)</string>
        <string>                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.local.ssupplierpart.trim)</string>
        <string>                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.ssupplierpart.trim)</string>
        <string>                                                'build the file to explode</string>
        <string>                                                F.Intrinsic.String.Build("{0}\BOM{1}",V.System.Temp,V.Caller.Terminal,V.Local.sFilePath)</string>
        <string>                                                F.Intrinsic.String.Build("0{0}{1}{0}{2}",V.Ambient.Tab,V.Local.spart.Trim,v.Local.sFilePath,V.Local.sParams)</string>
        <string>                                                F.Intrinsic.File.String2File(V.Local.sFilePath,V.Local.sParams)</string>
        <string>                                                F.Global.General.CallWrapperSync(410000,V.Local.sFilePath)</string>
        <string>                                                F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>                                                'check if the file exists</string>
        <string>                                                F.Intrinsic.Control.If(V.Local.bExists,=,True)</string>
        <string>                                                                F.Intrinsic.File.FiletoStringArray(V.Local.sFilePath,V.Ambient.Tab,V.Local.sretaddbom)</string>
        <string>                                                                V.Local.sretaddbom.RedimPreserve(0,3)</string>
        <string>                                                                F.Intrinsic.File.GetFileNameFromFQN(V.Local.sRetaddbom(3),V.Local.sFile.Trim)</string>
        <string>                                                                F.Intrinsic.String.Split(V.Local.sFile," ",V.Local.sFile)</string>
        <string>                                                                F.Intrinsic.String.Build("{0}\{1}",V.System.Temp,V.Local.sFile(0).Trim,V.Local.sFilePath)</string>
        <string>                                                                F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>                                                                'check if the file exists</string>
        <string>                                                                F.Intrinsic.Control.If(V.Local.bExists,=,true)                         </string>
        <string>                                                                                'load it to a string</string>
        <string>                                                                                F.Intrinsic.File.File2String(V.Local.sFilePath,V.Local.sretaddbom)</string>
        <string>                                                                                f.Intrinsic.String.Replace(v.Local.sretaddbom,"*","",v.Local.sretaddbom)</string>
        <string>                                                                                'split the return</string>
        <string>                                                                                f.Intrinsic.String.Split(v.Local.sretaddbom.Trim,v.Ambient.NewLine,v.Local.sretaddbom)</string>
        <string>                                                                F.Intrinsic.Control.EndIf</string>
        <string>                                                                'delete the file</string>
        <string>                                                                f.Intrinsic.File.DeleteFile(v.Local.sFilePath)</string>
        <string>                                                F.Intrinsic.Control.EndIf</string>
        <string>                                                f.ODBC.con!rst.Close</string>
        <string>                                f.Intrinsic.Control.Else</string>
        <string>                                                'close the connection</string>
        <string>                                                f.ODBC.con!rst.Close</string>
        <string>                                                'check the source code</string>
        <string>                                                f.Intrinsic.Control.If(v.Local.ssource.Trim,=,"NCC-*")</string>
        <string>                                                                'set as P</string>
        <string>                                                                v.Local.ssource.Set("P")</string>
        <string>                                                f.Intrinsic.Control.ElseIf(v.Local.ssource.Trim,=,"STD-*")</string>
        <string>                                                                'set as P</string>
        <string>                                                                v.Local.ssource.Set("P")</string>
        <string>                                                f.Intrinsic.Control.ElseIf(v.Local.ssource.Trim,=,"P-*")</string>
        <string>                                                                'set as P</string>
        <string>                                                                v.Local.ssource.Set("P")</string>
        <string>                                                f.Intrinsic.Control.Else</string>
        <string>                                                                'set as J for purchase to job</string>
        <string>                                                                v.Local.ssource.Set("J")</string>
        <string>                                                f.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>                                                'query to see if that part is listed as an extra desc </string>
        <string>                                                f.Intrinsic.String.Build("Select Top 1 PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.Local.spart.Trim,v.Local.stextsql)</string>
        <string>                                                f.ODBC.Connection!con.ExecuteAndReturn(v.Local.stextsql,v.Local.sRet)</string>
        <string>                                                f.Intrinsic.Control.If(v.Local.sRet.Trim,&lt;&gt;,"")</string>
        <string>                                                                v.Local.spart.Set(v.Local.sRet)</string>
        <string />
        <string>                 'check to see if the import data is a new row or appending</string>
        <string>             '*************</string>
        <string>             'update count with the count from the Bom Master</string>
        <string>             F.Intrinsic.String.Build("{0}00", v.DataTable.Import(v.Local.i).GSS_Sequence!FieldValtrim, v.Local.sBomSeq)</string>
        <string>             F.Intrinsic.String.Right(v.Local.sBomSeq, 4, v.Local.sBomSeq)</string>
        <string>             F.Intrinsic.String.GSSPartString(v.Local.sparentpart.Trim, v.Local.srev.Trim, v.Local.sparentpartCombo)</string>
        <string>             F.Intrinsic.String.Build("Select Quantity from Bom_Mstr where Part = '{0}' and Parent = '{1}' and Sequence_Bom = '{2}'", v.Local.sRet.Trim, v.Local.sparentpartCombo.Trim, v.Local.sBomSeq,v.Local.ssql)</string>
        <string>             F.ODBC.Connection!con.OpenLocalRecordsetRO("rstQty", v.Local.ssql)</string>
        <string>             F.Intrinsic.Control.If(v.ODBC.con!rstQty.EOF, =, False)</string>
        <string>                             v.Local.fcountGSS.Set(v.ODBC.con!rstQty.FieldValFloat!Quantity)</string>
        <string>             F.Intrinsic.Control.EndIf</string>
        <string>             F.ODBC.con!rstQty.Close</string>
        <string>             F.Intrinsic.String.Format(v.Local.fcountGSS, "0.####", v.Local.fcountGSS)</string>
        <string>             F.Intrinsic.Control.If(v.Local.fcountGSS, =, 0)</string>
        <string>                             v.Local.fcountGSS.Set(v.Local.fcount)</string>
        <string>             Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string />
        <string />
        <string>                                                                'check to see if the import data is a new row or appending</string>
        <string>                                                                F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.spart.Trim,"GSS_COUNT",v.Local.fcountgss,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"GSS_EXTRA_DESC","Already in GSS","Color","P")</string>
        <string>                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)</string>
        <string>                                                                F.Intrinsic.String.RPad(v.Local.spart," ",20,v.Local.spart)</string>
        <string>                                                                f.Intrinsic.String.Left(v.Local.spart,17,v.Local.spart)</string>
        <string>                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.spart.trim)</string>
        <string>                                                f.Intrinsic.Control.else</string>
        <string>                                                                'query to see if that part is in inventory</string>
        <string>                                                                f.Intrinsic.String.Build("Select PART from V_INVENTORY_MSTR where PART = '{0}'",v.Local.spart.Trim,v.Local.ssql)</string>
        <string>                                                                F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>                                                                F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)</string>
        <string>                                                                                f.Intrinsic.Control.If(v.Local.i,&gt;,0)</string>
        <string>                                                                                                'check to see if the import data is a new row or appending</string>
        <string>                                                                                                F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.spart.Trim,"GSS_COUNT",v.Local.fcount,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"GSS_EXTRA_DESC",v.Local.ssupplier,"COlor","Y")</string>
        <string>                                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)           </string>
        <string>                                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.spart.trim)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"Color","Y")       </string>
        <string>                                                  												F.Data.DataTable.SetValue("IMPORT",v.Local.i,"ALREADYMADE","MADE")       </string>
        <string>                                                                                f.Intrinsic.Control.Else</string>
        <string>                                                                                                F.Data.DataTable.SetValue("IMPORT",0,"GSS_PART_NUMBER",V.Local.spart.trim)         </string>
        <string>                                                                                                F.Data.DataTable.SetValue("IMPORT",0,"GSS_EXTRA_DESC",V.Local.spart.trim)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("IMPORT",0,"COLOR","Y")     </string>
        <string>																								F.Data.DataTable.SetValue("IMPORT",0,"ALREADYMADE","MADE")                </string>
        <string>                                                                                f.Intrinsic.Control.endif</string>
        <string>                                                                                'add the part to the batch</string>
        <string>                                                                                f.Global.Inventory.AddPartToBatch(v.Local.spart.Trim,"EA",v.Local.sdesc.Trim,"","22",v.Local.ssource.Trim,"","","0","NOMAINT")                </string>
        <string>                                                                                'set the local boolean as false</string>
        <string>                                                                                v.Local.ballowupload.Set(False)</string>
        <string>                                                                'otherwise if something is found append the datatable</string>
        <string>                                                                f.Intrinsic.Control.Else</string>
        <string>                                                                                F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.spart.Trim,"GSS_COUNT",v.Local.fcount,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"GSS_EXTRA_DESC","Already in GSS","COlor","P","GSS_SEQUENCE",v.Local.ssequence)</string>
        <string>                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)           </string>
        <string>                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.spart.trim)</string>
        <string>                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"Color","Y")  </string>
        <string>                                       											F.Data.DataTable.SetValue("IMPORT",v.Local.i,"ALREADYMADE","MADE")  </string>
        <string>                                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                                F.ODBC.con!rst.Close</string>
        <string>                                                f.Intrinsic.Control.EndIf</string>
        <string>'                                               F.ODBC.con!rst.Close</string>
        <string>                                f.Intrinsic.Control.EndIf</string>
        <string>                'check to see if purchased</string>
        <string>                f.Intrinsic.Control.ElseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"PURCHASED")</string>
        <string />
        <string />
        <string>                                'check to see if that BOM already exists if so populate the second grid</string>
        <string>                                f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.ssupplierpart.Trim,v.Local.ssql)</string>
        <string>                                F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>                                F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,&lt;&gt;,True)</string>
        <string>                                                f.ODBC.con!rst.Close</string>
        <string>                                f.Intrinsic.Control.Else</string>
        <string>                                                f.ODBC.con!rst.Close</string>
        <string>                                                'check the source code</string>
        <string>                                                f.Intrinsic.Control.If(v.Local.ssource.Trim,=,"NCC")</string>
        <string>                                                                'set as P</string>
        <string>                                                                v.Local.ssource.Set("P")</string>
        <string>                                                f.Intrinsic.Control.ElseIf(v.Local.ssource.Trim,=,"STD")</string>
        <string>                                                                'set as P</string>
        <string>                                                                v.Local.ssource.Set("P")</string>
        <string>                                                f.Intrinsic.Control.ElseIf(v.Local.ssource.Trim,=,"GLIDE-LINE")</string>
        <string>                                                                'set as P</string>
        <string>                                                                v.Local.ssource.Set("P")</string>
        <string>                                                f.Intrinsic.Control.Else</string>
        <string>                                                                'set as j for purchase to job</string>
        <string>                                                                v.Local.ssource.Set("J")</string>
        <string>                                                f.Intrinsic.Control.EndIf                                                 </string>
        <string>'                                               'check to see if the part has already been made</string>
        <string>                                                f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).ALREADYMADE.fieldvaltrim,&lt;&gt;,"MADE")</string>
        <string>'                                                               'query to see if that part is listed as an extra desc </string>
        <string>                                                                f.Intrinsic.String.Build("Select top 1 PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.Local.ssupplierpart.Trim,v.Local.stextsql)</string>
        <string>                                                                f.ODBC.Connection!con.Executeandreturn(v.Local.stextsql,v.Local.sRet)</string>
        <string>                                                                f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")</string>
        <string>'                                                                               'query to see if that part is in inventory</string>
        <string>                                                                                f.Intrinsic.String.Build("Select PART from V_INVENTORY_MSTR where PART = '{0}'",v.Local.ssupplierpart.Trim,v.Local.ssql)</string>
        <string>                                                                                F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPurch",V.Local.sSQL)</string>
        <string>                                                                                F.Intrinsic.Control.If(V.ODBC.con!rstPurch.EOF,=,True)</string>
        <string>                                                                                                'get the last filler for auto generated parts and add 1 to it plus the prefix</string>
        <string>                                                                                                f.Intrinsic.String.Build("Select F_LONG FROM OP_HEADER where ID = '{0}' and SEQUENCE = '{1}'","400460","0002",v.Local.sfillersql)</string>
        <string>                                                                                                F.ODBC.Connection!con.OpenLocalRecordsetRW("rst1",V.Local.sfillersql)</string>
        <string>                                                                                                F.Intrinsic.Control.If(V.ODBC.con!rst1.EOF,=,False)</string>
        <string>                                                                                                                v.Local.ifiller.Set(v.ODBC.con!rst1.FieldValTrim!F_LONG)</string>
        <string>                                                                                                                f.Intrinsic.Math.Add(v.Local.ifiller,1,v.Local.sfiller)</string>
        <string>                                                                                                                f.ODBC.con!rst1.Set!F_LONG(v.Local.sfiller)</string>
        <string>                                                                                                                f.ODBC.con!rst1.Update</string>
        <string>                                                                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                                                                f.ODBC.con!rst1.Close</string>
        <string>                                                                                                'add the prefix</string>
        <string>                                                                                                f.Intrinsic.String.Build("{0}{1}",v.Global.sprefix.Trim,v.Local.sfiller,v.Local.spart)</string>
        <string>                                                                                                f.Intrinsic.String.GSSPartString(v.Local.spart.Trim,v.Local.srev.Trim,v.Local.spart)                              </string>
        <string>                                                                                                'before we add to batch confirm if that Part is listed multiple times in the XML</string>
        <string>                                                                                                f.Intrinsic.Control.If(v.Local.i,&gt;,0)</string>
        <string>                                                                                               	 F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.spart.Trim,"GSS_EXTRA_DESC",v.Local.ssupplierpart.Trim,"GSS_COUNT",v.Local.fcount,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sremovedUM.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"Color","Y","GSS_SEQUENCE",v.Local.ssequence)</string>
        <string />
        <string>                                                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)           </string>
        <string>                                                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.ssupplierpart.trim)</string>
        <string>																												F.Data.DataTable.SetValue("IMPORT",v.Local.i,"ALREADYMADE","MADE")</string>
        <string>                                                                                                                'check to see if the TEMPLATE data is a new row or appending</string>
        <string>'                                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_PART_NUMBER",V.Local.spart.trim)       </string>
        <string>'                                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_EXTRA_DESC",V.Local.ssupplierpart.trim)</string>
        <string>'                                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"Color","Y")                                </string>
        <string>                                                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"Color","Y")                </string>
        <string>'                                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"ALREADYMADE","MADE")                                     </string>
        <string>                                                                                                f.Intrinsic.Control.Else</string>
        <string>                                                                                                                F.Data.DataTable.SetValue("Import",0,"GSS_PART_NUMBER",V.Local.spart.trim)            </string>
        <string>                                                                                                                F.Data.DataTable.SetValue("Import",0,"GSS_EXTRA_DESC",V.Local.ssupplierpart.trim)</string>
        <string>                                                                                                                F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_PART_NUMBER",V.Local.spart.trim)    </string>
        <string>                                                                                                                F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_EXTRA_DESC",V.Local.ssupplierpart.trim)</string>
        <string>                                                                                                                F.Data.DataTable.SetValue("TEMPLATE",0,"Color","Y")  </string>
        <string>                                                                                                                F.Data.DataTable.SetValue("Import",0,"Color","Y")                         </string>
        <string>                                                                                                                F.Data.DataTable.SetValue("IMPORT",0,"ALREADYMADE","MADE")   </string>
        <string>                                                                                                f.Intrinsic.Control.endif</string>
        <string>                                                                                                f.Intrinsic.String.Build("GSS_DESCRIPTION = '{0}'",v.DataTable.TEMPLATE(v.Local.i).GSS_DESCRIPTION.fieldvaltrim,v.Local.sexp)</string>
        <string>                                                                                                'make sure there are no new custom parts being created for the same extra desc</string>
        <string>                                                                                                f.Data.DataTable.Select("TEMPLATE",v.Local.sexp.trim,v.Local.sret)</string>
        <string>                                                                                                'split the ret</string>
        <string>                                                                                                f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)</string>
        <string>                                                                                                f.Intrinsic.Control.If(v.Local.sret.UBound,&gt;,0)</string>
        <string>                                                                                '                               'loop through the return to get the ordinals and set the parts</string>
        <string>                                                                                                                f.Intrinsic.Control.For(v.Local.iloop,0,v.Local.sret.UBound,1)</string>
        <string>                                                                                '                                               'if its the first loop around set the part</string>
        <string>                                                                                                                                f.Intrinsic.Control.If(v.Local.iloop,=,0)</string>
        <string>                                                                                                                                                v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>                                                                                                                                                v.Local.sfirstpart.Set(v.datatable.TEMPLATE(v.Local.iret).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>                                                                                                                                                v.Local.syeller.Set(v.datatable.TEMPLATE(v.Local.iret).Color.fieldvaltrim)</string>
        <string>                                                                                                                                                f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>                                                                                                                                                F.Data.DataTable.SetValue("IMPORT",V.Local.iret,"GSS_EXTRA_DESC",v.local.ssupplierpart.trim)</string>
        <string>                                                                                                                                f.Intrinsic.Control.Else</string>
        <string>                                                                                                                                                v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>                                                                                                                                                f.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",v.local.sfirstpart)                               </string>
        <string>                                                                                                                                                F.Data.DataTable.SetValue("IMPORT",V.Local.i,"GSS_EXTRA_DESC",v.local.ssupplierpart.trim)                                                  </string>
        <string>                                                                                                                                                f.Data.DataTable.SetValue("IMPORT",v.Local.i,"ALREADYMADE","MADE")           </string>
        <string>                                                                                                                                                f.Data.DataTable.SetValue("IMPORT",v.Local.i,"Color",v.Local.syeller)                                                   </string>
        <string />
        <string>                                                                                                                                                f.Data.DataTable.SetValue("TEMPLATE",v.Local.iret,"GSS_PART_NUMBER",v.local.sfirstpart)</string>
        <string>                                                                                                                                                f.Data.DataTable.SetValue("TEMPLATE",v.Local.iret,"Color",v.Local.syeller)</string>
        <string>                                                                                                                                                f.Data.DataTable.SetValue("TEMPLATE",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>                                                                                                                                                F.Data.DataTable.SetValue("TEMPLATE",V.Local.iret,"GSS_EXTRA_DESC",v.local.ssupplierpart.trim)                                                                       </string>
        <string>                                                                                                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                                                                                f.Intrinsic.Control.Next(v.local.iloop)</string>
        <string>                                                                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                                                                'add the part to the batch            </string>
        <string>                                                                                                f.Global.Inventory.AddPartToBatch(v.Local.spart.Trim,"EA",v.Local.sdesc.Trim,"","33",v.Local.ssource.Trim,"","","0","NOMAINT")                </string>
        <string>                                                                                f.Intrinsic.Control.EndIf </string>
        <string>                                                                                f.ODBC.con!rstPurch.Close</string>
        <string>                                                                f.Intrinsic.Control.Else</string>
        <string>                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.sret.trim)              </string>
        <string>                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.ssupplierpart.trim)</string>
        <string />
        <string>                       'update count with the count from the Bom Master</string>
        <string>                       F.Intrinsic.String.Build("{0}00", v.DataTable.Import(v.Local.i).GSS_Sequence!FieldValtrim, v.Local.sBomSeq)</string>
        <string>                       F.Intrinsic.String.Right(v.Local.sBomSeq, 4, v.Local.sBomSeq)</string>
        <string>                       F.Intrinsic.String.GSSPartString(v.Local.sparentpart.Trim, v.Local.srev.Trim, v.Local.sparentpartCombo)</string>
        <string>                       F.Intrinsic.String.Build("Select Quantity from Bom_Mstr where Part = '{0}' and Parent = '{1}' and Sequence_Bom = '{2}'", v.Local.sRet.Trim, v.Local.sparentpartCombo.Trim, v.Local.sBomSeq,v.Local.ssql)</string>
        <string>                       F.ODBC.Connection!con.OpenLocalRecordsetRO("rstQty", v.Local.ssql)</string>
        <string>                       F.Intrinsic.Control.If(v.ODBC.con!rstQty.EOF, =, False)</string>
        <string>                                       v.Local.fcountGSS.Set(v.ODBC.con!rstQty.FieldValFloat!Quantity)</string>
        <string>                       F.Intrinsic.Control.EndIf</string>
        <string>                       F.ODBC.con!rstQty.Close</string>
        <string>                       F.Intrinsic.String.Format(v.Local.fcountGSS, "0.####", v.Local.fcountGSS)</string>
        <string>                       F.Intrinsic.Control.If(v.Local.fcountGSS, =, 0)</string>
        <string>                                       v.Local.fcountGSS.Set(v.Local.fcount)</string>
        <string>                       Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>                                                                                'close the connection update the datatable</string>
        <string>                                                                               F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.sret.Trim,"GSS_COUNT",v.Local.fcountgss,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"GSS_EXTRA_DESC","Already in GSS","Color","P","GSS_SEQUENCE",v.Local.ssequence)</string>
        <string>                                                                                v.Local.spart.Set(v.Local.sret.Trim)                          </string>
        <string>                                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                f.Intrinsic.Control.else</string>
        <string />
        <string>                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.sret.trim)              </string>
        <string>                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.ssupplierpart.trim)</string>
        <string>                                                                'close the connection update the datatable</string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.i,"GSS_PART_NUMBER",V.Local.sret.trim)         </string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.i,"GSS_EXTRA_DESC",V.Local.ssupplierpart.trim)</string>
        <string />
        <string>                                                                v.Local.spart.Set(v.Local.sret.Trim)          </string>
        <string>                                                f.Intrinsic.Control.EndIf</string>
        <string>                                f.Intrinsic.Control.EndIf  </string>
        <string />
        <string />
        <string>                'if assembly part type     </string>
        <string>                f.Intrinsic.Control.ElseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"MODIFIED")  </string>
        <string>					f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).ALREADYMADE.fieldvaltrim,&lt;&gt;,"MADE")  </string>
        <string>   				  'query to see if that part is listed as an extra desc </string>
        <string>                   f.Intrinsic.String.Build("Select PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.datatable.IMPORT(v.Local.i).GSS_PART_NUMBER.fieldvaltrim,v.Local.stextsql)</string>
        <string>                   f.ODBC.Connection!con.Executeandreturn(v.Local.stextsql,v.Local.sRet)</string>
        <string>					f.Intrinsic.String.Build("Select UM_INVENTORY from V_INVENTORY_MSTR where PART LIKE '{0}%'",v.datatable.IMPORT(v.Local.i).GSS_PART_NUMBER.fieldvaltrim,v.Local.sfillersql)</string>
        <string>					f.ODBC.Connection!con.Executeandreturn(v.Local.sfillersql,v.Local.sremovedUM)</string>
        <string>                   f.Intrinsic.Control.If(v.Local.sRet.Trim,&lt;&gt;,"")</string>
        <string>	                  'check to see if that BOM already exists if so populate the second grid</string>
        <string>	                     f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.sret.Trim,v.Local.ssql)</string>
        <string>	                     F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>	                     F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,False)</string>
        <string>	                        'build the file to explode</string>
        <string>	                        F.Intrinsic.String.Build("{0}\BOM{1}",V.System.Temp,V.Caller.Terminal,V.Local.sFilePath)</string>
        <string>	                        F.Intrinsic.String.Build("0{0}{1}{0}{2}",V.Ambient.Tab,V.odbc.con!rst.FieldValTrim!PART,v.Local.sFilePath,V.Local.sParams)</string>
        <string>	                        F.Intrinsic.File.String2File(V.Local.sFilePath,V.Local.sParams)</string>
        <string>	                        F.Global.General.CallWrapperSync(410000,V.Local.sFilePath)</string>
        <string>	                        F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>	                        'check if the file exists</string>
        <string>	                        F.Intrinsic.Control.If(V.Local.bExists,=,True)</string>
        <string>	                            F.Intrinsic.File.FiletoStringArray(V.Local.sFilePath,V.Ambient.Tab,V.Local.sretaddbom)</string>
        <string>	                            V.Local.sretaddbom.RedimPreserve(0,3)</string>
        <string>	                            F.Intrinsic.File.GetFileNameFromFQN(V.Local.sRetaddbom(3),V.Local.sFile.Trim)</string>
        <string>	                            F.Intrinsic.String.Split(V.Local.sFile," ",V.Local.sFile)</string>
        <string>	                            F.Intrinsic.String.Build("{0}\{1}",V.System.Temp,V.Local.sFile(0).Trim,V.Local.sFilePath)</string>
        <string>	                            F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>	                            'check if the file exists</string>
        <string>	                            F.Intrinsic.Control.If(V.Local.bExists,=,true)                         </string>
        <string>	                               'load it to a string</string>
        <string>	                               F.Intrinsic.File.File2String(V.Local.sFilePath,V.Local.sretaddbom)</string>
        <string>	                               f.Intrinsic.String.Replace(v.Local.sretaddbom,"*","",v.Local.sretaddbom)</string>
        <string>			  						'query to see if that part is listed as an extra desc </string>
        <string>                 				  f.Intrinsic.String.Build("Select PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.Local.ssupplierpart,v.Local.stextsql)</string>
        <string>	     						  f.ODBC.Connection!con.Executeandreturn(v.Local.stextsql,v.Local.sfiller)</string>
        <string />
        <string>	                               'split the return</string>
        <string>	                               f.Intrinsic.String.Split(v.Local.sretaddbom.Trim,v.Ambient.NewLine,v.Local.sretaddbom)</string>
        <string>	           					     f.Intrinsic.Control.For(v.Local.ifiller,7,8,1)</string>
        <string>	                     			   'split the line</string>
        <string>                            		    f.Intrinsic.String.Split(v.Local.sretaddbom(v.Local.ifiller),"|~|",v.Local.smodline)</string>
        <string>										f.Intrinsic.Control.If(v.Local.smodline(4).trim,=,"Nor")</string>
        <string>											v.Local.smodline(4).Set("NORMAL")</string>
        <string>										f.Intrinsic.Control.EndIf</string>
        <string>										f.Intrinsic.String.GSSPartString(v.Local.ssupplierpart,v.Local.srev,v.Local.ssupplierpart2)</string>
        <string>										f.Intrinsic.Control.If(v.Local.ifiller,&gt;,7)</string>
        <string>											F.Intrinsic.String.Format(v.Local.smodline(6), "0", v.Local.smodline(6))</string>
        <string>											F.Data.DataTable.AddRow("TEMPLATE","GSS_UOM","EA","GSS_CATEGORY",v.Local.smodline(4),"GSS_SOURCE_CODE",v.Local.smodline(5),"GSS_PART_NUMBER",V.Local.smodline(2),"GSS_COUNT",v.Local.smodline(6),"GSS_PARENT",V.Local.sparentpart,"GSS_LEVEL","2","GSS_DESCRIPTION",v.Local.smodline(3),"GSS_REVISION",v.Local.srev,"GSS_PART_TYPE","Modified","ALREADYMADE","MADE","Color","P","GSS_EXTRA_DESC","Already in GSS")</string>
        <string>	                    					F.Data.DataTable.AddRow("IMPORT","GSS_UOM","EA","GSS_CATEGORY",v.Local.scategory,"GSS_SOURCE_CODE",v.Local.smodline(5),"GSS_PART_NUMBER",V.Local.sfiller,"GSS_COUNT",v.Local.smodline(6),"GSS_PARENT",V.Local.sparentpart,"GSS_LEVEL","2","GSS_DESCRIPTION",v.Local.smodline(3),"GSS_REVISION",v.Local.srev,"ALREADYMADE","MADE","GSS_PART_TYPE","Modified","Color","P","GSS_EXTRA_DESC",v.Local.ssupplierpart)</string>
        <string>	                               		     F.Data.DataTable.AddRow("UPLOAD","PARENT",V.Local.sret.Trim,"SEQUENCE",v.Local.ssequence,"PART",v.Local.smodline(2),"UM",v.Local.sum,"DESC",v.Local.smodline(3),"REV",v.Local.srev.Trim,"CATEGORY",v.Local.smodline(4),"SOURCE",v.Local.smodline(5),"COUNT",v.Local.smodline(6))</string>
        <string>										f.Intrinsic.Control.Else</string>
        <string>'											f.Intrinsic.String.Format(v.Local.smodline(6),</string>
        <string>											F.Intrinsic.String.Format(v.Local.smodline(6), "0", v.Local.smodline(6))</string>
        <string>											F.Data.DataTable.AddRow("TEMPLATE","ALREADYMADE","MADE","GSS_UOM",v.Local.sRemovedum,"GSS_CATEGORY",v.Local.smodline(4),"GSS_SOURCE_CODE",v.Local.smodline(5),"GSS_PART_NUMBER",V.Local.smodline(2),"GSS_COUNT",v.Local.smodline(6),"GSS_PARENT",V.Local.sparentpart,"GSS_LEVEL","1","GSS_DESCRIPTION",v.Local.smodline(3),"GSS_REVISION",v.Local.srev,"GSS_PART_TYPE","Modified","Color","P","GSS_EXTRA_DESC","Already in GSS")</string>
        <string>											 F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.spart)</string>
        <string>											f.Intrinsic.String.GSSPartString(v.Local.spart,v.Local.srev,v.Local.spart)</string>
        <string>	                                    	F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",v.Local.spart)              </string>
        <string>                                       	      F.Data.DataTable.SetValue("IMPORT",v.Local.i,"ALREADYMADE","MADE")</string>
        <string>	                               		     F.Data.DataTable.AddRow("UPLOAD","PARENT",V.Local.sparentpart.Trim,"SEQUENCE",v.Local.ssequence,"PART",v.Local.smodline(2),"UM",v.Local.sum,"DESC",v.Local.smodline(3),"REV",v.Local.srev.Trim,"CATEGORY",v.Local.smodline(4),"SOURCE",v.Local.smodline(5),"COUNT",v.Local.smodline(6))</string>
        <string>		                               		 F.Data.DataTable.AddRow("UPLOAD","PARENT",V.Local.sret.Trim,"SEQUENCE","0000","PART",v.Local.smodline(2),"UM",v.Local.sum,"DESC",v.Local.smodline(3),"REV",v.Local.srev.Trim,"CATEGORY",v.Local.smodline(4),"SOURCE",v.Local.smodline(5),"COUNT",v.Local.smodline(6))</string>
        <string>										f.Intrinsic.Control.EndIf</string>
        <string />
        <string>										  'update count with the count from the Bom Master</string>
        <string>							               F.Intrinsic.String.Build("{0}00", v.DataTable.Import(v.Local.i).GSS_Sequence!FieldValtrim, v.Local.sBomSeq)</string>
        <string>							               F.Intrinsic.String.Right(v.Local.sBomSeq, 4, v.Local.sBomSeq)</string>
        <string>							               F.Intrinsic.String.GSSPartString(v.Local.sparentpart.Trim, v.Local.srev.Trim, v.Local.sparentpartCombo)</string>
        <string>							               F.Intrinsic.String.Build("Select Quantity from Bom_Mstr where Part = '{0}' and Parent = '{1}' and Sequence_Bom = '{2}'", v.Local.sRet.Trim, v.Local.sparentpartCombo.Trim, v.Local.sBomSeq,v.Local.ssql)</string>
        <string>							               F.ODBC.Connection!con.OpenLocalRecordsetRO("rstQty", v.Local.ssql)</string>
        <string>							               F.Intrinsic.Control.If(v.ODBC.con!rstQty.EOF, =, False)</string>
        <string>							                               v.Local.fcountGSS.Set(v.ODBC.con!rstQty.FieldValFloat!Quantity)</string>
        <string>							               F.Intrinsic.Control.EndIf</string>
        <string>							               F.ODBC.con!rstQty.Close</string>
        <string>							               F.Intrinsic.String.Format(v.Local.fcountGSS, "0.####", v.Local.fcountGSS)</string>
        <string>							               F.Intrinsic.Control.If(v.Local.fcountGSS, =, 0)</string>
        <string>							                               v.Local.fcountGSS.Set(v.Local.fcount)</string>
        <string>							               Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>								          F.Data.DataTable.SetValue("TEMPLATE",v.Local.i,"GSS_COUNT",V.Local.fcountgss)</string>
        <string />
        <string />
        <string />
        <string>									f.Intrinsic.Control.Next(v.Local.ifiller)</string>
        <string />
        <string />
        <string>	                            F.Intrinsic.Control.EndIf</string>
        <string>	                            'delete the file</string>
        <string>	                            f.Intrinsic.File.DeleteFile(v.Local.sFilePath)</string>
        <string>	                        F.Intrinsic.Control.EndIf</string>
        <string>	                        f.ODBC.con!rst.Close</string>
        <string>	                    f.Intrinsic.Control.Endif</string>
        <string>						'check the sretAddbom field and set the values</string>
        <string />
        <string />
        <string />
        <string>					f.Intrinsic.Control.Else</string>
        <string />
        <string />
        <string>                    f.Intrinsic.Control.Endif</string>
        <string />
        <string>                 f.Intrinsic.Control.EndIf            </string>
        <string>                'if assembly part type     </string>
        <string>                f.Intrinsic.Control.ElseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"ASSEMBLY")</string>
        <string />
        <string />
        <string />
        <string>                                v.Global.iassembly.Set(v.Local.i)</string>
        <string>                                'call the assembly sub</string>
        <string>                                f.Intrinsic.Control.CallSub(assembly)</string>
        <string>                'if party type is BOM Defined</string>
        <string>                f.Intrinsic.Control.ElseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"BOM DEFINED")</string>
        <string />
        <string>                'check to see if that BOM already exists if so populate the second grid</string>
        <string>                                f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.sbomdesignation.Trim,v.Local.ssql)</string>
        <string>                                F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>                                F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,&lt;&gt;,True)</string>
        <string>                                                F.Data.DataTable.SetValue("TEMPLATE",V.Local.itemplate,"GSS_EXTRA_DESC",v.local.sbomdesignation.trim)</string>
        <string>                                                v.Local.spart.set(v.Local.sbomdesignation.Trim)</string>
        <string>                                                f.ODBC.con!rst.Close</string>
        <string>                                f.Intrinsic.Control.Else</string>
        <string>                                                f.ODBC.con!rst.Close</string>
        <string>                                                'set rev as 0</string>
        <string>                                                v.Local.srev.Set("  0")</string>
        <string>                                                v.Local.sloc.Set("")</string>
        <string>                                                'set the UM</string>
        <string>                                                v.Local.sum.Set(v.DataTable.import(v.Local.i).GSS_LENGTH.fieldvaltrim)</string>
        <string>                                                f.Intrinsic.String.Right(v.Local.sum,2,v.Local.sremovedUM)</string>
        <string>                                                f.Intrinsic.String.Replace(v.Local.sum,v.Local.sremovedUM,"",v.Local.scount)</string>
        <string>                                                v.Local.sum.Set(v.Local.sremovedUM)</string>
        <string>                                                f.Intrinsic.String.IsInString(v.Local.scount,"/","True",v.Local.bslash)</string>
        <string>                                                f.Intrinsic.Control.iF(v.Local.bslash,=,True)                                                          </string>
        <string>                                                                f.Intrinsic.string.Split(v.Local.scount,"/",v.Local.scount)</string>
        <string>                                                                f.Intrinsic.String.Right(v.Local.scount(0),2,v.Local.fnumerator)</string>
        <string>                                                                f.Intrinsic.String.left(v.Local.scount(0),2,v.Local.fleadingnumber)</string>
        <string>                                                                v.Local.fdenominator.Set(v.Local.scount(1))</string>
        <string>                                                                f.Intrinsic.Math.div(v.Local.fnumerator,v.Local.fdenominator,v.Local.fcount)</string>
        <string>                                                                f.Intrinsic.Math.add(v.Local.fcount,v.Local.fleadingnumber,v.Local.fcount)</string>
        <string>                                                f.Intrinsic.Control.Else</string>
        <string>                                                                f.Intrinsic.Math.Mult(v.Local.fcount,v.Local.scount,v.Local.fcount)</string>
        <string>                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                'format the count for the upload and pad any numbers 4 characters to the right of the decimal</string>
        <string>                                                f.Intrinsic.String.IsInString(v.Local.fcount,".",True,v.Local.baddzeros)</string>
        <string>                                                f.Intrinsic.Control.If(v.Local.baddzeros,=,False)</string>
        <string>'                                                               f.Intrinsic.String.Build("{0}.{1}",v.Local.fcount,"0000",v.Local.fcount)</string>
        <string>                                                f.Intrinsic.Control.else</string>
        <string>                                                                f.Intrinsic.String.Split(v.Local.fcount,".",v.Local.fcount)</string>
        <string>                                                                f.Intrinsic.String.RPad(v.Local.fcount(1),"0",4,v.Local.fcount(1))</string>
        <string>                                                                f.Intrinsic.String.Build("{0}.{1}",v.Local.fcount(0),v.Local.fcount(1),v.Local.fcount)                                                </string>
        <string>                                                f.Intrinsic.Control.EndIf</string>
        <string>                                f.Intrinsic.Control.EndIf</string>
        <string>'                                f.Intrinsic.Math.Mult(v.Local.fcount,v.DataTable.IMPORT(v.Local.i).GSS_COUNT.fieldvaltrim,v.Local.fcount)</string>
        <string>'                               F.Data.DataTable.SetValue("TEMPLATE",V.Local.itemplate,"GSS_COUNT",v.local.fcount.trim)</string>
        <string>                                'check to see if the part has already been made</string>
        <string>                                f.Intrinsic.Control.If(v.datatable.TEMPLATE(v.Local.itemplate).ALREADYMADE.fieldvaltrim,&lt;&gt;,"MADE")</string>
        <string>                                                'query to see if that part is listed as an extra desc </string>
        <string>                                                f.Intrinsic.String.Build("Select top 1 PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.Local.sbomdesignation.Trim,v.Local.stextsql)</string>
        <string>                                                f.ODBC.Connection!con.ExecuteAndReturn(v.Local.stextsql,v.Local.sRet)</string>
        <string>                                                f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")</string>
        <string>                                                                'query to see if that part is in inventory</string>
        <string>                                                                f.Intrinsic.String.Build("Select PART from V_INVENTORY_MSTR where PART = '{0}'",v.Local.sbomdesignation.Trim,v.Local.ssql)</string>
        <string>                                                                F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>                                                                F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)</string>
        <string>                                                                                'set the local boolean as false</string>
        <string>                                                                                v.Local.ballowupload.Set(False)                                                </string>
        <string>                                                                                'get the last filler for auto generated parts and add 1 to it plus the prefix</string>
        <string>                                                                                f.Intrinsic.String.Build("Select F_LONG FROM OP_HEADER where ID = '{0}' and SEQUENCE = '{1}'","400460","0002",v.Local.sfillersql)</string>
        <string>                                                                                F.ODBC.Connection!con.OpenLocalRecordsetRW("rst1",V.Local.sfillersql)</string>
        <string>                                                                                F.Intrinsic.Control.If(V.ODBC.con!rst1.EOF,=,False)</string>
        <string>                                                                                                v.Local.ifiller.Set(v.ODBC.con!rst1.FieldValTrim!F_LONG)</string>
        <string>                                                                                                f.Intrinsic.Math.Add(v.Local.ifiller,1,v.Local.sfiller)</string>
        <string>                                                                                                f.ODBC.con!rst1.Set!F_LONG(v.Local.sfiller)</string>
        <string>                                                                                                f.ODBC.con!rst1.Update</string>
        <string>                                                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                                                f.ODBC.con!rst1.Close</string>
        <string>                                                                                'add the prefix</string>
        <string>                                                                                f.Intrinsic.String.Build("{0}{1}",v.Global.sprefix.Trim,v.Local.sfiller,v.Local.spart)</string>
        <string>                                                                                f.Intrinsic.String.GSSPartString(v.Local.spart.Trim,v.Local.srev.Trim,v.Local.spart)</string>
        <string>                                                                                f.Intrinsic.Control.If(v.Local.itemplate,&gt;,0)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)           </string>
        <string>                                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.sbomdesignation.trim)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_COUNT",V.Local.fcount.trim)         </string>
        <string>                                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_UOM",V.Local.sremovedUM.trim)              </string>
        <string>                                                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"COLOR","Y")</string>
        <string>                                                                    							 F.Data.DataTable.SetValue("IMPORT",v.Local.i,"ALREADYMADE","MADE")</string>
        <string>                                                                                                F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.spart.Trim,"GSS_COUNT",v.Local.fcount,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sremovedUM.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"Color","Y","GSS_SEQUENCE",v.Local.ssequence)</string>
        <string>                                                                                f.Intrinsic.Control.Else</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_PART_NUMBER",V.Local.spart.trim)    </string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_EXTRA_DESC",V.Local.sbomdesignation.trim)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_UOM",V.Local.sremovedum.trim)        </string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_COUNT",v.Local.fcount)                            </string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_LEVEL",v.Local.slevel)                 </string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_DESCRIPTION",v.Local.sdesc)                  </string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_REVISION",v.Local.srev)            </string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim)                                </string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_SOURCE_CODE",v.Local.ssource)          </string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_SEQUENCE",v.Local.ssource)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"Color","Y") </string>
        <string>                                                                                f.Intrinsic.Control.endif</string>
        <string>                                                                                v.Local.itemplate.Set(v.dataTable.TEMPLATE.RowCount--)</string>
        <string>                                                                                f.Intrinsic.String.Build("GSS_DESCRIPTION = '{0}'",v.DataTable.TEMPLATE(v.Local.itemplate).GSS_DESCRIPTION.fieldvaltrim,v.Local.sexp)</string>
        <string>                                                                                'make sure there are no new custom parts being created for the same extra desc</string>
        <string>                                                                                f.Data.DataTable.Select("TEMPLATE",v.Local.sexp.trim,v.Local.sret)</string>
        <string>                                                                '               'split the ret</string>
        <string>                                                                                f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)</string>
        <string>                                                                                f.Intrinsic.Control.If(v.Local.sret.UBound,&gt;,0)</string>
        <string>                                                                '                               'loop through the return to get the ordinals and set the parts</string>
        <string>                                                                                                f.Intrinsic.Control.For(v.Local.iloop,0,v.Local.sret.UBound,1)</string>
        <string>                                                                '                                               'if its the first loop around set the part</string>
        <string>                                                                                                                f.Intrinsic.Control.If(v.Local.iloop,=,0)</string>
        <string>                                                                                                                                v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>                                                                                                                                v.Local.sfirstpart.Set(v.datatable.TEMPLATE(v.Local.iret).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>                                                                                                                                v.Local.syeller.Set(v.datatable.TEMPLATE(v.Local.iret).Color.fieldvaltrim)</string>
        <string>                                                                                                                                f.Data.DataTable.SetValue("TEMPLATE",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>                                                                                                                f.Intrinsic.Control.Else</string>
        <string>                                                                                                                                v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>                                                                                                                                f.Data.DataTable.SetValue("TEMPLATE",v.Local.iret,"GSS_PART_NUMBER",v.local.sfirstpart)</string>
        <string>                                                                                                                                f.Data.DataTable.SetValue("TEMPLATE",v.Local.iret,"Color",v.Local.syeller)</string>
        <string>                                                                                                                                f.Data.DataTable.SetValue("TEMPLATE",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>                                                                                                                                F.Data.DataTable.SetValue("TEMPLATE",V.Local.iret,"GSS_EXTRA_DESC",v.Local.sbomdesignation.Trim)</string>
        <string>                                                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.Local.iret,"GSS_UOM",V.Local.sremovedUM.trim)    </string>
        <string>                                                                                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                                                                f.Intrinsic.Control.Next(v.local.iloop)</string>
        <string>                                                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                                                'add the part to the batch            </string>
        <string>                                                                                f.Global.Inventory.AddPartToBatch(v.Local.spart.Trim,"EA",v.Local.sdesc.Trim,"","22","F","","","0","NOMAINT")                </string>
        <string>                                                f.Intrinsic.Control.Else</string>
        <string>                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.sret.trim)              </string>
        <string>                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.sbomdesignation.trim)</string>
        <string>                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_COUNT",V.Local.fcount.trim)                </string>
        <string>                                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_UOM",V.Local.sremovedUM.trim)              </string>
        <string>                                                                'close the connection update the datatable</string>
        <string>                                                                F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.sret.Trim,"GSS_COUNT",v.Local.fcount,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sremovedUM.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"GSS_EXTRA_DESC","Already in GSS","Color","P","GSS_SEQUENCE",v.Local.ssequence)</string>
        <string>                                                                v.Local.spart.Set(v.Local.sret.Trim)                          </string>
        <string>                                                f.Intrinsic.Control.endif </string>
        <string>                                                f.ODBC.con!rst.Close</string>
        <string>                                f.Intrinsic.Control.Else</string>
        <string>                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.sret.trim)                </string>
        <string>                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.sbomdesignation.trim)</string>
        <string>                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_COUNT",V.Local.fcount)   </string>
        <string>                                                F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_UOM",V.Local.sremovedUM.trim)  </string>
        <string />
        <string>               'update count with the count from the Bom Master</string>
        <string>               F.Intrinsic.String.Build("{0}00", v.DataTable.Import(v.Local.i).GSS_Sequence!FieldValtrim, v.Local.sBomSeq)</string>
        <string>               F.Intrinsic.String.Right(v.Local.sBomSeq, 4, v.Local.sBomSeq)</string>
        <string>               F.Intrinsic.String.GSSPartString(v.Local.sparentpart.Trim, v.Local.srev.Trim, v.Local.sparentpartCombo)</string>
        <string>               F.Intrinsic.String.Build("Select Quantity from Bom_Mstr where Part = '{0}' and Parent = '{1}' and Sequence_Bom = '{2}'", v.Local.sRet.Trim, v.Local.sparentpartCombo.Trim, v.Local.sBomSeq,v.Local.ssql)</string>
        <string>               F.ODBC.Connection!con.OpenLocalRecordsetRO("rstQty", v.Local.ssql)</string>
        <string>               F.Intrinsic.Control.If(v.ODBC.con!rstQty.EOF, =, False)</string>
        <string>                               v.Local.fcountGSS.Set(v.ODBC.con!rstQty.FieldValFloat!Quantity)</string>
        <string>               F.Intrinsic.Control.EndIf</string>
        <string>               F.ODBC.con!rstQty.Close</string>
        <string>               F.Intrinsic.String.Format(v.Local.fcountGSS, "0.####", v.Local.fcountGSS)</string>
        <string>               F.Intrinsic.Control.If(v.Local.fcountGSS, =, 0)</string>
        <string>                               v.Local.fcountGSS.Set(v.Local.fcount)</string>
        <string>	               Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>                                                'close the connection update the datatable</string>
        <string>                                                F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.sret.Trim,"GSS_COUNT",v.Local.fcountgss,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sremovedUM.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"GSS_EXTRA_DESC","Already in GSS","Color","P","GSS_SEQUENCE",v.Local.ssequence)</string>
        <string>                                                v.Local.spart.Set(v.Local.sret.Trim)                                          </string>
        <string>                                f.Intrinsic.Control.endif </string>
        <string>'                                               F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.spart.Trim,"GSS_COUNT",v.Local.fcount,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"Color","P","GSS_SEQUENCE",v.Local.ssequence)</string>
        <string>                                f.Intrinsic.Control.endif </string>
        <string>                f.Intrinsic.Control.ElseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"HARDWARE")</string>
        <string />
        <string>                                'set rev as 0 and location as blank</string>
        <string>                                v.Local.srev.Set("  0")</string>
        <string>                                v.Local.sloc.Set("")</string>
        <string />
        <string>                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.local.sballooncallout)</string>
        <string>                                f.Intrinsic.Control.If(v.datatable.TEMPLATE(v.Local.i).ALREADYMADE.fieldvaltrim,&lt;&gt;,"MADE")</string>
        <string />
        <string>						f.Intrinsic.String.Build("Select top 1 PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.Local.sballooncallout.Trim,v.Local.stextsql)</string>
        <string>						f.ODBC.Connection!con.ExecuteAndReturn(V.Local.STEXTSQL,V.Local.sRet)</string>
        <string />
        <string>'                                                f.Intrinsic.String.Build("Select PART from INV_EXTRA_TEXT where TEXT LIKE '%{0}'",v.datatable.IMPORT(v.Local.i).GSS_BALLOON_CALLOUT.fieldvaltrim,v.Local.stextsql)</string>
        <string>'                                                f.ODBC.Connection!con.ExecuteAndReturn(v.Local.stextsql,v.Local.sret)</string>
        <string>                                                f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")                         </string>
        <string>                                ''                              'check to see if that part already exists in inventory</string>
        <string>                                                                f.Intrinsic.String.Build("Select PART from V_INVENTORY_MSTR where PART LIKE '{0}%'",v.Local.sballooncallout.Trim,v.Local.ssql)</string>
        <string>                                                                F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)</string>
        <string>                                                                F.Intrinsic.Control.If(V.Local.sRet.Trim,&lt;&gt;,"")</string>
        <string>                                                                                'if the part exists set the info with supplier part</string>
        <string>                                                                                f.Intrinsic.Control.If(v.Local.i,&gt;,0)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.sballooncallout)</string>
        <string>                                                                                                F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.sballooncallout.Trim,"GSS_COUNT",v.Local.fcount,"GSS_SEQUENCE",v.Local.ssequence,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"GSS_EXTRA_DESC","Already in GSS","Color","P")</string>
        <string>                                                                                f.Intrinsic.Control.Else</string>
        <string>                                                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.sballooncallout)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_PART_NUMBER",V.Local.sballooncallout)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_COUNT",V.Local.fcount)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_LEVEL",V.Local.slevel)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_DESCRIPTION",V.Local.sdesc)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_REVISION",V.Local.srev)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_UOM",V.Local.sum)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_SOURCE_CODE",V.Local.ssource)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_EXTRA_DESC","Already in GSS")</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_PARENT",V.Local.sparentpart)                   </string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_SEQUENCE",v.local.ssequence)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"Color","P")     </string>
        <string>                                                                                f.Intrinsic.Control.EndIf                 </string>
        <string>                                                                f.Intrinsic.Control.Else</string>
        <string>'                                                                               F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_DESCRIPTION",V.Local.sdesc)</string>
        <string />
        <string>                                                                                'before we add to the batch make sure the part isn't already listed</string>
        <string>                                                                                f.Intrinsic.String.Build("GSS_DESCRIPTION = '{0}'",v.DataTable.IMPORT(v.Local.i).GSS_DESCRIPTION.fieldvaltrim,v.Local.sexp)</string>
        <string>                                                                                'make sure there are no new custom parts being created for the same extra desc</string>
        <string>                                                                                f.Data.DataTable.Select("TEMPLATE",v.Local.sexp.trim,v.Local.sret)</string>
        <string>                                                                '               'split the ret</string>
        <string>                                                                                f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)</string>
        <string>                                                                                f.Intrinsic.Control.If(v.Local.sret.UBound,&gt;,0)</string>
        <string>                                                                '                               'loop through the return to get the ordinals and set the parts</string>
        <string>                                                                                                f.Intrinsic.Control.For(v.Local.iloop,0,v.Local.sret.UBound,1)</string>
        <string>                                                                '                                               'if its the first loop around set the part</string>
        <string>                                                                                                                f.Intrinsic.Control.If(v.Local.iloop,=,0)</string>
        <string>                                                                                                                                v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>                                                                                                                                v.Local.sfirstpart.Set(v.datatable.Template(v.Local.iret).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>                                                                                                                                v.Local.syeller.Set(v.datatable.Template(v.Local.iret).Color.fieldvaltrim)</string>
        <string>                                                                                                                                f.Data.DataTable.SetValue("TEMPLATE",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>                                                                                                                f.Intrinsic.Control.Else</string>
        <string>                                                                                                                                v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>                                                                                                                                f.Data.DataTable.SetValue("Template",v.Local.iret,"GSS_PART_NUMBER",v.local.sfirstpart)</string>
        <string>                                                                                                                                f.Data.DataTable.SetValue("Template",v.Local.iret,"Color",v.Local.syeller)</string>
        <string>                                                                                                                                f.Data.DataTable.SetValue("Template",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string />
        <string />
        <string>                                                                                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                                                                f.Intrinsic.Control.Next(v.local.iloop)</string>
        <string>                                                                                f.Intrinsic.Control.EndIf</string>
        <string />
        <string>                                                                                'get the last filler for auto generated parts and add 1 to it plus the prefix</string>
        <string>                                                                                f.Intrinsic.String.Build("Select F_LONG FROM OP_HEADER where ID = '{0}' and SEQUENCE = '{1}'","400460","0002",v.Local.sfillersql)</string>
        <string>                                                                                F.ODBC.Connection!con.OpenLocalRecordsetRW("rst1",V.Local.sfillersql)</string>
        <string>                                                                                F.Intrinsic.Control.If(V.ODBC.con!rst1.EOF,=,False)</string>
        <string>                                                                                                v.Local.ifiller.Set(v.ODBC.con!rst1.FieldValTrim!F_LONG)</string>
        <string>                                                                                                f.Intrinsic.Math.Add(v.Local.ifiller,1,v.Local.sfiller)</string>
        <string>                                                                                                f.ODBC.con!rst1.Set!F_LONG(v.Local.sfiller)</string>
        <string>                                                                                                f.ODBC.con!rst1.Update</string>
        <string>                                                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                                                f.ODBC.con!rst1.Close</string>
        <string>                                                                                'add the prefix</string>
        <string>                                                                                f.Intrinsic.String.Build("{0}{1}",v.Global.sprefix.Trim,v.Local.sfiller,v.Local.spart)</string>
        <string>                                                                                f.Intrinsic.String.GSSPartString(v.Local.spart.Trim,v.Local.srev.Trim,v.Local.spart)</string>
        <string />
        <string>                                                                                'add the part to the batch            </string>
        <string>                                                                                v.Local.iret.Set(v.dataTable.TEMPLATE.RowCount--)</string>
        <string>                                                                                f.Global.Inventory.AddPartToBatch(v.Local.spart.Trim,"EA",v.Local.sdesc.Trim,"","06",v.Local.ssource.Trim,"","","0","NOMAINT")                                                </string>
        <string>                                                                                f.Intrinsic.Control.If(v.Local.i,&gt;,0)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.spart)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.Local.sballooncallout)</string>
        <string>                                                                                                F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.spart.Trim,"GSS_COUNT",v.Local.fcount,"GSS_SEQUENCE",v.Local.ssequence,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"GSS_EXTRA_DESC",v.Local.sextradesc.Trim,"Color","Y")</string>
        <string>                                                                                f.Intrinsic.Control.Else</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_PART_NUMBER",V.Local.spart)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_COUNT",V.Local.fcount)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_LEVEL",V.Local.slevel)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_DESCRIPTION",V.Local.sdesc)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_REVISION",V.Local.srev)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_UOM",V.Local.sum)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_SOURCE_CODE",V.Local.ssource)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_EXTRA_DESC",v.Local.sRet(0))</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_PARENT",V.Local.sparentpart)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_SEQUENCE",V.Local.ssequence)                                                </string>
        <string>                                                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"Color","Y")     </string>
        <string>                                                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"Color","Y")        </string>
        <string>   																								F.Data.DataTable.SetValue("Import",V.Local.i,"ALREADYMADE","MADE")        </string>
        <string />
        <string>                                                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.spart)</string>
        <string>                                                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.Local.sballooncallout)                          </string>
        <string>                                                                                f.Intrinsic.Control.EndIf</string>
        <string>                                                f.Intrinsic.Control.Else</string>
        <string>                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.sRet.Trim)</string>
        <string>                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.Local.sballooncallout)                          </string>
        <string>                                                                F.Data.DataTable.SetValue("TEmplate",V.Local.i,"GSS_EXTRA_DESC","Already in GSS")</string>
        <string>                                                                F.Data.DataTable.SetValue("Template",V.Local.i,"GSS_PART_NUMBER",v.local.sret.trim)</string>
        <string>                                                                F.Data.DataTable.SetValue("Template",V.Local.i,"ALREADYMADE","MADE")                       </string>
        <string>                                                                F.Data.DataTable.SetValue("Template",V.Local.i,"Color","P")</string>
        <string />
        <string>                                                f.Intrinsic.Control.EndIf</string>
        <string>                                'If it is already made        </string>
        <string>                                f.Intrinsic.Control.Else</string>
        <string>                                                'if the part exists set the info with supplier part</string>
        <string>                                                f.Intrinsic.Control.If(v.Local.i,&gt;,0)</string>
        <string>                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.Local.sballooncallout)</string>
        <string>                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.sret.trim)</string>
        <string>                          							            F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.sRET.Trim,"GSS_COUNT",v.Local.fcount,"GSS_SEQUENCE",v.Local.ssequence,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"GSS_EXTRA_DESC","Already in GSS","ALREADYMADE","MADE","Color","P")</string>
        <string />
        <string>                   'update count with the count from the Bom Master</string>
        <string>                   F.Intrinsic.String.Build("{0}00", v.DataTable.Import(v.Local.i).GSS_Sequence!FieldValtrim, v.Local.sBomSeq)</string>
        <string>                   F.Intrinsic.String.Right(v.Local.sBomSeq, 4, v.Local.sBomSeq)</string>
        <string>                   F.Intrinsic.String.GSSPartString(v.Local.sparentpart.Trim, v.Local.srev.Trim, v.Local.sparentpartCombo)</string>
        <string>                   F.Intrinsic.String.Build("Select Quantity from Bom_Mstr where Part = '{0}' and Parent = '{1}' and Sequence_Bom = '{2}'", v.Local.sRet.Trim, v.Local.sparentpartCombo.Trim, v.Local.sBomSeq,v.Local.ssql)</string>
        <string>                   F.ODBC.Connection!con.OpenLocalRecordsetRO("rstQty", v.Local.ssql)</string>
        <string>                   F.Intrinsic.Control.If(v.ODBC.con!rstQty.EOF, =, False)</string>
        <string>                                   v.Local.fcountGSS.Set(v.ODBC.con!rstQty.FieldValFloat!Quantity)</string>
        <string>                   F.Intrinsic.Control.EndIf</string>
        <string>                   F.ODBC.con!rstQty.Close</string>
        <string>                   F.Intrinsic.String.Format(v.Local.fcountGSS, "0.####", v.Local.fcountGSS)</string>
        <string>                   F.Intrinsic.Control.If(v.Local.fcountGSS, =, 0)</string>
        <string>                                   v.Local.fcountGSS.Set(v.Local.fcount)</string>
        <string>                   Function.Intrinsic.Control.EndIf</string>
        <string>'                                                                F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.sret(0).Trim,"GSS_COUNT",v.Local.fcountgss,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"ALREADYMADE","MADE","GSS_EXTRA_DESC","Already in GSS","Color","P")</string>
        <string>                                                f.Intrinsic.Control.Else</string>
        <string>'                                                               V.Local.sRet.RedimPreserve(0, 1)</string>
        <string>                                                                F.Intrinsic.String.Left(v.Local.sRet(0), 17, v.Local.sTrimmedPart)</string>
        <string>                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.Local.sret)</string>
        <string>                                                                F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.sret.trim)</string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_PART_NUMBER",V.Local.sRet.trim)</string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_COUNT",V.Local.fcount)</string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_LEVEL",V.Local.slevel)</string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_DESCRIPTION",V.Local.sdesc)</string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_REVISION",V.Local.srev)</string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_UOM",V.Local.sum)</string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_SOURCE_CODE",V.Local.ssource)</string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"GSS_EXTRA_DESC","Already in GSS")</string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"Color","P")     </string>
        <string>                                                                F.Data.DataTable.SetValue("TEMPLATE",v.local.i,"ALREADYMADE","MADE")      </string>
        <string>                                                f.Intrinsic.Control.EndIf                 </string>
        <string>                                f.Intrinsic.Control.EndIf</string>
        <string>                f.Intrinsic.Control.EndIf</string>
        <string>                f.Intrinsic.Control.EndIf</string>
        <string>				f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,&lt;&gt;,"MODIFIED") </string>
        <string>					f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).ALREADYMADE.fieldvaltrim,&lt;&gt;,"MADE") </string>
        <string />
        <string>	            	    'write the data for the upload in the UPLOAD datatable</string>
        <string>		                f.Intrinsic.Control.If(v.Local.i,&lt;&gt;,0)</string>
        <string>		                'write the line for the upload</string>
        <string>		                                F.Data.DataTable.AddRow("UPLOAD","PARENT",V.Local.sparentpart.Trim,"SEQUENCE",v.Local.ssequence,"PART",V.DataTable.Import(v.Local.i).GSS_PART_NUMBER!FIELDVALTRIM,"UM",v.Local.sum,"DESC",v.Local.sdesc.Trim,"REV",v.Local.srev.Trim,"CATEGORY",v.Local.scategory,"SOURCE",v.Local.ssource.Trim,"COUNT",v.Local.fcount)</string>
        <string />
        <string>		                f.Intrinsic.Control.Else</string>
        <string>		                                F.Data.DataTable.SetValue("UPLOAD",0,"PARENT",V.Local.sparentpart)</string>
        <string>		                                F.Data.DataTable.SetValue("UPLOAD",0,"SEQUENCE",V.Local.ssequence)</string>
        <string>		'                               f.data.DataTable.SetValue("UPLOAD",0,"PART",V.Local.spart)</string>
        <string>		                                f.data.DataTable.SetValue("UPLOAD",0,"PART",V.DataTable.Import(v.Local.i).GSS_PART_NUMBER!FIELDVALTRIM)</string>
        <string>		                                F.Data.DataTable.SetValue("UPLOAD",0,"UM",V.Local.sum)</string>
        <string>		                                F.Data.DataTable.SetValue("UPLOAD",0,"DESC",V.Local.sdesc)</string>
        <string>		                                F.Data.DataTable.SetValue("UPLOAD",0,"REV",V.Local.srev)</string>
        <string>		                                F.Data.DataTable.SetValue("UPLOAD",0,"CATEGORY","")</string>
        <string>		                                F.Data.DataTable.SetValue("UPLOAD",0,"SOURCE",V.Local.ssource)       </string>
        <string>		                                F.Data.DataTable.SetValue("UPLOAD",0,"COUNT",V.Local.fcount)           </string>
        <string>		                f.Intrinsic.Control.endif </string>
        <string>					f.Intrinsic.control.EndIf</string>
        <string>				f.Intrinsic.Control.endif	</string>
        <string>				v.Local.fcountgss.Set(1)</string>
        <string>f.Intrinsic.Control.Next(v.Local.i)</string>
        <string>'check to see if the upload button should be allowed or not</string>
        <string>f.Intrinsic.Control.If(v.Local.ballowupload,=,True)</string>
        <string>                gui.Form.cmdUpload.Enabled(True)</string>
        <string>f.Intrinsic.Control.endif</string>
        <string>f.Intrinsic.Control.If(v.Global.ballowupload,=,True)</string>
        <string>                gui.Form.cmdUpload.Enabled(True)</string>
        <string>f.Intrinsic.Control.EndIf</string>
        <string>'close wait dialog</string>
        <string>f.Intrinsic.UI.CloseWaitDialog</string>
        <string>f.Intrinsic.Control.CallSub(loadscreen)</string>
        <string>f.Intrinsic.Control.CallSub(colors)</string>
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("ExplodeBOM_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>                Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>                F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>                F.Intrinsic.Control.CallSub(ss_form_file_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.ExplodeBOM.End</string>
        <string />
        <string>Program.Sub.Loadscreen.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("Loadscreen_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>f.Data.datatable.DeleteRow("IMPORT",0)</string>
        <string>f.Data.datatable.DeleteRow("TEMPLATE",0)</string>
        <string />
        <string>F.Intrinsic.UI.ChangeWaitStatus("Getting Display Ready")</string>
        <string>'create the dataview</string>
        <string>f.data.dataview.create("Import","GRID1")</string>
        <string>'hide some columns and format others</string>
        <string>Gui.Form.GsGridControlImport.AddGridViewFromDataView("GRID1","Import","GRID1")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_LEVEL","MaxWidth","40")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_LEVEL","Caption","Lvl")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_DESCRIPTION","MaxWidth","200")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_DESCRIPTION","Width","200")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_DESCRIPTION","Caption","Description")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_UOM","Caption","UM")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_UOM","MaxWidth","50")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_UOM","Width","50")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PARENT","Caption","Parent")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_EXTRA_DESC","MaxWidth","200")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_EXTRA_DESC","Width","200")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_EXTRA_DESC","Caption","Extra Desc.")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PART_TYPE","Caption","Type")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_COUNT","Caption","Count")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_COUNT","MaxWidth","75")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_COUNT","Width","75")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PART_NUMBER","Caption","Part and Rev")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PART_NUMBER","MaxWidth","150")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PART_NUMBER","Width","150")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_BOM_DESIGNATION","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_Length","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_SUPPLIER","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_BALLOON_CALLOUT","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_LENGTH","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_IsParent","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_FILE_NAME","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_SEQUENCE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_SUPPLIER_PART_NUMBER","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_CHILD_SOURCE_CODE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_SPARE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_ASSEMBLY_TYPE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_SOURCE_CODE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PART_TYPE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PARENT","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_REVISION","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","Color","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","Color","MaxWidth","0")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","Color","Width","0")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_CATEGORY","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","ALREADYMADE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setGridviewProperty("GRID1","Editable",False)</string>
        <string>gui.Form.GsGridControlImport.mainview("GRID1")</string>
        <string />
        <string />
        <string>'create the dataview</string>
        <string>f.data.dataview.create("TEMPLATE","TEMPLATE")</string>
        <string>'hide some columns and format others</string>
        <string>Gui.Form.GsGridControlMatch.AddGridViewFromDataView("TEMPLATE","TEMPLATE","TEMPLATE")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_LEVEL","MaxWidth","40")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_LEVEL","Caption","Lvl")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_DESCRIPTION","MaxWidth","200")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_DESCRIPTION","Width","200")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_DESCRIPTION","Caption","Description")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_UOM","Caption","UM")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_UOM","MaxWidth","50")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_UOM","Width","50")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_PARENT","Caption","Parent")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_EXTRA_DESC","MaxWidth","200")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_EXTRA_DESC","Width","200")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_EXTRA_DESC","Caption","Extra Desc.")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_PART_TYPE","Caption","Type")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_COUNT","Caption","Count")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_COUNT","MaxWidth","75")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_COUNT","Width","75")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_PART_NUMBER","Caption","Part and Rev")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_PART_NUMBER","MaxWidth","150")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_PART_NUMBER","Width","150")</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_BOM_DESIGNATION","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_Length","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_SUPPLIER","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_BALLOON_CALLOUT","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_LENGTH","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_IsParent","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_FILE_NAME","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_SEQUENCE","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_SUPPLIER_PART_NUMBER","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_CHILD_SOURCE_CODE","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_SPARE","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_ASSEMBLY_TYPE","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_SOURCE_CODE","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_PART_TYPE","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_PARENT","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_REVISION","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","Color","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","ALREADYMADE","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setcolumnproperty("TEMPLATE","GSS_CATEGORY","visible",False)</string>
        <string>gui.Form.GsGridControlMatch.setGridviewProperty("TEMPLATE","Editable",False)</string>
        <string>gui.Form.GsGridControlMatch.mainview("TEMPLATE")</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("Loadscreen_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(ss_form_file_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.Loadscreen.End</string>
        <string />
        <string>Program.Sub.CreateDataTable.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("CreateDataTable_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sTypes.Declare(String)</string>
        <string>V.Local.sFieldNames.Declare(String)</string>
        <string>V.Local.sData.Declare(String)</string>
        <string />
        <string />
        <string>'create the data table from a string</string>
        <string>V.Local.sData.Set("*!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!**!*")</string>
        <string>V.Local.sFieldNames.Set("GSS_LEVEL*!*GSS_PART_NUMBER*!*GSS_REVISION*!*GSS_DESCRIPTION*!*GSS_UOM*!*GSS_PART_TYPE*!*GSS_SOURCE_CODE*!*GSS_PARENT*!*GSS_COUNT*!*GSS_BOM_DESIGNATION*!*GSS_SEQUENCE*!*GSS_IsParent*!*GSS_FILE_NAME*!*GSS_ASSEMBLY_TYPE*!*GSS_BALLOON_CALLOUT*!*GSS_SPARE*!*GSS_SUPPLIER_PART_NUMBER*!*GSS_SUPPLIER*!*GSS_CHILD_SOURCE_CODE*!*GSS_LENGTH*!*GSS_EXTRA_DESC*!*GSS_CATEGORY*!*ALREADYMADE")</string>
        <string>V.Local.sTypes.Set("String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String")</string>
        <string>F.Data.DataTable.CreateFromString("Import",V.Local.sData,V.Local.sFieldNames,V.Local.sTypes,"*!*","@!@",True)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("CreateDataTable_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(ss_form_file_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.CreateDataTable.End</string>
        <string />
        <string>Program.Sub.Form_UnLoad.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("Form_UnLoad_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>'closing connection and ending program</string>
        <string>F.ODBC.Connection!con.Close</string>
        <string>Function.Intrinsic.Control.End</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("Form_UnLoad_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	f.Intrinsic.Control.End</string>
        <string />
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.Form_UnLoad.End</string>
        <string />
        <string>Program.Sub.cmdCreate_Click.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmdCreate_Click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>v.Local.i.Declare(long)</string>
        <string>v.Local.ssql.Declare(string)</string>
        <string>v.Local.spart.declare(string)</string>
        <string>v.Local.stext.Declare(string)</string>
        <string>v.Local.sfilepath.Declare(string)</string>
        <string>v.Local.sfilename.Declare(string)</string>
        <string>v.Local.sdate.Declare(string)</string>
        <string>v.Local.stime.Declare(String)</string>
        <string>v.Local.bcolor.Declare(boolean,false)</string>
        <string>v.Local.sextradesc.Declare(string)</string>
        <string>v.Local.bstarvalue.Declare(boolean,false)</string>
        <string>v.Local.sdescsql.Declare(String)</string>
        <string />
        <string>v.Local.itest.Declare(long,0)</string>
        <string>v.Local.irowcount.Declare(long,0)</string>
        <string>v.Local.stoppart.Declare(String)</string>
        <string>v.Local.irowcount.Set(v.DataTable.TEMPLATE.rowcount)</string>
        <string />
        <string>f.Intrinsic.UI.InvokeWaitDialog("Creating Parts in Global Shop...")</string>
        <string />
        <string>v.Local.ssource.Declare(String)</string>
        <string>v.Local.ssource.Set(v.datatable.UPLOAD(0).SOURCE!fieldvaltrim)</string>
        <string />
        <string>f.Intrinsic.String.GSSPartString(v.screen.Form!txtPN1.text,v.screen.form!txtRev1.text,v.local.stoppart)</string>
        <string>f.Intrinsic.Control.If(v.Local.irowcount,=&lt;,1)</string>
        <string>	f.Global.Inventory.AddPartToBatch(v.local.stoppart,"EA",v.Screen.Form!txtDesc1.Text,"","11",v.local.ssource.trim,"","","0","NOMAINT")</string>
        <string>f.Intrinsic.Control.endif	</string>
        <string>'post the batch </string>
        <string>f.Global.Inventory.postpartbatch</string>
        <string />
        <string>'loop through the datatable</string>
        <string>F.Intrinsic.Control.For(v.Local.i,0,v.dataTable.IMPORT.RowCount--,1)</string>
        <string>	f.Intrinsic.String.GSSPartString(v.DataTable.IMPORT(v.Local.i).GSS_PART_NUMBER.fieldvaltrim,v.DataTable.IMPORT(v.Local.i).GSS_REVISION.fieldvaltrim,v.Local.spart)</string>
        <string>	'check to see if the part type is custom</string>
        <string>	f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"CUSTOM")</string>
        <string>		'if it is check the GSS Spare node to see if yes if so put Y if CRITICAL put C</string>
        <string>		f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).GSS_SPARE.fieldvaltrim,=,"YES")</string>
        <string>			'set the user 1 field to Y</string>
        <string>			f.Intrinsic.String.Build("UPDATE INVENTORY_MST2 set TEXT_INFO1 = '{0}' where PART = '{1}'","Y",v.Local.spart.trim,v.Local.ssql)</string>
        <string>			f.ODBC.Connection!con.Execute(v.Local.ssql)</string>
        <string>		f.Intrinsic.Control.elseIf(v.datatable.IMPORT(v.Local.i).GSS_SPARE.fieldvaltrim,=,"C")</string>
        <string>			'set the user 1 field to Y</string>
        <string>			f.Intrinsic.String.Build("UPDATE INVENTORY_MST2 set TEXT_INFO1 = '{0}' WHERE part = '{1}'","CRITICAL",V.Local.spart.trim,V.Local.ssql)</string>
        <string>			f.ODBC.Connection!con.Execute(v.Local.ssql)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	'otherwise if purchased</string>
        <string>	f.Intrinsic.Control.elseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"PURCHASED")</string>
        <string>		'if it is check the GSS Spare node to see if yes if so put Y if CRITICAL put C</string>
        <string>		f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).GSS_SPARE.fieldvaltrim,=,"YES")</string>
        <string>			'set the user 1 field to Y</string>
        <string>			f.Intrinsic.String.Build("UPDATE INVENTORY_MST2 set TEXT_INFO1 = '{0}', NAME_VENDOR = '{2}' where PART = '{1}'","Y",v.Local.spart.trim,v.datatable.IMPORT(v.Local.i).GSS_SUPPLIER.fieldvaltrim,v.Local.ssql)</string>
        <string>			f.ODBC.Connection!con.Execute(v.Local.ssql)</string>
        <string>		f.Intrinsic.Control.elseIf(v.datatable.IMPORT(v.Local.i).GSS_SPARE.fieldvaltrim,=,"C")</string>
        <string>			'set the user 1 field to Y</string>
        <string>			f.Intrinsic.String.Build("UPDATE INVENTORY_MST2 set TEXT_INFO1 = '{0}', NAME_VENDOR = '{2}' WHERE part = '{1}'","CRITICAL",V.Local.spart.trim,v.datatable.IMPORT(v.Local.i).GSS_SUPPLIER.fieldvaltrim,V.Local.ssql)</string>
        <string>			f.ODBC.Connection!con.Execute(v.Local.ssql)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		f.Intrinsic.String.Build("UPDATE INVENTORY_MST2 set NAME_VENDOR = '{0}' WHERE part = '{1}'",v.datatable.IMPORT(v.Local.i).GSS_SUPPLIER.fieldvaltrim,v.Local.spart,V.Local.ssql)</string>
        <string>		f.ODBC.Connection!con.Execute(v.Local.ssql)</string>
        <string>	'otherwise if  BOM Defined set the vendor</string>
        <string>	f.Intrinsic.Control.elseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"BOM DEFINED")</string>
        <string>		f.Intrinsic.String.Build("UPDATE INVENTORY_MST2 set NAME_VENDOR = '{0}' where PART = '{1}'",v.datatable.IMPORT(v.Local.i).GSS_SUPPLIER.fieldvaltrim,v.Local.spart,v.Local.ssql)		</string>
        <string>	'otherwise if modified</string>
        <string>	f.Intrinsic.Control.elseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"MODIFIED")			</string>
        <string>		f.Intrinsic.String.Build("UPDATE INVENTORY_MST2 set NAME_VENDOR = '{0}' WHERE part = '{1}'",v.datatable.IMPORT(v.Local.i).GSS_SUPPLIER.fieldvaltrim,v.Local.spart,V.Local.ssql)</string>
        <string>		f.ODBC.Connection!con.Execute(v.Local.ssql)	</string>
        <string>	f.Intrinsic.Control.EndIf</string>
        <string>	'check to see if the extra desc needs to be updated</string>
        <string>	f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).GSS_EXTRA_DESC.fieldvaltrim,&lt;&gt;,"")</string>
        <string>		'check to see if the part is already in the extra description table </string>
        <string>		f.Intrinsic.string.Build("Select * from INV_EXTRA_TEXT where PART = '{0}'",v.Local.spart,v.Local.sdescsql)</string>
        <string>		F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sdescsql)</string>
        <string>		F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,&lt;&gt;,True)</string>
        <string>			'update the additional description</string>
        <string>			f.Intrinsic.String.Build("UPDATE INV_EXTRA_TEXT set TEXT = '{0}' where PART = '{1}'",v.datatable.IMPORT(v.Local.i).GSS_EXTRA_DESC.fieldvaltrim,v.Local.spart,v.Local.ssql)</string>
        <string>			f.ODBC.Connection!con.Execute(v.Local.ssql)</string>
        <string>		f.Intrinsic.Control.Else</string>
        <string>			f.Intrinsic.String.Build("INSERT INTO INV_EXTRA_TEXT (TEXT, PART) Values ('{0}','{1}')",v.datatable.IMPORT(v.Local.i).GSS_EXTRA_DESC.fieldvaltrim,v.Local.spart,v.Local.ssql)</string>
        <string>			f.ODBC.Connection!con.Execute(v.Local.ssql)		</string>
        <string>		f.Intrinsic.Control.EndIf</string>
        <string>		f.ODBC.con!rst.Close</string>
        <string>	f.Intrinsic.Control.EndIf</string>
        <string>f.Intrinsic.Control.Next(v.Local.i)</string>
        <string />
        <string />
        <string>f.Intrinsic.UI.CloseWaitDialog</string>
        <string> 'inform the user the upload is complete</string>
        <string>f.Intrinsic.UI.Msgbox("Parts have been created")</string>
        <string />
        <string />
        <string>gui.Form.cmdUpload.Enabled(true)</string>
        <string />
        <string>'disable the button</string>
        <string>gui.Form.cmdCreate.Enabled(false)</string>
        <string />
        <string>'unlock the upload buttom</string>
        <string>gui.Form.cmdUpload.Enabled(true)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("cmdCreate_Click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	f.Intrinsic.Control.CallSub(form_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.cmdCreate_Click.End</string>
        <string />
        <string>Program.Sub.cmdUpload_Click.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("Main_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>v.Local.sfile.Declare(string)</string>
        <string>v.Local.i.Declare(long)</string>
        <string>v.Local.sseq.Declare(string)</string>
        <string>v.Local.spart.Declare(string)</string>
        <string>v.Local.sum.Declare(String)</string>
        <string>v.Local.sparent.Declare(string)</string>
        <string>v.Local.scount.Declare(string)</string>
        <string>v.Local.sdesc.Declare(String)</string>
        <string>v.Local.sBOM.declare(string)</string>
        <string>v.Local.srev.Declare(string)</string>
        <string>v.Local.sline.Declare(string)</string>
        <string>v.Local.scat.Declare(string)</string>
        <string>v.Local.ssource.Declare(string)</string>
        <string>v.Local.scompanycode.Declare(String)</string>
        <string>v.Local.fcount.Declare(float)</string>
        <string>v.Local.slevel.Declare(string)</string>
        <string>v.Local.schildbom.Declare(String)</string>
        <string>v.Local.scompanycode.Set(v.Caller.CompanyCode)</string>
        <string>v.Local.inestedcounter.Declare(long)</string>
        <string>v.Local.isequence.Declare(long,0)</string>
        <string>v.Local.fqtyneeded.Declare(float)</string>
        <string>v.Local.bnewparent.Declare(Boolean,false)</string>
        <string>v.Local.sqtyneeded.declare(string)</string>
        <string>v.Local.ssort.declare(string)</string>
        <string>v.Local.iloop.Declare(long)</string>
        <string>v.Local.sparentdesc.Declare(String)</string>
        <string>v.Local.iExists.Declare(Long)</string>
        <string>v.Local.iret.Declare(long)</string>
        <string>v.Local.sexp.Declare(String)</string>
        <string>v.Local.sret.Declare(String)</string>
        <string>v.Local.sBomCount.Declare(String)</string>
        <string>v.Local.scomparepart.Declare(String)</string>
        <string>v.Local.sparentcompare.Declare(String)</string>
        <string>v.Local.sparentwithoutrev.Declare(String)</string>
        <string>v.Local.sDescCompare.Declare(string)</string>
        <string>v.Local.sfilter.Declare(String)</string>
        <string>v.Local.sOccurs.Declare(String)</string>
        <string>v.Local.stestpart.Declare(String)</string>
        <string />
        <string>v.Local.ffinalcount.declare(float)</string>
        <string />
        <string>f.Intrinsic.UI.InvokeWaitDialog("Generating Bills of Material")</string>
        <string />
        <string>f.data.Dataview.create("UPLOAD","SELECTTESTV1")</string>
        <string>f.Data.DataView.todatatabledistinct("UPLOAD","SELECTTESTV1","NEWUPLOADDT","PARENT*!*SEQUENCE*!*PART*!*UM*!*DESC*!*REV*!*CATEGORY*!*SOURCE*!*COUNT")</string>
        <string />
        <string>F.Intrinsic.Control.For(v.Local.i,0,v.dataTable.NEWUPLOADDT.RowCount--,1)</string>
        <string />
        <string>	f.Intrinsic.String.Build("GSS_PART_NUMBER = '{0}' and GSS_PARENT = '{1}'",v.DataTable.NEWUPLOADDT(v.Local.i).PART.fieldvaltrim,v.DataTable.NEWUPLOADDT(v.Local.i).PARENT.fieldvaltrim,v.Local.sexp)</string>
        <string>	'get the count for the child of the parent</string>
        <string>	f.Data.DataTable.Select("IMPORT",v.Local.sexp.trim,v.Local.sret)</string>
        <string>	f.intrinsic.Control.If(v.Local.sret,&lt;&gt;,"***NORETURN***")</string>
        <string>			f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)</string>
        <string>		  v.Local.ffinalcount.Set(v.Local.sret.UBound)</string>
        <string>		f.Intrinsic.Math.Add(v.Local.ffinalcount,1,v.Local.ffinalcount)</string>
        <string>		v.Local.scount.Set(v.Local.ffinalcount)</string>
        <string>   		  'Qty</string>
        <string>  	 	 F.Intrinsic.String.LPad(v.Local.scount,"0",16,V.Local.sCount)	</string>
        <string>	f.Intrinsic.Control.Else</string>
        <string>	  v.Local.scount.Set(v.datatable.NEWUPLOADDT(v.Local.i).COUNT.fieldvaltrim)</string>
        <string>     'Qty</string>
        <string>  	  F.Intrinsic.String.LPad(v.Local.scount,"0",16,V.Local.sCount)</string>
        <string>	f.Intrinsic.Control.EndIf</string>
        <string />
        <string>    v.Local.scat.Set(v.datatable.NEWUPLOADDT(v.Local.i).CATEGORY.fieldvaltrim)</string>
        <string>    'Parent</string>
        <string>    v.Local.sparent.Set(v.datatable.NEWUPLOADDT(v.Local.i).PARENT.fieldvaltrim)</string>
        <string>    v.Local.sparentcompare.Set(v.datatable.NEWUPLOADDT(v.Local.i).PARENT.fieldvaltrim)</string>
        <string>    F.Intrinsic.String.RPad(v.Local.sparent," ",20,v.Local.sparent)</string>
        <string>    'seq</string>
        <string>    v.Local.sseq.Set(v.datatable.NEWUPLOADDT(v.Local.i).SEQUENCE.fieldvaltrim)</string>
        <string>    f.Intrinsic.String.LPad(v.Local.sseq,"0",4,v.Local.sseq)    </string>
        <string>'    v.Local.scount.Set(v.datatable.NEWUPLOADDT(v.Local.i).COUNT.fieldvaltrim)</string>
        <string>'    'Qty</string>
        <string>'    F.Intrinsic.String.LPad(v.Local.scount,"0",16,V.Local.sCount)</string>
        <string>    'UM</string>
        <string>    v.Local.sum.Set(v.datatable.NEWUPLOADDT(v.Local.i).UM.fieldvaltrim)</string>
        <string>    F.Intrinsic.String.RPad(v.Local.sum," ",2,V.local.sum)</string>
        <string>    'Desc</string>
        <string>    v.Local.sdesc.Set(v.datatable.NEWUPLOADDT(v.Local.i).DESC.fieldvaltrim)</string>
        <string>    F.Intrinsic.String.RPad(v.Local.sdesc," ",30,v.Local.sdesc)</string>
        <string>    'Rev</string>
        <string>    v.Local.srev.Set(v.datatable.NEWUPLOADDT(v.Local.i).REV.fieldvaltrim)</string>
        <string>    F.Intrinsic.String.RPad(v.Local.srev," ",3,v.Local.srev)</string>
        <string />
        <string>    'check the category </string>
        <string>    f.Intrinsic.Control.If(v.Local.scat,=,"NORMAL")</string>
        <string>                    v.Local.scat.Set("")</string>
        <string>    f.Intrinsic.Control.ElseIf(v.Local.scat,=,"PHANTOM")</string>
        <string>                    v.Local.scat.Set("P")</string>
        <string>    f.Intrinsic.Control.ElseIf(v.Local.scat,=,"EXCLUDE")</string>
        <string>                    v.Local.scat.Set("X")</string>
        <string>    f.Intrinsic.Control.ElseIf(v.Local.scat,=,"REFERENCE")</string>
        <string>                    v.Local.scat.Set("R")</string>
        <string>    f.Intrinsic.Control.ElseIf(v.Local.scat,=,"SETUP")</string>
        <string>                    v.Local.scat.Set("1")</string>
        <string>    f.Intrinsic.Control.ElseIf(v.Local.scat,=,"")</string>
        <string>                    v.Local.scat.Set("")</string>
        <string>    f.Intrinsic.Control.EndIf</string>
        <string />
        <string>   'Category</string>
        <string>    v.Local.scat.Set(v.datatable.NEWUPLOADDT(v.Local.i).CATEGORY.fieldvaltrim)</string>
        <string>    F.Intrinsic.String.RPad(v.Local.scat," ",1,v.Local.scat)</string>
        <string>    ' make sure Source is 1 char</string>
        <string>    v.Local.ssource.Set(v.datatable.NEWUPLOADDT(v.Local.i).SOURCE.fieldvaltrim)</string>
        <string>    F.Intrinsic.String.RPad(V.local.ssource," ",1,V.Local.sSource)</string>
        <string>    v.Local.spart.Set(v.datatable.NEWUPLOADDT(v.Local.i).PART.fieldvaltrim)</string>
        <string>    F.Intrinsic.String.RPad(v.Local.spart," ",20,v.Local.spart)</string>
        <string>    f.Intrinsic.Control.SelectCase(v.Local.sseq)</string>
        <string>    f.Intrinsic.Control.Case("0000")</string>
        <string>        F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}{6}{7}{8}",v.Local.sparent,v.Local.sseq,"00000000000.0000",v.Local.spart,v.Local.sum,v.Local.sdesc,v.Local.srev,v.Local.scat,V.Local.ssource,V.Local.sLIne)</string>
        <string>        F.Intrinsic.String.Build("{0}*!*{1}", v.Local.sOccurs, v.Local.sparent, v.Local.sOccurs)</string>
        <string>        v.Local.sBomCount.Set(0)</string>
        <string>    f.Intrinsic.Control.Case("0001")</string>
        <string>		F.Intrinsic.String.RPad(v.Local.spart," ",20,v.Local.spart)</string>
        <string>		F.Intrinsic.String.RPad(v.Local.sparent," ",20,v.Local.sparent)</string>
        <string>		f.Intrinsic.String.Left(v.Local.spart,17,v.Local.spart)</string>
        <string>		f.Intrinsic.String.Left(v.Local.sparent,17,v.Local.sparent)</string>
        <string>		F.Intrinsic.String.RPad(v.Local.spart," ",20,v.Local.spart)</string>
        <string>		F.Intrinsic.String.RPad(v.Local.sparent," ",20,v.Local.sparent)</string>
        <string>		F.Intrinsic.Math.Add(v.Local.sBomCount.Float, 1, v.Local.sBomCount)</string>
        <string>		F.Intrinsic.String.LPad(v.Local.sBomCount, "0", 4, v.Local.sBomCount)</string>
        <string>		F.Intrinsic.String.LPad(v.Local.sBomCount, "0", 4, v.Local.sBomCount)</string>
        <string>		F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}{6}{7}{8}",v.Local.sparent,v.Local.sBomCount,v.Local.scount,v.Local.spart,v.Local.sum,v.Local.sdesc,v.Local.srev,v.Local.scat,V.Local.ssource,V.Local.sLIne)	</string>
        <string>			F.Intrinsic.String.Occurs(v.Local.sOccurs, v.Local.sparent, v.Local.iExists)</string>
        <string>		F.Intrinsic.Control.If(v.Local.iExists, =, 0)</string>
        <string>          F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sBom,V.Local.sLine,V.Ambient.NewLine,V.Local.sBom)</string>
        <string>          v.Local.scomparepart.Set(v.datatable.NEWUPLOADDT(v.Local.i).PARENT.fieldvaltrim)</string>
        <string>          f.Intrinsic.String.Left(v.Local.stestpart,17,v.Local.stestpart)</string>
        <string>          f.Intrinsic.String.left(v.Local.scomparepart,17,v.Local.scomparepart)</string>
        <string />
        <string>          f.Intrinsic.Control.For(v.Local.iloop,0,v.dataTable.NEWUPLOADDT.RowCount--,1)</string>
        <string>             v.Local.sTestpart.Set(v.datatable.NEWUPLOADDT(v.Local.iloop).PART.fieldvaltrim)</string>
        <string>             f.Intrinsic.String.left(v.Local.scomparepart,17,v.Local.scomparepart)</string>
        <string>             v.Local.srev.set(v.datatable.NEWUPLOADDT(v.Local.iloop).REV.fieldvaltrim)</string>
        <string>             F.Intrinsic.String.RPad(v.Local.srev," ",3,v.Local.srev)</string>
        <string>             f.Intrinsic.Control.If(v.Local.stestpart.trim,=,v.Local.scomparepart.trim)</string>
        <string>              v.local.sparentdesc.Set(v.datatable.NEWUPLOADDT(v.Local.iloop).DESC.fieldvaltrim)</string>
        <string>             f.Intrinsic.Control.EndIf</string>
        <string />
        <string>          f.Intrinsic.Control.Next(v.local.iloop)</string>
        <string>             F.Intrinsic.String.RPad(v.Local.scomparepart," ",20,v.Local.scomparepart)</string>
        <string>             f.Intrinsic.Control.If(v.Local.sparentdesc.Trim,&lt;&gt;,"")</string>
        <string>                v.Local.sparentwithoutrev.Set(v.datatable.NEWUPLOADDT(v.Local.i).PARENT.fieldvaltrim)</string>
        <string>                F.Intrinsic.String.RPad(v.Local.sparentdesc," ",30,v.Local.sparentdesc)</string>
        <string>                F.Intrinsic.String.RPad(v.Local.srev," ",3,v.Local.srev)</string>
        <string>                F.Intrinsic.String.RPad(v.Local.spart," ",20,v.Local.spart)</string>
        <string>                F.Intrinsic.String.RPad(v.Local.sparent," ",20,v.Local.sparent)</string>
        <string>                F.Intrinsic.String.RPad(v.Local.scomparepart," ",20,v.Local.scomparepart)</string>
        <string>                f.Intrinsic.String.Left(v.Local.scomparepart,17,v.Local.scomparepart)</string>
        <string>                F.Intrinsic.String.RPad(v.Local.scomparepart," ",20,v.Local.scomparepart)                                </string>
        <string>                F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}{6}{7}{8}",v.Local.scomparepart,"0000","00000000000.0000",v.Local.scomparepart,v.Local.sum,v.Local.sparentdesc,v.Local.srev,v.Local.scat,V.Local.ssource,V.Local.sLIne)</string>
        <string>                F.Intrinsic.String.Build("{0}*!*", v.Local.sOccurs, v.Local.scomparepart, v.Local.sOccurs)</string>
        <string>              f.Intrinsic.Control.Else</string>
        <string>			 v.Local.sDescCompare.Set(v.Screen.Form!txtPN1.Text)</string>
        <string>			 F.Intrinsic.Control.If(v.Local.sparent.Trim, !=, v.Local.sDescCompare.Trim)</string>
        <string>                	v.Local.sdesc.set(v.datatable.NEWUPLOADDT(v.Local.i).DESC.fieldvaltrim)</string>
        <string>			 F.Intrinsic.Control.Else</string>
        <string>				v.Local.sdesc.set(v.Screen.Form!txtDesc1.Text)</string>
        <string>				v.Local.srev.Set(v.Screen.Form!txtRev1.Text)</string>
        <string>			 F.Intrinsic.Control.EndIf</string>
        <string>                F.Intrinsic.String.RPad(v.Local.sdesc," ",30,v.Local.sdesc)</string>
        <string>                F.Intrinsic.String.RPad(v.Local.srev," ",3,v.Local.srev)</string>
        <string>                F.Intrinsic.String.RPad(v.Local.sparent," ",20,v.Local.sparent)</string>
        <string>                f.Intrinsic.String.Left(v.Local.spart,17,v.Local.spart)</string>
        <string>                f.Intrinsic.String.Left(v.Local.sparent,17,v.Local.sparent)</string>
        <string>                F.Intrinsic.String.RPad(v.Local.spart," ",20,v.Local.spart)</string>
        <string>                F.Intrinsic.String.RPad(v.Local.sparent," ",20,v.Local.sparent)</string>
        <string>                F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}{6}{7}{8}",v.Local.sparent,"0000","00000000000.0000",v.Local.sparent,v.Local.sum,v.Local.sdesc,v.Local.srev,v.Local.scat,V.Local.ssource,V.Local.sLIne)</string>
        <string>                F.Intrinsic.String.Build("{0}*!*{1}", v.Local.sOccurs, v.Local.sparent, v.Local.sOccurs)</string>
        <string>              f.Intrinsic.Control.endif</string>
        <string>                 F.Intrinsic.Control.EndIf</string>
        <string>               f.Intrinsic.Control.CaseElse</string>
        <string>                 v.Local.srev.set(v.datatable.NEWUPLOADDT(v.Local.i).REV.fieldvaltrim)</string>
        <string>                 F.Intrinsic.String.RPad(v.Local.srev," ",3,v.Local.srev)</string>
        <string>                 F.Intrinsic.Math.Add(v.Local.sBomCount.Float, 1, v.Local.sBomCount)</string>
        <string>                 F.Intrinsic.String.LPad(v.Local.sBomCount, "0", 4, v.Local.sBomCount)</string>
        <string>			  F.Intrinsic.String.RPad(v.Local.spart," ",20,v.Local.spart)</string>
        <string>			  F.Intrinsic.String.Left(v.Local.spart, 17, v.Local.spart)</string>
        <string>			  F.Intrinsic.String.RPad(v.Local.spart, " ", 20, v.Local.spart)</string>
        <string>     	   F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}{6}{7}{8}",v.Local.sparent,v.Local.sBomCount,v.Local.scount,v.Local.spart,v.Local.sum,v.Local.sdesc,v.Local.srev,v.Local.scat,V.Local.ssource,V.Local.sLIne)</string>
        <string>	 f.Intrinsic.Control.EndSelect</string>
        <string>     'Add to bom Lines</string>
        <string>     F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sBom,V.Local.sLine,V.Ambient.NewLine,V.Local.sBom)</string>
        <string>	 v.Local.sparentdesc.Set("")</string>
        <string>f.Intrinsic.Control.Next(v.Local.i)</string>
        <string />
        <string>'Filepath</string>
        <string>F.Intrinsic.String.Build("{0}\{1}",V.Caller.FilesDir,"bomhdr.txt",V.Local.sFile)</string>
        <string />
        <string>'Save File</string>
        <string>F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sBOM)</string>
        <string />
        <string>'upload the BOM file</string>
        <string>Function.Global.General.CallWrapperSync(50,"XSOLIDWK")</string>
        <string />
        <string>f.Intrinsic.UI.CloseWaitDialog</string>
        <string />
        <string>f.Intrinsic.UI.Msgbox("Upload Complete")</string>
        <string>F.Intrinsic.Control.CallSub(refresh)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("Main_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>                Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>                F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.cmdUpload_Click.End</string>
        <string />
        <string>Program.Sub.Refresh.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("Refresh_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>'close the form and re open the file selection form</string>
        <string>gui.Form..Visible(false)</string>
        <string />
        <string>f.Intrinsic.Control.CallSub(form_unload)</string>
        <string>''make file selection form visible</string>
        <string>gui.SS_Form_File..Visible(true)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("Refresh_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	f.Intrinsic.Control.CallSub(form_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.Refresh.End</string>
        <string />
        <string>Program.Sub.LoadWithNothingInGSS.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("LoadWithNothingInGSS_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>v.Local.ssql.Declare(string)</string>
        <string>v.Local.i.Declare(long)</string>
        <string>v.Local.sparentpart.Declare(string)</string>
        <string>v.Local.srev.Declare(String)</string>
        <string>v.Local.sbominfosql.Declare(string)</string>
        <string>v.Local.spart.Declare(String)</string>
        <string>v.Local.sparentpN.Declare(String)</string>
        <string>v.Local.sparentrev.Declare(string)</string>
        <string>V.Local.sHold.Declare(String)</string>
        <string>V.Local.sBOM.Declare(String)</string>
        <string>V.Local.sFilePath.Declare(String)</string>
        <string>V.Local.sFile.Declare(String)</string>
        <string>V.Local.sParams.Declare(String)</string>
        <string>V.Local.bExists.Declare(Boolean)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string>V.Local.iFor.Declare(Long)</string>
        <string>V.Local.iRow.Declare(Long)</string>
        <string>v.Local.icount.Declare(long)</string>
        <string>v.Local.sfieldnames.Declare(string)</string>
        <string>v.Local.stypes.Declare(string)</string>
        <string>v.Local.sreturn.Declare(string)</string>
        <string>v.Local.icount.Set(0)</string>
        <string>v.Local.itest.Declare(long,0)</string>
        <string>v.Local.sballooncallout.Declare(String)</string>
        <string>v.Local.ballowupload.Declare(boolean,True)</string>
        <string>v.Local.ssource.Declare(String)</string>
        <string>v.Local.ssupplierpart.Declare(String)</string>
        <string>v.Local.slevel.Declare(string)</string>
        <string>v.Local.sfilename.Declare(string)</string>
        <string>v.Local.spare.Declare(string)</string>
        <string>v.Local.sum.Declare(String)</string>
        <string>v.Local.sextradesc.Declare(String)</string>
        <string>v.Local.sdesc.Declare(String)</string>
        <string>v.Local.scount2.Declare(String)</string>
        <string>v.Local.sspare.Declare(String)</string>
        <string>v.Local.ssupplier.Declare(String)</string>
        <string>v.Local.svendor.Declare(String)</string>
        <string>v.Local.ssequence.declare(string)</string>
        <string>v.Local.sadditionalbom.Declare(string)</string>
        <string>v.Local.iadditional.Declare(long)</string>
        <string>v.Local.sline.Declare(string)</string>
        <string>v.Local.saddbomnumber.Declare(string)</string>
        <string>v.Local.sretaddbom.Declare(string)</string>
        <string>v.Local.sdata.Declare(String)</string>
        <string>v.Local.fcount.Declare(String)</string>
        <string>v.Local.scount.Declare(string)</string>
        <string>v.Local.scount1.Declare(string)</string>
        <string>v.Local.bdecimal.Declare(boolean)</string>
        <string>v.Local.sfiller.Declare(String)</string>
        <string>v.Local.ifiller.Declare(long)</string>
        <string>v.Local.sfillersql.Declare(String)</string>
        <string>v.Local.stext.Declare(string)</string>
        <string>v.Local.sbomdesignation.Declare(string)</string>
        <string>v.Local.sbomdefinedlength.declare(String)</string>
        <string>v.Local.fbomdefinedlength.Declare(String)</string>
        <string>v.Local.sloc.Declare(String)</string>
        <string>v.Local.slast2.Declare(string)</string>
        <string>v.Local.irowtest.Declare(long)</string>
        <string>v.Local.schildsource.Declare(string)</string>
        <string>v.Local.ballowupload.Set(true)</string>
        <string>v.Local.ilengths.Declare(long)</string>
        <string>v.Local.selements.Declare(String)</string>
        <string>v.Local.suploadtypes.Declare(String)</string>
        <string>v.Local.suploaddata.Declare(String)</string>
        <string>v.Local.ssupplierpart2.Declare(string)</string>
        <string>v.Local.sbomdefinedcount.Declare(string)</string>
        <string>v.Local.bslash.declare(boolean)</string>
        <string>v.Local.fnumerator.Declare(float)</string>
        <string>v.Local.fdenominator.declare(float)</string>
        <string>v.Local.fleadingnumber.Declare(float)</string>
        <string>v.Local.sremovedUM.Declare(string)</string>
        <string>v.Local.baddzeros.Declare(boolean)</string>
        <string>v.Local.iparentcounter.Declare(long)</string>
        <string>v.Local.sparentpartstring.Declare(string)</string>
        <string>v.Local.sfinalpart.Declare(string)</string>
        <string>v.Local.scategory.Declare(string)</string>
        <string>v.Local.stextsql.Declare(String)</string>
        <string>v.Local.sfirstpart.Declare(String)</string>
        <string>v.Local.syeller.Declare(string)</string>
        <string>v.Local.sexp.Declare(String)</string>
        <string>v.Local.iloop.Declare(long)</string>
        <string>v.Local.iret.Declare(long)</string>
        <string>v.Local.bismod.Declare(boolean,false)</string>
        <string>v.local.smaintpart.Declare(String)</string>
        <string />
        <string>'make the second grid invisible</string>
        <string>gui.Form.GsGridControlMatch.visible(false)</string>
        <string>'loop through the datatable</string>
        <string>F.Intrinsic.Control.For(v.Local.i,0,v.dataTable.Import.RowCount--,1)</string>
        <string />
        <string>	f.Intrinsic.Control.If(v.Local.bismod,&lt;&gt;,True)</string>
        <string>		v.Local.sparentpart.Set(v.DataTable.import(v.Local.i).GSS_PARENT.fieldvaltrim)</string>
        <string>		'format the parent</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sparentpart," ",20,v.Local.sparentpart)</string>
        <string>		'set the global parent</string>
        <string>		v.Global.sparentpart.set(v.Local.sparentpart)</string>
        <string>		'set and format the count</string>
        <string>		v.Local.scount.Set(v.DataTable.import(v.Local.i).GSS_COUNT.fieldvaltrim)</string>
        <string>		v.Local.smaintpart.Set(v.DataTable.import(v.Local.i).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>		'check to see if there is a decimal in the count</string>
        <string>		f.Intrinsic.String.IsInString(v.Local.scount,".",true,v.Local.bdecimal)</string>
        <string>		'set the spare</string>
        <string>		v.Local.sspare.Set(v.DataTable.import(v.Local.i).GSS_SPARE.fieldvaltrim)</string>
        <string>		'set the level</string>
        <string>		v.Local.slevel.Set(v.DataTable.import(v.Local.i).GSS_LEVEL.fieldvaltrim)</string>
        <string>		v.Local.fcount.Set(v.Local.scount)</string>
        <string>		v.Local.sdesc.Set(v.datatable.import(v.Local.i).GSS_DESCRIPTION.fieldvaltrim)</string>
        <string>		F.Intrinsic.String.Left(V.Local.sdesc,30,V.Local.sdesc)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sdesc," ",30,V.Local.sdesc)</string>
        <string>		'get the part number and format</string>
        <string>		v.Local.spart.Set(v.datatable.import(v.Local.i).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.spart," ",20,V.Local.spart)</string>
        <string>		'get the sequence and format</string>
        <string>		v.Local.ssequence.Set(v.DataTable.import(v.Local.i).GSS_SEQUENCE.fieldvaltrim)</string>
        <string>		F.Intrinsic.String.LPad(V.Local.ssequence,"0",4,V.Local.ssequence)</string>
        <string>		'get the rev and location and UM and source code</string>
        <string>		v.Local.srev.Set(v.datatable.import(v.Local.i).GSS_REVISION.fieldvaltrim)</string>
        <string>		f.Intrinsic.Control.If(v.Local.srev.trim,=,"")</string>
        <string>			v.Local.srev.set("0")</string>
        <string>		f.Intrinsic.Control.endif</string>
        <string>		F.Intrinsic.String.LPad(V.Local.srev," ",3,V.Local.srev)</string>
        <string>		'UM</string>
        <string>		v.Local.sUM.Set(v.datatable.import(v.Local.i).GSS_UOM.fieldvaltrim)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sum," ",2,V.Local.sum)</string>
        <string>		'Source</string>
        <string>		v.Local.ssource.Set(v.datatable.import(v.Local.i).GSS_SOURCE_CODE.fieldvaltrim)</string>
        <string>		v.Local.schildsource.Set(v.datatable.import(v.Local.i).GSS_SOURCE_CODE.fieldvaltrim)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.ssource," ",1,V.Local.ssource)</string>
        <string>		'Supplier part, supplier, vendor, sballooncallout, file, bom designation</string>
        <string>		v.Local.ssupplierpart.Set(v.datatable.import(v.Local.i).GSS_SUPPLIER_PART_NUMBER.fieldvaltrim)</string>
        <string>		v.Local.ssupplier.Set(v.datatable.import(v.Local.i).GSS_SUPPLIER.fieldvaltrim)</string>
        <string>		v.Local.svendor.Set(v.datatable.import(v.Local.i).GSS_SUPPLIER.fieldvaltrim)</string>
        <string>		v.Local.sballooncallout.Set(v.datatable.import(v.Local.i).GSS_BALLOON_CALLOUT.fieldvaltrim)</string>
        <string>		v.Local.sfilename.Set(v.datatable.import(v.Local.i).GSS_FILE_NAME.fieldvaltrim)</string>
        <string>		'get the part number and format</string>
        <string>		v.Local.spart.Set(v.datatable.IMPORT(v.Local.i).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>		'set the balloon callout</string>
        <string>		v.Local.sbomdesignation.Set(v.DataTable.IMPORT(v.Local.i).GSS_BOM_DESIGNATION.fieldvaltrim)</string>
        <string>		v.Local.ssupplierpart.Set(v.datatable.import(v.Local.i).GSS_SUPPLIER_PART_NUMBER.fieldvaltrim)</string>
        <string>		v.Local.schildsource.Set(v.datatable.import(v.Local.i).GSS_CHILD_SOURCE_CODE.fieldvaltrim)</string>
        <string>		'category</string>
        <string>		v.Local.scategory.Set(v.datatable.import(v.Local.i).GSS_CATEGORY.fieldvaltrim)</string>
        <string>		v.Local.sfiller.Set(v.Local.spart)</string>
        <string>		f.Intrinsic.String.GSSPartString(v.Local.spart.Trim,v.Local.srev.Trim,v.Local.spart)</string>
        <string />
        <string>		'check if party type is custom</string>
        <string>		f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"CUSTOM")</string>
        <string />
        <string>			F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.sfiller.trim)</string>
        <string>			'check to see if that BOM already exists if so populate the second grid</string>
        <string>			f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.spart.Trim,v.Local.ssql)</string>
        <string>			F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,&lt;&gt;,True)</string>
        <string>				'build the file to explode</string>
        <string>				F.Intrinsic.String.Build("{0}\BOM{1}",V.System.Temp,V.Caller.Terminal,V.Local.sFilePath)</string>
        <string>				F.Intrinsic.String.Build("0{0}{1}{0}{2}",V.Ambient.Tab,V.Local.spart.Trim,v.Local.sFilePath,V.Local.sParams)</string>
        <string>				F.Intrinsic.File.String2File(V.Local.sFilePath,V.Local.sParams)</string>
        <string>				F.Global.General.CallWrapperSync(410000,V.Local.sFilePath)</string>
        <string>				F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>				'check if the file exists</string>
        <string>				F.Intrinsic.Control.If(V.Local.bExists,=,True)</string>
        <string>					F.Intrinsic.File.FiletoStringArray(V.Local.sFilePath,V.Ambient.Tab,V.Local.sretaddbom)</string>
        <string>					V.Local.sretaddbom.RedimPreserve(0,3)</string>
        <string>					F.Intrinsic.File.GetFileNameFromFQN(V.Local.sRetaddbom(3),V.Local.sFile.Trim)</string>
        <string>					F.Intrinsic.String.Split(V.Local.sFile," ",V.Local.sFile)</string>
        <string>					F.Intrinsic.String.Build("{0}\{1}",V.System.Temp,V.Local.sFile(0).Trim,V.Local.sFilePath)</string>
        <string>					F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>					'check if the file exists</string>
        <string>					F.Intrinsic.Control.If(V.Local.bExists,=,true)		</string>
        <string>						'load it to a string</string>
        <string>						F.Intrinsic.File.File2String(V.Local.sFilePath,V.Local.sretaddbom)</string>
        <string>						f.Intrinsic.String.Replace(v.Local.sretaddbom,"*","",v.Local.sretaddbom)</string>
        <string>						'split the return</string>
        <string>						f.Intrinsic.String.Split(v.Local.sretaddbom.Trim,v.Ambient.NewLine,v.Local.sretaddbom)</string>
        <string>					F.Intrinsic.Control.EndIf</string>
        <string>					f.Intrinsic.File.DeleteFile(v.Local.sFilePath)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				f.ODBC.con!rst.Close</string>
        <string>			f.Intrinsic.Control.Else</string>
        <string>				'close the connection</string>
        <string>				f.ODBC.con!rst.Close</string>
        <string>				'check the source code</string>
        <string>				f.Intrinsic.Control.If(v.Local.ssource.Trim,=,"NCC-*")</string>
        <string>					'set as P</string>
        <string>					v.Local.ssource.Set("P")</string>
        <string>				f.Intrinsic.Control.ElseIf(v.Local.ssource.Trim,=,"STD-*")</string>
        <string>					'set as P</string>
        <string>					v.Local.ssource.Set("P")</string>
        <string>				f.Intrinsic.Control.ElseIf(v.Local.ssource.Trim,=,"P-*")</string>
        <string>					'set as P</string>
        <string>					v.Local.ssource.Set("P")</string>
        <string>				f.Intrinsic.Control.Else</string>
        <string>					'set as J for purchase to job</string>
        <string>					v.Local.ssource.Set("J")</string>
        <string>				f.Intrinsic.Control.EndIf</string>
        <string>				'query to see if that part is listed as an extra desc </string>
        <string>				f.Intrinsic.String.Build("Select Top 1 PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.Local.spart.Trim,v.Local.stextsql)</string>
        <string>				f.ODBC.Connection!con.ExecuteAndReturn(v.Local.stextsql,v.Local.sRet)</string>
        <string>				f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")</string>
        <string>					'query to see if that part is in inventory</string>
        <string>					f.Intrinsic.String.Build("Select PART from V_INVENTORY_MSTR where PART = '{0}'",v.Local.spart.Trim,v.Local.ssql)</string>
        <string>					F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>					F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)</string>
        <string>						f.Intrinsic.Control.If(v.Local.i,&gt;,0)</string>
        <string>							'check to see if the import data is a new row or appending</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)	</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",v.Local.i,"Color","Y")</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",v.Local.i,"ALREADYMADE","MADE")</string>
        <string>						f.Intrinsic.Control.Else</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",0,"GSS_PART_NUMBER",V.Local.spart.trim)	</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",0,"Color","Y")	</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",0,"ALREADYMADE","MADE")	</string>
        <string />
        <string>						f.Intrinsic.Control.endif</string>
        <string>						'add the part to the batch</string>
        <string>						f.Global.Inventory.AddPartToBatch(v.Local.spart.Trim,"EA",v.Local.sdesc.Trim,"","22",v.Local.ssource.Trim,"","","0","NOMAINT")	</string>
        <string>						'set the local boolean as false</string>
        <string>						v.Local.ballowupload.Set(False)</string>
        <string>					'otherwise if something is found append the datatable</string>
        <string>					f.Intrinsic.Control.Else</string>
        <string>						F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)	</string>
        <string>					f.Intrinsic.Control.EndIf</string>
        <string>				'otherwise if something is found append the datatable</string>
        <string>				f.Intrinsic.Control.Else</string>
        <string>					F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.sret.trim)</string>
        <string>					F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.sret.trim)	</string>
        <string>					v.Local.spart.Set(v.Local.sret)	</string>
        <string>				f.Intrinsic.Control.EndIf			</string>
        <string>			f.Intrinsic.Control.EndIf</string>
        <string>			f.ODBC.con!rst.Close</string>
        <string>		'check to see if purchased</string>
        <string>		f.Intrinsic.Control.ElseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"MODIFIED")</string>
        <string>			v.Local.bismod.Set(True)	</string>
        <string>			'check to see if that BOM already exists if so populate the second grid</string>
        <string>			f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.ssupplierpart.Trim,v.Local.ssql)</string>
        <string>			F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,&lt;&gt;,True)</string>
        <string>	'			'set the extra description as the supplier part	</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.local.ssupplierpart.trim)</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.ssupplierpart.trim)</string>
        <string>				v.Local.spart.set(v.Local.ssupplierpart.Trim)</string>
        <string>				f.ODBC.con!rst.Close</string>
        <string>			f.Intrinsic.Control.Else</string>
        <string>				f.ODBC.con!rst.Close</string>
        <string>				'check the source code</string>
        <string>				f.Intrinsic.Control.If(v.Local.ssource.Trim,=,"NCC-*")</string>
        <string>					'set as P</string>
        <string>					v.Local.ssource.Set("P")</string>
        <string>				f.Intrinsic.Control.ElseIf(v.Local.ssource.Trim,=,"STD-*")</string>
        <string>					'set as P</string>
        <string>					v.Local.ssource.Set("P")</string>
        <string>				f.Intrinsic.Control.ElseIf(v.Local.ssource.Trim,=,"GLIDE-LINE")</string>
        <string>					'set as P</string>
        <string>					v.Local.ssource.Set("P")</string>
        <string>				f.Intrinsic.Control.ElseIf(v.Local.ssource.Trim,=,"Published As")</string>
        <string>					'set as P</string>
        <string>					v.Local.ssource.Set("P")				</string>
        <string>				f.Intrinsic.Control.Else</string>
        <string>					'set as j for purchase to job</string>
        <string>					v.Local.ssource.Set("P")</string>
        <string>				f.Intrinsic.Control.EndIf	</string>
        <string>				'check the child source code</string>
        <string>				f.Intrinsic.Control.If(v.Local.schildsource.Trim,=,"SUPPLIER")</string>
        <string>					v.Local.schildsource.Set("P")</string>
        <string>				f.Intrinsic.Control.ElseIf(v.Local.schildsource.Trim,=,"NCC")</string>
        <string>					v.Local.schildsource.Set("J")		</string>
        <string>				f.Intrinsic.Control.ElseIf(v.Local.schildsource.Trim,=,"STD")	</string>
        <string>					v.Local.schildsource.Set("J")	</string>
        <string>				f.Intrinsic.Control.ElseIf(v.Local.schildsource.Trim,=,"GLIDE-LINE")</string>
        <string>					v.Local.schildsource.Set("J")		</string>
        <string>				f.Intrinsic.Control.EndIf</string>
        <string />
        <string>				'check to see if the part has already been made</string>
        <string>				f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).ALREADYMADE.fieldvaltrim,=,"MADE")</string>
        <string>					'close the connection update the datatable</string>
        <string>					F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)	</string>
        <string>					F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.spart.trim)		</string>
        <string>				f.Intrinsic.Control.Else</string>
        <string>					'query to see if that part is listed as an extra desc </string>
        <string>					f.Intrinsic.String.Build("Select top 1 PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.Local.spart.Trim,v.Local.stextsql)</string>
        <string>					f.ODBC.Connection!con.Executeandreturn(v.Local.stextsql,v.Local.sRet)</string>
        <string>					f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")</string>
        <string>	'					'query to see if that part is in inventory</string>
        <string>						f.Intrinsic.String.Build("Select PART from V_INVENTORY_MSTR where PART = '{0}'",v.Local.ssupplierpart.Trim,v.Local.ssql)</string>
        <string>						F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPurch",V.Local.sSQL)</string>
        <string>						F.Intrinsic.Control.If(V.ODBC.con!rstPurch.EOF,=,True)</string>
        <string>							'get the last filler for auto generated parts and add 1 to it plus the prefix</string>
        <string>							f.Intrinsic.String.Build("Select F_LONG FROM OP_HEADER where ID = '{0}' and SEQUENCE = '{1}'","400460","0002",v.Local.sfillersql)</string>
        <string>							F.ODBC.Connection!con.OpenLocalRecordsetRW("rst1",V.Local.sfillersql)</string>
        <string>							F.Intrinsic.Control.If(V.ODBC.con!rst1.EOF,=,False)</string>
        <string>								v.Local.ifiller.Set(v.ODBC.con!rst1.FieldValTrim!F_LONG)</string>
        <string>								f.Intrinsic.Math.Add(v.Local.ifiller,1,v.Local.sfiller)</string>
        <string>								f.ODBC.con!rst1.Set!F_LONG(v.Local.sfiller)</string>
        <string>								f.ODBC.con!rst1.Update</string>
        <string>							f.Intrinsic.Control.EndIf</string>
        <string>							f.ODBC.con!rst1.Close</string>
        <string>							'add the prefix</string>
        <string>							f.Intrinsic.String.Build("{0}{1}",v.Global.sprefix.Trim,v.Local.sfiller,v.Local.sfiller)</string>
        <string>							f.Intrinsic.String.GSSPartString(v.Local.sfiller.Trim,v.Local.srev.Trim,v.Local.sfiller)</string>
        <string>							v.Local.ssupplierpart2.Set(v.Local.spart)</string>
        <string>							f.Intrinsic.String.GSSPartString(v.Local.ssupplierpart2,v.Local.srev,v.Local.ssupplierpart2)	</string>
        <string>							'before we add to batch confirm if that Part is listed multiple times in the XML</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",v.Local.i,"Color","Y")		</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",v.Local.i,"ALREADYMADE","MADE")</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",v.Local.ssupplierpart2)		</string>
        <string>'							f.Intrinsic.String.GSSPartString(v.Local.ssupplierpart,v.Local.srev,v.Local.smaintpart)</string>
        <string>							f.Data.DataTable.AddRow("IMPORT","GSS_DESCRIPTION",v.Local.sdesc,"GSS_PART_NUMBER",V.Local.sfiller.Trim,"GSS_COUNT",v.Local.fcount,"GSS_PARENT",v.Local.ssupplierpart2.trim,"GSS_LEVEL",v.Local.slevel,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"GSS_EXTRA_DESC",v.Local.ssupplierpart,"COlor","Y","ALREADYMADE","MADE","GSS_CATEGORY",v.Local.scategory,"GSS_SEQUENCE",v.Local.ssequence)</string>
        <string>							f.Intrinsic.String.Left(v.Local.spart,17,v.Local.spart)</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",v.Local.spart)</string>
        <string>							f.Intrinsic.String.Build("GSS_EXTRA_DESC = '{0}'",v.DataTable.IMPORT(v.Local.i).GSS_EXTRA_DESC.fieldvaltrim,v.Local.sexp)</string>
        <string>							'make sure there are no new custom parts being created for the same extra desc</string>
        <string>							f.Data.DataTable.Select("IMPORT",v.Local.sexp.trim,v.Local.sret)</string>
        <string>							f.Intrinsic.String.GSSPartString(v.Local.spart,v.Local.srev,v.Local.spart)</string>
        <string>	'						'	'split the ret</string>
        <string>							f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)</string>
        <string>							f.Intrinsic.Control.If(v.Local.sret.UBound,&gt;,0)</string>
        <string>	'					'		'loop through the return to get the ordinals and set the parts</string>
        <string>								f.Intrinsic.Control.For(v.Local.iloop,0,v.Local.sret.UBound,1)</string>
        <string>						'			'if its the first loop around set the part</string>
        <string>									f.Intrinsic.Control.If(v.Local.iloop,=,0)</string>
        <string>										v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>										v.Local.sfirstpart.Set(v.datatable.IMPORT(v.Local.iret).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>										v.Local.syeller.Set(v.datatable.IMPORT(v.Local.iret).Color.fieldvaltrim)</string>
        <string>										f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>										F.Data.DataTable.SetValue("Import",V.Local.iret,"GSS_EXTRA_DESC",v.local.ssupplierpart.trim)</string>
        <string>									f.Intrinsic.Control.Else</string>
        <string>										v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>										f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"GSS_PART_NUMBER",v.local.sfirstpart)</string>
        <string>										f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"Color",v.Local.syeller)</string>
        <string>										f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>										F.Data.DataTable.SetValue("Import",V.Local.iret,"GSS_EXTRA_DESC",v.datatable.IMPORT(v.Local.i).GSS_PART_NUMBER.fieldvaltrim)					</string>
        <string>									f.Intrinsic.Control.EndIf</string>
        <string>								f.Intrinsic.Control.Next(v.local.iloop)</string>
        <string>							f.Intrinsic.Control.EndIf</string>
        <string>							'because it is modified we add two lines, one for child and one for parent</string>
        <string>							f.Global.Inventory.AddPartToBatch(v.Local.sfiller.Trim,"EA","GSS DESCRIPTION","","03",v.Local.schildsource.Trim,"","","0","NOMAINT")	</string>
        <string>							f.Global.Inventory.AddPartToBatch(v.Local.ssupplierpart2.Trim,"EA",v.Local.sdesc.Trim,"","03",v.Local.ssource.Trim,"","","0","NOMAINT")	</string>
        <string>							F.Data.DataTable.AddRow("UPLOAD","PARENT",V.Local.sparentpart.Trim,"SEQUENCE",v.Local.ssequence,"PART",v.Local.ssupplierpart2,"UM",v.Local.sum,"DESC",v.Local.sdesc.Trim,"REV",v.Local.srev.Trim,"CATEGORY",v.Local.scategory,"SOURCE",v.Local.ssource.Trim,"COUNT",v.Local.fcount)</string>
        <string>							F.Data.DataTable.AddRow("UPLOAD","PARENT",V.Local.ssupplierpart2.Trim,"SEQUENCE",v.Local.ssequence,"PART",v.Local.sfiller.trim,"UM",v.Local.sum,"DESC","GSS DESCRIPTION","REV",v.Local.srev.Trim,"CATEGORY",v.Local.scategory,"SOURCE",v.Local.schildsource.Trim,"COUNT",v.Local.fcount)</string>
        <string>						f.Intrinsic.Control.EndIf</string>
        <string>						f.ODBC.con!rstPurch.close</string>
        <string>					f.Intrinsic.Control.endif	</string>
        <string>				f.Intrinsic.Control.EndIf</string>
        <string>			f.Intrinsic.Control.EndIf</string>
        <string />
        <string>			v.Local.bismod.Set(false)</string>
        <string>		'check to see if purchased</string>
        <string>		f.Intrinsic.Control.ElseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"PURCHASED")</string>
        <string />
        <string>		'	check to see if that BOM already exists if so populate the second grid</string>
        <string>			f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.ssupplierpart.Trim,v.Local.ssql)</string>
        <string>			F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,&lt;&gt;,True)</string>
        <string>				'set the extra description as the supplier part	</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.local.ssupplierpart.trim)</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.ssupplierpart.trim)</string>
        <string>				v.Local.spart.set(v.Local.ssupplierpart.Trim)</string>
        <string>				f.ODBC.con!rst.Close</string>
        <string>			f.Intrinsic.Control.Else</string>
        <string>				f.ODBC.con!rst.Close</string>
        <string>				'check the source code</string>
        <string>				f.Intrinsic.Control.If(v.Local.ssource.Trim,=,"NCC")</string>
        <string>					'set as P</string>
        <string>					v.Local.ssource.Set("P")</string>
        <string>				f.Intrinsic.Control.ElseIf(v.Local.ssource.Trim,=,"STD")</string>
        <string>					'set as P</string>
        <string>					v.Local.ssource.Set("P")</string>
        <string>				f.Intrinsic.Control.ElseIf(v.Local.ssource.Trim,=,"GLIDE-LINE")</string>
        <string>					'set as P</string>
        <string>					v.Local.ssource.Set("P")</string>
        <string>				f.Intrinsic.Control.Else</string>
        <string>					'set as j for purchase to job</string>
        <string>					v.Local.ssource.Set("J")</string>
        <string>				f.Intrinsic.Control.EndIf	</string>
        <string />
        <string>				'check to see if the part has already been made</string>
        <string>				f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).ALREADYMADE.fieldvaltrim,&lt;&gt;,"MADE")</string>
        <string />
        <string>					'query to see if that part is listed as an extra desc </string>
        <string>					f.Intrinsic.String.Build("Select top 1 PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.Local.ssupplierpart.Trim,v.Local.stextsql)</string>
        <string>					f.ODBC.Connection!con.Executeandreturn(v.Local.stextsql,v.Local.sRet)</string>
        <string>					f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")</string>
        <string>						'query to see if that part is in inventory</string>
        <string>						f.Intrinsic.String.Build("Select PART from V_INVENTORY_MSTR where PART = '{0}'",v.Local.ssupplierpart.Trim,v.Local.ssql)</string>
        <string>						F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPurch",V.Local.sSQL)</string>
        <string>						F.Intrinsic.Control.If(V.ODBC.con!rstPurch.EOF,=,True)</string>
        <string>						'check to see if supplierpart is blank</string>
        <string>	'					f.Intrinsic.Control.If(v.Local.ssupplierpart,=,"")</string>
        <string>							'get the last filler for auto generated parts and add 1 to it plus the prefix</string>
        <string>							f.Intrinsic.String.Build("Select F_LONG FROM OP_HEADER where ID = '{0}' and SEQUENCE = '{1}'","400460","0002",v.Local.sfillersql)</string>
        <string>							F.ODBC.Connection!con.OpenLocalRecordsetRW("rst1",V.Local.sfillersql)</string>
        <string>							F.Intrinsic.Control.If(V.ODBC.con!rst1.EOF,=,False)</string>
        <string>								v.Local.ifiller.Set(v.ODBC.con!rst1.FieldValTrim!F_LONG)</string>
        <string>								f.Intrinsic.Math.Add(v.Local.ifiller,1,v.Local.sfiller)</string>
        <string>								f.ODBC.con!rst1.Set!F_LONG(v.Local.sfiller)</string>
        <string>								f.ODBC.con!rst1.Update</string>
        <string>							f.Intrinsic.Control.EndIf</string>
        <string>							f.ODBC.con!rst1.Close</string>
        <string>							'add the prefix</string>
        <string>							f.Intrinsic.String.Build("{0}{1}",v.Global.sprefix.Trim,v.Local.sfiller,v.Local.spart)</string>
        <string>							f.Intrinsic.String.GSSPartString(v.Local.spart.Trim,v.Local.srev.Trim,v.Local.spart)	</string>
        <string>							'before we add to batch confirm if that Part is listed multiple times in the XML</string>
        <string>							f.Intrinsic.Control.If(v.Local.i,&gt;,0)</string>
        <string>								'check to see if the import data is a new row or appending</string>
        <string>								F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)	</string>
        <string>								F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.ssupplierpart.trim)</string>
        <string>								F.Data.DataTable.SetValue("IMPORT",v.Local.i,"Color","Y")		</string>
        <string>								F.Data.DataTable.SetValue("IMPORT",v.Local.i,"ALREADYMADE","MADE")			</string>
        <string>							f.Intrinsic.Control.Else</string>
        <string>								F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)	</string>
        <string>								F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.ssupplierpart.trim)</string>
        <string>								F.Data.DataTable.SetValue("IMPORT",v.Local.i,"Color","Y")	</string>
        <string>								F.Data.DataTable.SetValue("IMPORT",v.Local.i,"ALREADYMADE","MADE")	</string>
        <string>							f.Intrinsic.Control.endif</string>
        <string />
        <string>							f.Intrinsic.String.Build("GSS_SUPPLIER_PART_NUMBER = '{0}'",v.DataTable.IMPORT(v.Local.i).GSS_EXTRA_DESC.fieldvaltrim,v.Local.sexp)</string>
        <string>							'make sure there are no new custom parts being created for the same extra desc</string>
        <string>							f.Data.DataTable.Select("IMPORT",v.Local.sexp.trim,v.Local.sret)</string>
        <string>						'	'split the ret</string>
        <string>							f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)</string>
        <string>							f.Intrinsic.Control.If(v.Local.sret.UBound,&gt;,0)</string>
        <string>						'		'loop through the return to get the ordinals and set the parts</string>
        <string>								f.Intrinsic.Control.For(v.Local.iloop,0,v.Local.sret.UBound,1)</string>
        <string>						'			'if its the first loop around set the part</string>
        <string>									f.Intrinsic.Control.If(v.Local.iloop,=,0)</string>
        <string>										v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>										v.Local.sfirstpart.Set(v.datatable.IMPORT(v.Local.iret).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>										v.Local.syeller.Set(v.datatable.IMPORT(v.Local.iret).Color.fieldvaltrim)</string>
        <string>										f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>										F.Data.DataTable.SetValue("Import",V.Local.iret,"GSS_EXTRA_DESC",v.local.ssupplierpart.trim)</string>
        <string>									f.Intrinsic.Control.Else</string>
        <string>										v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>										f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"GSS_PART_NUMBER",v.local.sfirstpart)</string>
        <string>										f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"Color",v.Local.syeller)</string>
        <string>										f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>										F.Data.DataTable.SetValue("Import",V.Local.iret,"GSS_EXTRA_DESC",v.local.ssupplierpart.trim)					</string>
        <string>									f.Intrinsic.Control.EndIf</string>
        <string>								f.Intrinsic.Control.Next(v.local.iloop)</string>
        <string>							f.Intrinsic.Control.EndIf</string>
        <string>						f.Intrinsic.Control.EndIf	</string>
        <string>					f.ODBC.con!rstPurch.close</string>
        <string>					'add the part to the batch	</string>
        <string>					f.Global.Inventory.AddPartToBatch(v.Local.spart.Trim,"EA",v.Local.sdesc.Trim,"","33",v.Local.ssource.Trim,"","","0","NOMAINT")	</string>
        <string />
        <string>					F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)	</string>
        <string>					F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.ssupplierpart.trim)	</string>
        <string>				f.Intrinsic.Control.Else</string>
        <string>					'close the connection update the datatable</string>
        <string>					F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.sret.trim)	</string>
        <string>					F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.ssupplierpart.trim)	</string>
        <string>					v.Local.spart.Set(v.Local.sRet)</string>
        <string>					f.Intrinsic.Control.EndIf</string>
        <string>				f.Intrinsic.Control.EndIf			</string>
        <string>			f.Intrinsic.Control.EndIf	</string>
        <string>		'if part type - assembly		</string>
        <string>		f.Intrinsic.Control.ElseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"ASSEMBLY")</string>
        <string>			v.Global.iassembly.Set(v.Local.i)</string>
        <string>			'call the assembly sub</string>
        <string>			f.Intrinsic.Control.CallSub(assembly)</string>
        <string>		'if part type is bom defined	</string>
        <string>		f.Intrinsic.Control.ElseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"BOM DEFINED")</string>
        <string />
        <string />
        <string>			'check to see if that BOM already exists if so populate the second grid</string>
        <string>			f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.sbomdesignation.Trim,v.Local.ssql)</string>
        <string>			F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,&lt;&gt;,True)</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.local.sbomdesignation.trim)</string>
        <string>				v.Local.spart.set(v.Local.sbomdesignation.Trim)</string>
        <string>				f.ODBC.con!rst.Close</string>
        <string>			f.Intrinsic.Control.Else</string>
        <string>				f.ODBC.con!rst.Close</string>
        <string>				'set rev as 0</string>
        <string>				v.Local.srev.Set("  0")</string>
        <string>				v.Local.sloc.Set("")</string>
        <string>				'set the UM</string>
        <string>				v.Local.sum.Set(v.DataTable.import(v.Local.i).GSS_LENGTH.fieldvaltrim)</string>
        <string>				f.Intrinsic.String.Right(v.Local.sum,2,v.Local.sremovedUM)</string>
        <string>				f.Intrinsic.String.Replace(v.Local.sum,v.Local.sremovedUM,"",v.Local.scount)</string>
        <string>				v.Local.sum.Set(v.Local.sremovedUM)</string>
        <string>				f.Intrinsic.String.IsInString(v.Local.scount,"/","True",v.Local.bslash)</string>
        <string>				f.Intrinsic.Control.iF(v.Local.bslash,=,True)				</string>
        <string>					f.Intrinsic.string.Split(v.Local.scount,"/",v.Local.scount)</string>
        <string>					f.Intrinsic.String.Right(v.Local.scount(0),2,v.Local.fnumerator)</string>
        <string>					f.Intrinsic.String.left(v.Local.scount(0),2,v.Local.fleadingnumber)</string>
        <string>					v.Local.fdenominator.Set(v.Local.scount(1))</string>
        <string>					f.Intrinsic.Math.div(v.Local.fnumerator,v.Local.fdenominator,v.Local.fcount)</string>
        <string>					f.Intrinsic.Math.add(v.Local.fcount,v.Local.fleadingnumber,v.Local.fcount)</string>
        <string>				f.Intrinsic.Control.Else</string>
        <string>					f.Intrinsic.Math.Mult(v.Local.fcount,v.Local.scount,v.Local.fcount)</string>
        <string>				f.Intrinsic.Control.EndIf</string>
        <string>				'format the count for the upload and pad any numbers 4 characters to the right of the decimal</string>
        <string>				f.Intrinsic.String.IsInString(v.Local.fcount,".",True,v.Local.baddzeros)</string>
        <string>				f.Intrinsic.Control.If(v.Local.baddzeros,=,False)</string>
        <string>	'				f.Intrinsic.String.Build("{0}.{1}",v.Local.fcount,"0000",v.Local.fcount)</string>
        <string>				f.Intrinsic.Control.else</string>
        <string>					f.Intrinsic.String.Split(v.Local.fcount,".",v.Local.fcount)</string>
        <string>					f.Intrinsic.String.RPad(v.Local.fcount(1),"0",4,v.Local.fcount(1))</string>
        <string>					f.Intrinsic.String.Build("{0}.{1}",v.Local.fcount(0),v.Local.fcount(1),v.Local.fcount)			</string>
        <string>				f.Intrinsic.Control.EndIf</string>
        <string>			f.Intrinsic.Control.EndIf</string>
        <string>'			f.Intrinsic.Math.Mult(v.Local.fcount,v.DataTable.import(v.Local.i).GSS_COUNT.fieldvaltrim,v.Local.fcount)</string>
        <string>			F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_COUNT",v.local.fcount.trim)</string>
        <string>			'check to see if the part has already been made</string>
        <string>			f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).ALREADYMADE.fieldvaltrim,&lt;&gt;,"MADE")</string>
        <string>				'query to see if that part is listed as an extra desc </string>
        <string>				f.Intrinsic.String.Build("Select top 1 PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.Local.sbomdesignation.Trim,v.Local.stextsql)</string>
        <string>				f.ODBC.Connection!con.ExecuteAndReturn(v.Local.stextsql,v.Local.sRet)</string>
        <string>				f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")</string>
        <string>					'query to see if that part is in inventory</string>
        <string>					f.Intrinsic.String.Build("Select PART from V_INVENTORY_MSTR where PART = '{0}'",v.Local.sbomdesignation.Trim,v.Local.ssql)</string>
        <string>					F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>					F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)</string>
        <string>						'set the local boolean as false</string>
        <string>						v.Local.ballowupload.Set(False)			</string>
        <string>						'get the last filler for auto generated parts and add 1 to it plus the prefix</string>
        <string>						f.Intrinsic.String.Build("Select F_LONG FROM OP_HEADER where ID = '{0}' and SEQUENCE = '{1}'","400460","0002",v.Local.sfillersql)</string>
        <string>						F.ODBC.Connection!con.OpenLocalRecordsetRW("rst1",V.Local.sfillersql)</string>
        <string>						F.Intrinsic.Control.If(V.ODBC.con!rst1.EOF,=,False)</string>
        <string>							v.Local.ifiller.Set(v.ODBC.con!rst1.FieldValTrim!F_LONG)</string>
        <string>							f.Intrinsic.Math.Add(v.Local.ifiller,1,v.Local.sfiller)</string>
        <string>							f.ODBC.con!rst1.Set!F_LONG(v.Local.sfiller)</string>
        <string>							f.ODBC.con!rst1.Update</string>
        <string>						f.Intrinsic.Control.EndIf</string>
        <string>						f.ODBC.con!rst1.Close</string>
        <string>						'add the prefix</string>
        <string>						f.Intrinsic.String.Build("{0}{1}",v.Global.sprefix.Trim,v.Local.sfiller,v.Local.spart)</string>
        <string>						f.Intrinsic.String.GSSPartString(v.Local.spart.Trim,v.Local.srev.Trim,v.Local.spart)</string>
        <string>						f.Intrinsic.Control.If(v.Local.i,&gt;,0)</string>
        <string>							'check to see if the import data is a new row or appending</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_PART_NUMBER",V.Local.spart.trim)	</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_EXTRA_DESC",V.Local.sbomdesignation.trim)</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_UOM",V.Local.sum.trim)	</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",v.Local.i,"Color","Y")				</string>
        <string>						f.Intrinsic.Control.Else</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",0,"GSS_PART_NUMBER",V.Local.spart.trim)	</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",0,"GSS_EXTRA_DESC",V.Local.sbomdesignation.trim)</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",0,"GSS_UOM",V.Local.sum.trim)	</string>
        <string>							F.Data.DataTable.SetValue("IMPORT",0,"Color","Y")		</string>
        <string>						f.Intrinsic.Control.endif</string>
        <string>						f.Intrinsic.String.Build("GSS_DESCRIPTION = '{0}'",v.DataTable.IMPORT(v.Local.i).GSS_DESCRIPTION.fieldvaltrim,v.Local.sexp)</string>
        <string>						'make sure there are no new custom parts being created for the same extra desc</string>
        <string>						f.Data.DataTable.Select("IMPORT",v.Local.sexp.trim,v.Local.sret)</string>
        <string>					'	'split the ret</string>
        <string>						f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)</string>
        <string>						f.Intrinsic.Control.If(v.Local.sret.UBound,&gt;,0)</string>
        <string>					'		'loop through the return to get the ordinals and set the parts</string>
        <string>							f.Intrinsic.Control.For(v.Local.iloop,0,v.Local.sret.UBound,1)</string>
        <string>					'			'if its the first loop around set the part</string>
        <string>								f.Intrinsic.Control.If(v.Local.iloop,=,0)</string>
        <string>									v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>									v.Local.sfirstpart.Set(v.datatable.IMPORT(v.Local.iret).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>									v.Local.syeller.Set(v.datatable.IMPORT(v.Local.iret).Color.fieldvaltrim)</string>
        <string>									f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>								f.Intrinsic.Control.Else</string>
        <string>									v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>									f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"GSS_PART_NUMBER",v.local.sfirstpart)</string>
        <string>									f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"Color",v.Local.syeller)</string>
        <string>									f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>									F.Data.DataTable.SetValue("Import",V.Local.iret,"GSS_EXTRA_DESC",v.Local.sbomdesignation.Trim)</string>
        <string>									F.Data.DataTable.SetValue("IMPORT",v.Local.iret,"GSS_UOM",V.Local.sremovedUM.trim)	</string>
        <string>								f.Intrinsic.Control.EndIf</string>
        <string>							f.Intrinsic.Control.Next(v.local.iloop)</string>
        <string>						f.Intrinsic.Control.EndIf</string>
        <string>						'add the part to the batch	</string>
        <string>						f.Global.Inventory.AddPartToBatch(v.Local.spart.Trim,"EA",v.Local.sdesc.Trim,"","22","F","","","0","NOMAINT")	</string>
        <string>				f.Intrinsic.Control.endif	</string>
        <string>				f.ODBC.con!rst.Close</string>
        <string>			f.Intrinsic.Control.Else</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.local.sbomdesignation.trim)</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.sret.trim)</string>
        <string>				F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_UOM",V.Local.sremovedUM.trim)</string>
        <string>				v.Local.spart.Set(v.Local.sRet)</string>
        <string />
        <string>			f.Intrinsic.Control.endif	</string>
        <string>'				F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.Local.sbomdesignation.Trim)</string>
        <string>'				F.Data.DataTable.SetValue("IMPORT",v.Local.i,"GSS_UOM",V.Local.sremovedUM.trim)	</string>
        <string>'				F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.sret.trim)</string>
        <string>'				v.local.spart.Set(v.Local.sret)</string>
        <string>			f.Intrinsic.Control.endif	</string>
        <string>	'		'if part type is hardware</string>
        <string>		f.Intrinsic.Control.ElseIf(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"HARDWARE")</string>
        <string>	''		'check to see if that BOM already exists if so populate the second grid</string>
        <string>			f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.sballooncallout.Trim,v.Local.ssql)</string>
        <string>			F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,&lt;&gt;,True)</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.local.sballooncallout.trim)</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.sballooncallout.trim)	</string>
        <string />
        <string>				v.Local.spart.set(v.Local.sballooncallout.Trim)</string>
        <string>				f.ODBC.con!rst.Close</string>
        <string>			f.Intrinsic.Control.Else</string>
        <string>				f.ODBC.con!rst.Close</string>
        <string>				'check to see if the part has already been made</string>
        <string>				f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).ALREADYMADE.fieldvaltrim,&lt;&gt;,"MADE")	</string>
        <string>					'query to see if that part is listed as an extra desc </string>
        <string>					f.Intrinsic.String.Build("Select top 1 PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.Local.sballooncallout.Trim,v.Local.stextsql)</string>
        <string>					f.ODBC.Connection!con.ExecuteAndReturn(v.Local.stextsql,v.Local.sRet)</string>
        <string>					f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")			</string>
        <string>		'				'check to see if that part already exists in inventory</string>
        <string>						f.Intrinsic.String.Build("Select PART from V_INVENTORY_MSTR where PART = '{0}'",v.Local.sballooncallout.Trim,v.Local.ssql)</string>
        <string>						F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)</string>
        <string>						F.Intrinsic.Control.If(V.Local.sRet.Trim,&lt;&gt;,"")</string>
        <string>							F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.local.sballooncallout.trim)</string>
        <string>							F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.sballooncallout.trim)</string>
        <string>							v.Local.spart.set(v.Local.sballooncallout.Trim)</string>
        <string>						f.Intrinsic.Control.Else</string>
        <string>							'get the last filler for auto generated parts and add 1 to it plus the prefix</string>
        <string>						f.Intrinsic.String.Build("Select F_LONG FROM OP_HEADER where ID = '{0}' and SEQUENCE = '{1}'","400460","0002",v.Local.sfillersql)</string>
        <string>						F.ODBC.Connection!con.OpenLocalRecordsetRW("rst1",V.Local.sfillersql)</string>
        <string>						F.Intrinsic.Control.If(V.ODBC.con!rst1.EOF,=,False)</string>
        <string>							v.Local.ifiller.Set(v.ODBC.con!rst1.FieldValTrim!F_LONG)</string>
        <string>							f.Intrinsic.Math.Add(v.Local.ifiller,1,v.Local.sfiller)</string>
        <string>							f.ODBC.con!rst1.Set!F_LONG(v.Local.sfiller)</string>
        <string>							f.ODBC.con!rst1.Update</string>
        <string>						f.Intrinsic.Control.EndIf</string>
        <string>						f.ODBC.con!rst1.Close</string>
        <string>						'add the prefix</string>
        <string>						f.Intrinsic.String.Build("{0}{1}",v.Global.sprefix.Trim,v.Local.sfiller,v.Local.spart)</string>
        <string>						f.Intrinsic.String.GSSPartString(v.Local.spart.Trim,v.Local.srev.Trim,v.Local.spart)</string>
        <string>						F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.spart.trim)</string>
        <string>						F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.local.sballooncallout.trim)</string>
        <string>						f.Data.DataTable.SetValue("IMPORT",v.Local.i,"Color","Y")	</string>
        <string>						f.Data.DataTable.SetValue("IMPORT",v.Local.i,"ALREADYMADE","MADE")</string>
        <string />
        <string>						f.Intrinsic.Control.endif</string>
        <string>						'before we add to the batch make sure the part isn't already listed</string>
        <string>						f.Intrinsic.String.Build("GSS_DESCRIPTION = '{0}'",v.DataTable.IMPORT(v.Local.i).GSS_DESCRIPTION.fieldvaltrim,v.Local.sexp)</string>
        <string>						'make sure there are no new custom parts being created for the same extra desc</string>
        <string>						f.Data.DataTable.Select("IMPORT",v.Local.sexp.trim,v.Local.sret)</string>
        <string>					'	'split the ret</string>
        <string>						f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)</string>
        <string>						f.Intrinsic.Control.If(v.Local.sret.UBound,&gt;,0)</string>
        <string>					'		'loop through the return to get the ordinals and set the parts</string>
        <string>							f.Intrinsic.Control.For(v.Local.iloop,0,v.Local.sret.UBound,1)</string>
        <string>					'			'if its the first loop around set the part</string>
        <string>								f.Intrinsic.Control.If(v.Local.iloop,=,0)</string>
        <string>									v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>									v.Local.sfirstpart.Set(v.datatable.IMPORT(v.Local.iret).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>									v.Local.syeller.Set(v.datatable.IMPORT(v.Local.iret).Color.fieldvaltrim)</string>
        <string>									f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>									F.Data.DataTable.SetValue("Import",V.Local.iret,"GSS_EXTRA_DESC",v.local.sballooncallout.trim)</string>
        <string>								f.Intrinsic.Control.Else</string>
        <string>									v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>									f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"GSS_PART_NUMBER",v.local.sfirstpart)</string>
        <string>									f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"Color",v.Local.syeller)</string>
        <string>									f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>									F.Data.DataTable.SetValue("Import",V.Local.iret,"GSS_EXTRA_DESC",v.local.sballooncallout.trim)</string>
        <string />
        <string>								f.Intrinsic.Control.EndIf</string>
        <string>							f.Intrinsic.Control.Next(v.local.iloop)</string>
        <string>						f.Intrinsic.Control.EndIf			</string>
        <string />
        <string>					f.Intrinsic.Control.Else</string>
        <string>						F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_EXTRA_DESC",v.local.sballooncallout.trim)</string>
        <string>						F.Data.DataTable.SetValue("Import",V.Local.i,"GSS_PART_NUMBER",v.local.sret.trim)</string>
        <string>						v.Local.spart.Set(v.Local.sRet)</string>
        <string>					f.Intrinsic.Control.EndIf</string>
        <string>					'add the part to the batch	</string>
        <string>					f.Global.Inventory.AddPartToBatch(v.Local.spart.Trim,"EA",v.Local.sdesc.Trim,"","06",v.Local.ssource.Trim,"","","0","NOMAINT")	</string>
        <string>				f.Intrinsic.Control.Else</string>
        <string />
        <string />
        <string>				f.Intrinsic.Control.endif</string>
        <string>			f.Intrinsic.Control.endif</string>
        <string>	'		'if the part exists set the info with supplier part</string>
        <string>'			f.Intrinsic.Control.If(v.Local.i,&gt;,0)</string>
        <string>'				F.Data.DataTable.SetValue("Import",v.Local.i,"GSS_PART_NUMBER",v.local.spart.trim)</string>
        <string>'				F.Data.DataTable.SetValue("Import",v.Local.i,"GSS_EXTRA_DESC",v.local.sballooncallout.trim)</string>
        <string>'				F.Data.DataTable.SetValue("Import",v.Local.i,"Color","Y")	</string>
        <string>'			f.Intrinsic.Control.Else</string>
        <string>'				F.Data.DataTable.SetValue("Import",0,"GSS_PART_NUMBER",v.local.spart.trim)</string>
        <string>'				F.Data.DataTable.SetValue("Import",0,"GSS_EXTRA_DESC",v.local.sballooncallout.Trim)</string>
        <string>'				F.Data.DataTable.SetValue("Import",0,"Color","Y")</string>
        <string>'			f.Intrinsic.Control.EndIf</string>
        <string>		f.Intrinsic.Control.EndIf</string>
        <string>		f.Intrinsic.String.Replace(v.Local.spart,v.Local.srev,"",v.Local.spart)</string>
        <string />
        <string>		f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,&lt;&gt;,"MODIFIED")</string>
        <string>			f.Intrinsic.Control.If(v.Local.i,&gt;,0)	</string>
        <string>				f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,&lt;&gt;,"ASSEMBLY")</string>
        <string>					F.Data.DataTable.AddRow("UPLOAD","PARENT",V.Local.sparentpart.Trim,"SEQUENCE",v.Local.ssequence,"PART",v.Local.spart.trim,"UM",v.Local.sum,"DESC",v.Local.sdesc.Trim,"REV",v.Local.srev.Trim,"CATEGORY",v.Local.scategory,"SOURCE",v.Local.ssource.Trim,"COUNT",v.Local.fcount)</string>
        <string>				f.Intrinsic.control.EndIf</string>
        <string>				'write the line for the upload</string>
        <string>			f.Intrinsic.Control.Else</string>
        <string>				f.Intrinsic.Control.If(v.Local.i,=,0)</string>
        <string>					F.Data.DataTable.SetValue("UPLOAD",0,"PARENT",V.Local.sparentpart)</string>
        <string>					F.Data.DataTable.SetValue("UPLOAD",0,"SEQUENCE",V.Local.ssequence)</string>
        <string>					f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).GSS_PART_TYPE.fieldvaltrim,=,"ASSEMBLY")</string>
        <string>						f.Intrinsic.Control.If(v.Local.spart,&lt;&gt;,v.Local.sfilename)</string>
        <string>							f.data.DataTable.SetValue("UPLOAD",0,"PART",V.Local.sfilename)</string>
        <string>						f.Intrinsic.Control.Else</string>
        <string>							f.data.DataTable.SetValue("UPLOAD",0,"PART",V.Local.spart)	</string>
        <string>						f.Intrinsic.control.EndIf</string>
        <string>					f.Intrinsic.Control.Else</string>
        <string>						f.data.DataTable.SetValue("UPLOAD",0,"PART",V.Local.spart)</string>
        <string>					f.Intrinsic.Control.EndIf</string>
        <string>					F.Data.DataTable.SetValue("UPLOAD",0,"UM",V.Local.sum)</string>
        <string>					F.Data.DataTable.SetValue("UPLOAD",0,"DESC",V.Local.sdesc)</string>
        <string>					F.Data.DataTable.SetValue("UPLOAD",0,"REV",V.Local.srev)</string>
        <string>					F.Data.DataTable.SetValue("UPLOAD",0,"CATEGORY",v.Local.scategory)</string>
        <string>					F.Data.DataTable.SetValue("UPLOAD",0,"SOURCE",V.Local.ssource)	</string>
        <string>					F.Data.DataTable.SetValue("UPLOAD",0,"COUNT",V.Local.fcount)	</string>
        <string>				f.Intrinsic.Control.endif		</string>
        <string>			f.Intrinsic.Control.endif	</string>
        <string>		f.Intrinsic.Control.EndIf</string>
        <string>	'	clear the filler variables</string>
        <string>		v.Local.sfillersql.Set("")</string>
        <string>		v.Local.ifiller.Set(0)</string>
        <string>		v.Local.sparentpartstring.Set("")</string>
        <string>		v.Local.fcount.Set(0)</string>
        <string>	f.Intrinsic.Control.Else</string>
        <string>		v.Local.bismod.Set(false)</string>
        <string>	f.Intrinsic.Control.EndIf</string>
        <string>f.Intrinsic.Control.Next(v.Local.i)</string>
        <string />
        <string>'set the upload enabled as false</string>
        <string>gui.Form.cmdUpload.Enabled(false)</string>
        <string>'check to see if the upload button should be allowed or not</string>
        <string>f.Intrinsic.Control.If(v.Local.ballowupload,=,False)</string>
        <string>	gui.Form.cmdUpload.Enabled(False)</string>
        <string>f.Intrinsic.Control.Else</string>
        <string>	gui.Form.cmdUpload.Enabled(True)</string>
        <string>f.Intrinsic.Control.endif</string>
        <string />
        <string>''close wait dialog</string>
        <string>'f.Intrinsic.UI.CloseWaitDialog</string>
        <string>''make the form visible</string>
        <string>'gui.Form..Visible(true)</string>
        <string />
        <string>f.Intrinsic.Control.CallSub(loadscreenwithnothingingss)</string>
        <string>'colors with nothing in GSS</string>
        <string>f.Intrinsic.Control.CallSub(colorswithnothingingss)</string>
        <string>'close wait dialog</string>
        <string>f.Intrinsic.UI.CloseWaitDialog</string>
        <string>'make the form visible</string>
        <string>gui.Form..Visible(true)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("LoadWithNothingInGSS_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.LoadWithNothingInGSS.End</string>
        <string />
        <string>Program.Sub.ASSEMBLY.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("ASSEMBLY_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>v.Local.ssql.Declare(string)</string>
        <string>v.Local.spart.Declare(String)</string>
        <string>v.Local.sfilepath.Declare(string)</string>
        <string>v.Local.sretaddbom.Declare(string)</string>
        <string>v.Local.bexists.declare(boolean)</string>
        <string>v.Local.bdecimal.Declare(boolean)</string>
        <string>v.Local.sfile.Declare(String)</string>
        <string>v.Local.sparams.Declare(string)</string>
        <string>v.Local.sparttype.Declare(String)</string>
        <string>v.Local.iassemblyloop.declare(long)</string>
        <string>v.Local.sadditionalbom.Declare(string)</string>
        <string>v.Local.itest.Declare(long)</string>
        <string>v.Local.itest.Set(0)</string>
        <string>v.Local.sdesc.Declare(string)</string>
        <string>v.Local.sline.Declare(String)</string>
        <string>v.Local.ssource.Declare(String)</string>
        <string>v.Local.sparentpart.Declare(string)</string>
        <string>v.Local.sspare.Declare(String)</string>
        <string>v.Local.slevel.Declare(string)</string>
        <string>v.Local.sfilename.Declare(string)</string>
        <string>v.Local.sextradesc.Declare(String)</string>
        <string>v.Local.scount.Declare(string)</string>
        <string>v.Local.scount2.Declare(String)</string>
        <string>v.Local.fcount.declare(String)</string>
        <string>v.Local.ssequence.Declare(string)</string>
        <string>v.Local.srev.Declare(String)</string>
        <string>v.Local.ssupplier.Declare(STring)</string>
        <string>v.Local.ssupplierpart.Declare(String)</string>
        <string>v.Local.svendor.Declare(String)</string>
        <string>v.Local.sballooncallout.Declare(String)</string>
        <string>v.Local.sbomdesignated.Declare(STring)</string>
        <string>v.Local.sum.declare(string)</string>
        <string>v.Local.scount1.declare(String)</string>
        <string>v.Local.i.Declare(long)</string>
        <string>v.Local.stest.Declare(string)</string>
        <string>v.Local.itest2.Declare(long)</string>
        <string>v.Local.sreturn.Declare(String)</string>
        <string>V.Local.IUploadrows.Declare(long)</string>
        <string>v.Local.ssourcesql.Declare(String)</string>
        <string>v.Local.sfillersql.Declare(String)</string>
        <string>v.Local.slast2.Declare(String)</string>
        <string>v.Local.screatedpart.Declare(String)</string>
        <string>v.Local.sbomdefinedcount.declare(string)</string>
        <string>v.Local.sfiller.Declare(String)</string>
        <string>v.Local.ifiller.Declare(long)</string>
        <string>v.Local.sexp.Declare(string)</string>
        <string>v.Local.syeller.Declare(string)</string>
        <string>v.Local.iloop.declare(long)</string>
        <string>v.Local.iret.Declare(long)</string>
        <string>v.Local.sret.Declare(string)</string>
        <string>v.Local.sfirstpart.Declare(string)</string>
        <string>V.Local.sExtradescPart.Declare(String)</string>
        <string>v.Local.iuploadcount.Declare(long,0)</string>
        <string>v.Local.scat.Declare(string)</string>
        <string>v.Local.itemplate.Declare(long,0)</string>
        <string>v.Local.sbomseq.Declare(string)</string>
        <string>v.Local.fcountgss.Declare(float)</string>
        <string>v.Local.sparentpartcombo.Declare(String)</string>
        <string />
        <string>v.Local.spart.Set(v.datatable.import(v.Global.iassembly).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>'loop through the assembly and see if there is already a BOM in GSS if so, explode and show</string>
        <string />
        <string>'check to see if that BOM already exists if so populate the second grid</string>
        <string>F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"GSS_EXTRA_DESC",v.datatable.import(v.Global.iassembly).GSS_FILE_NAME.fieldvaltrim)</string>
        <string>f.Intrinsic.String.Build("Select * from V_BOM_MSTR where PARENT = '{0}'",v.Local.spart,v.Local.ssql)</string>
        <string>F.ODBC.Connection!con.OpenLocalRecordsetRO("rstbom",V.Local.sSQL)</string>
        <string>F.Intrinsic.Control.If(V.ODBC.con!rstbom.EOF,&lt;&gt;,True)</string>
        <string>	'build the file to explode</string>
        <string>	F.Intrinsic.String.Build("{0}\BOM{1}",V.System.Temp,V.Caller.Terminal,V.Local.sFilePath)</string>
        <string>	F.Intrinsic.String.Build("0{0}{1}{0}{2}",V.Ambient.Tab,V.Local.spart.Trim,v.Local.sFilePath,V.Local.sParams)</string>
        <string>	F.Intrinsic.File.String2File(V.Local.sFilePath,V.Local.sParams)</string>
        <string>	F.Global.General.CallWrapperSync(410000,V.Local.sFilePath)</string>
        <string>	F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>	v.Local.itest.Set(v.dataTable.TEMPLATE.RowCount--)</string>
        <string>	'check if the file exists</string>
        <string>	F.Intrinsic.Control.If(V.Local.bExists,=,True)</string>
        <string>		F.Intrinsic.File.FiletoStringArray(V.Local.sFilePath,V.Ambient.Tab,V.Local.sretaddbom)</string>
        <string>		V.Local.sretaddbom.RedimPreserve(0,3)</string>
        <string>		F.Intrinsic.File.GetFileNameFromFQN(V.Local.sRetaddbom(3),V.Local.sFile.Trim)</string>
        <string>		F.Intrinsic.String.Split(V.Local.sFile," ",V.Local.sFile)</string>
        <string>		F.Intrinsic.String.Build("{0}\{1}",V.System.Temp,V.Local.sFile(0).Trim,V.Local.sFilePath)</string>
        <string>		F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>		'check if the file exists</string>
        <string>		F.Intrinsic.Control.If(V.Local.bExists,=,true)		</string>
        <string>			'load it to a string</string>
        <string>			F.Intrinsic.File.File2String(V.Local.sFilePath,V.Local.sretaddbom)</string>
        <string>			f.Intrinsic.String.Replace(v.Local.sretaddbom,"*","",v.Local.sretaddbom)</string>
        <string>			'split the return</string>
        <string>			f.Intrinsic.String.Split(v.Local.sretaddbom.Trim,v.Ambient.NewLine,v.Local.sretaddbom)</string>
        <string>			v.Local.itest2.Set(v.Local.sretaddbom.UBound)</string>
        <string>			f.Intrinsic.Math.Sub(v.Local.itest2,1,v.Local.itest2)</string>
        <string>				F.Intrinsic.Control.For(v.Local.iassemblyloop,7,v.Local.itest2,1)</string>
        <string>				f.Intrinsic.String.Split(v.Local.sretaddbom(v.Local.iassemblyloop),"|~|",v.Local.sline)				</string>
        <string>				f.Intrinsic.String.Replace(v.Local.sline(2)," ","",v.Local.slevel)</string>
        <string>				'query for the part</string>
        <string>				f.Intrinsic.Control.If(v.Local.itest,&gt;,0)</string>
        <string>                    'update count with the count from the Bom Master</string>
        <string>                    F.Intrinsic.Control.If(v.DataTable.Import(v.Local.i).GSS_Sequence!FieldValtrim, !=, "")</string>
        <string>                        F.Intrinsic.String.Build("{0}00", v.DataTable.Import(v.Local.i).GSS_Sequence!FieldValtrim, v.Local.sBomSeq)</string>
        <string>                    F.Intrinsic.Control.Else</string>
        <string>                         v.Local.sbomseq.Set("0")</string>
        <string>                    F.Intrinsic.Control.EndIf</string>
        <string>                    F.Intrinsic.String.Right(v.Local.sBomSeq, 4, v.Local.sBomSeq)</string>
        <string>                    F.Intrinsic.String.GSSPartString(v.Local.sparentpart.Trim, v.Local.srev.Trim, v.Local.sparentpartCombo)</string>
        <string>                    F.Intrinsic.String.Build("Select Quantity from Bom_Mstr where Part = '{0}' and Parent = '{1}' and Sequence_Bom = '{2}'", v.Local.sPart.Trim, v.Local.sparentpartCombo.Trim, v.Local.sBomSeq,v.Local.ssql)</string>
        <string>                    F.ODBC.Connection!con.OpenLocalRecordsetRO("rstQty", v.Local.ssql)</string>
        <string>                    F.Intrinsic.Control.If(v.ODBC.con!rstQty.EOF, =, False)</string>
        <string>                        v.Local.fcountGSS.Set(v.ODBC.con!rstQty.FieldValFloat!Quantity)</string>
        <string>                    F.Intrinsic.Control.EndIf</string>
        <string>                    F.ODBC.con!rstQty.Close</string>
        <string>                    F.Intrinsic.String.Format(v.Local.fcountGSS, "0.####", v.Local.fcountGSS)</string>
        <string>                    F.Intrinsic.Control.If(v.Local.fcountGSS, =, 0)</string>
        <string>                       v.Local.fcountGSS.Set(v.Local.fcount)</string>
        <string>                    Function.Intrinsic.Control.EndIf</string>
        <string>					f.Intrinsic.Control.If(v.local.sline(2).trim,&lt;&gt;,"")</string>
        <string>					f.Intrinsic.String.Right(v.Local.sline(2),3,v.Local.srev)</string>
        <string>					f.Intrinsic.String.Left(v.Local.sline(2),17,v.Local.spart)</string>
        <string>						f.Intrinsic.String.Right(v.Local.sline(2),3,v.Local.srev)</string>
        <string>						F.Data.DataTable.AddRow("UPLOAD","PART",V.Local.spart.Trim,"COUNT",v.Local.sline(6),"CATEGORY",v.Local.sline(4),"PARENT",v.Local.sline(12).trim,"SEQUENCE",v.Local.sline(1),"DESC",v.Local.sline(3).Trim,"REV",v.Local.srev.Trim,"UM","","SOURCE","")</string>
        <string>						F.Data.DataTable.AddRow("TEMPLATE","GSS_CATEGORY",v.Local.sline(4),"GSS_PART_NUMBER",V.Local.spart,"GSS_COUNT",v.Local.fcountgss,"GSS_PARENT",V.Local.sline(12),"GSS_LEVEL",V.Local.sline(1),"GSS_DESCRIPTION",v.Local.sline(3),"GSS_REVISION",v.Local.srev,"GSS_PART_TYPE",v.datatable.IMPORT(v.Global.iassembly).GSS_PART_TYPE.fieldvaltrim,"Color","P","GSS_EXTRA_DESC","Already in GSS")</string>
        <string>					f.Intrinsic.Control.EndIf</string>
        <string>				f.Intrinsic.Control.Else</string>
        <string>					'format the sequence</string>
        <string>					f.Intrinsic.Control.If(v.Local.sline(1).Trim,=,"")</string>
        <string>						v.Local.ssequence.set("0000")</string>
        <string>					f.Intrinsic.Control.else</string>
        <string>						F.Intrinsic.String.LPad(V.Local.sline(1).trim,"0",4,V.Local.ssequence)</string>
        <string>					f.Intrinsic.Control.EndIf</string>
        <string>					'make sure there was a return and add info to template data  table</string>
        <string>					f.Intrinsic.Control.If(v.Local.sline(2).trim,&lt;&gt;,"")</string>
        <string>						f.Intrinsic.String.Right(v.Local.sline(2),3,v.Local.srev)</string>
        <string>						f.Intrinsic.String.Left(v.Local.sline(2),17,v.Local.spart)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_PART_NUMBER",v.Local.spart)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_COUNT",V.Local.sline(6))</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_LEVEL",V.Local.sline(1))</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_DESCRIPTION",V.Local.sline(3))</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_PARENT",V.Local.sline(12))</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_UOM",V.Local.sum)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_REVISION",v.Local.srev)	</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"Color","P")		</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_EXTRA_DESC","Already in GSS")</string>
        <string>						'get the source</string>
        <string>						F.Intrinsic.String.Build("select CODE_SOURCE from V_INVENTORY_MST2 where Part = '{0}'",v.Local.spart.Trim,V.Local.sSQL)</string>
        <string>						F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sReturn)</string>
        <string>						F.Data.DataTable.SetValue("UPLOAD",V.Local.itest,"SOURCE",v.Local.sreturn)</string>
        <string>						F.Data.DataTable.SetValue("UPLOAD",0,"PARENT",V.Global.sparentpart)</string>
        <string>						F.Data.DataTable.SetValue("UPLOAD",0,"SEQUENCE",V.Local.sline(1))</string>
        <string>						f.data.DataTable.SetValue("UPLOAD",0,"PART",V.Local.spart)</string>
        <string>						F.Data.DataTable.SetValue("UPLOAD",0,"DESC",V.Local.sline(3))</string>
        <string>						F.Data.DataTable.SetValue("UPLOAD",0,"REV",V.Local.srev)</string>
        <string>						F.Data.DataTable.SetValue("UPLOAD",0,"CATEGORY",v.Local.scat)</string>
        <string>						F.Data.DataTable.SetValue("UPLOAD",0,"COUNT",v.Local.sline(6))</string>
        <string>						f.Intrinsic.Math.Add(v.Local.itest,1,v.Local.itest)</string>
        <string>					f.Intrinsic.Control.EndIf</string>
        <string>				f.Intrinsic.Control.EndIf</string>
        <string>			f.Intrinsic.Control.Next(v.Local.iassemblyloop)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		f.Intrinsic.File.DeleteFile(v.Local.sFilePath)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>	f.ODBC.con!rstbom.Close</string>
        <string>f.Intrinsic.Control.Else</string>
        <string>	f.ODBC.con!rstbom.Close</string>
        <string>	v.Local.sparentpart.Set(v.DataTable.import(v.Global.iassembly).GSS_PARENT.fieldvaltrim)</string>
        <string>	'format the parent</string>
        <string>	F.Intrinsic.String.RPad(V.Local.sparentpart," ",20,v.Local.sparentpart)</string>
        <string>	'set and format the count</string>
        <string>	v.Local.scount.Set(v.DataTable.import(v.Global.iassembly).GSS_COUNT.fieldvaltrim)</string>
        <string>	v.Local.sfilename.Set(v.DataTable.import(v.Global.iassembly).GSS_FILE_NAME.fieldvaltrim)</string>
        <string>	'check to see if there is a decimal in the count</string>
        <string>	f.Intrinsic.String.IsInString(v.Local.scount,".",true,v.Local.bdecimal)</string>
        <string>'	f.Intrinsic.Control.If(v.Local.bdecimal,=,True)</string>
        <string>'		'split on the dec</string>
        <string>'		f.Intrinsic.String.Split(v.Local.scount,".",v.Local.scount)</string>
        <string>'		F.Intrinsic.String.RPad(V.Local.scount2,"0",4,V.Local.sCount2)</string>
        <string>'		f.Intrinsic.String.Build("{0}.{1}",v.Local.scount1,v.Local.scount2,v.Local.scount)</string>
        <string>'	f.Intrinsic.Control.Else</string>
        <string>'		f.Intrinsic.String.Build("{0}.{1}",v.Local.scount,"0000",v.Local.scount)</string>
        <string>'	f.Intrinsic.Control.EndIf</string>
        <string>	'set the spare</string>
        <string>	v.Local.sspare.Set(v.DataTable.import(v.global.iassembly).GSS_SPARE.fieldvaltrim)</string>
        <string>	'set the level</string>
        <string>	v.Local.slevel.Set(v.DataTable.import(v.global.iassembly).GSS_LEVEL.fieldvaltrim)</string>
        <string>	F.Data.DataTable.SetValue("Import",v.global.iassembly,"GSS_COUNT",V.Local.scount)</string>
        <string>	'set the extra desc</string>
        <string>	v.Local.sextradesc.Set(v.DataTable.import(v.global.iassembly).GSS_EXTRA_DESC.fieldvaltrim)</string>
        <string>	v.Local.fcount.Set(v.Local.scount)</string>
        <string>	'get the part and desc and format</string>
        <string>	v.Local.sdesc.Set(v.datatable.import(v.global.iassembly).GSS_DESCRIPTION.fieldvaltrim)</string>
        <string>	F.Intrinsic.String.Left(V.Local.sdesc,30,V.Local.sdesc)</string>
        <string>	F.Intrinsic.String.RPad(V.Local.sdesc," ",30,V.Local.sdesc)</string>
        <string>	'get the part number and format</string>
        <string>	v.Local.spart.Set(v.datatable.import(v.global.iassembly).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>	F.Intrinsic.String.RPad(V.Local.spart," ",20,V.Local.spart)</string>
        <string>'	F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"GSS_EXTRA_DESC",v.Local.sfilename)</string>
        <string>	F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"GSS_SEQUENCE",v.local.ssequence.trim)	</string>
        <string>	F.Intrinsic.String.LPad(V.Local.ssequence,"0",4,V.Local.ssequence)</string>
        <string>	'get the rev and location and UM and source code</string>
        <string>	v.Local.srev.Set(v.datatable.import(v.global.iassembly).GSS_REVISION.fieldvaltrim)</string>
        <string>'	F.Intrinsic.String.LPad(V.Local.srev," ",3,V.Local.srev)</string>
        <string>	'UM</string>
        <string>	v.Local.sUM.Set(v.datatable.import(v.global.iassembly).GSS_UOM.fieldvaltrim)</string>
        <string>	'check the type to see if you need to get the right 2 characters of the Um</string>
        <string>	'if party type is custom</string>
        <string>	f.Intrinsic.Control.If(v.datatable.IMPORT(v.global.iassembly).GSS_PART_TYPE.fieldvaltrim,=,"BOM DEFINED")</string>
        <string>		'set the UM</string>
        <string>		v.Local.sum.Set(v.DataTable.import(v.global.iassembly).GSS_LENGTH.fieldvaltrim)	</string>
        <string>		f.Intrinsic.String.Right(v.Local.sum,2,v.Local.sum)</string>
        <string>	f.Intrinsic.Control.ElseIf(v.datatable.IMPORT(v.global.iassembly).GSS_PART_TYPE.fieldvaltrim,=,"ASSEMBLY")</string>
        <string>		'set the UM</string>
        <string>		v.Local.sum.Set(v.DataTable.import(v.global.iassembly).GSS_UOM.fieldvaltrim)</string>
        <string>		f.Intrinsic.String.Right(v.Local.sum,2,v.Local.sum)</string>
        <string>	f.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.String.RPad(V.Local.sum," ",2,V.Local.sum)</string>
        <string>	'Source</string>
        <string>	v.Local.ssource.Set(v.datatable.import(v.global.iassembly).GSS_SOURCE_CODE.fieldvaltrim)</string>
        <string>	F.Intrinsic.String.RPad(V.Local.ssource," ",1,V.Local.ssource)</string>
        <string>	'Supplier part, supplier, vendor, sballooncallout, file, bom designation</string>
        <string>	v.Local.ssupplierpart.Set(v.datatable.import(v.global.iassembly).GSS_SUPPLIER_PART_NUMBER.fieldvaltrim)</string>
        <string>	v.Local.ssupplier.Set(v.datatable.import(v.global.iassembly).GSS_SUPPLIER.fieldvaltrim)</string>
        <string>	v.Local.svendor.Set(v.datatable.import(v.global.iassembly).GSS_SUPPLIER.fieldvaltrim)</string>
        <string>	v.Local.sballooncallout.Set(v.datatable.import(v.global.iassembly).GSS_BALLOON_CALLOUT.fieldvaltrim)</string>
        <string>	v.Local.sfilename.Set(v.datatable.import(v.Global.iassembly).GSS_FILE_NAME.fieldvaltrim)</string>
        <string>	'get the part number and format</string>
        <string>	v.Local.spart.Set(v.datatable.IMPORT(v.global.iassembly).GSS_PART_NUMBER.fieldvaltrim)	</string>
        <string>	v.Local.scat.Set(v.datatable.IMPORT(v.global.iassembly).GSS_CATEGORY.fieldvaltrim)	</string>
        <string>	v.Local.itest.Set(v.dataTable.Upload.RowCount--)</string>
        <string>	v.Local.itemplate.Set(v.dataTable.TEMPLATE.RowCount--)</string>
        <string>	v.Local.stextsql.Declare(string)</string>
        <string />
        <string>	'query to see if that part is listed as an extra desc </string>
        <string>	f.Intrinsic.String.Build("Select Top 1 PART from INV_EXTRA_TEXT where TEXT = '{0}'",v.Local.spart.Trim,v.Local.stextsql)</string>
        <string>	f.ODBC.Connection!con.ExecuteAndReturn(v.Local.stextsql,v.Local.sRet)</string>
        <string>	f.Intrinsic.Control.If(v.Local.sRet.Trim,&lt;&gt;,"")</string>
        <string>		F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"GSS_EXTRA_DESC",v.local.sfilename.trim)</string>
        <string>		F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"GSS_PART_NUMBER",v.Local.sret)</string>
        <string>'		F.Data.DataTable.SetValue("TEMPLATE",v.global.iassembly,"GSS_EXTRA_DESC",v.local.sfilename.trim)</string>
        <string>'		F.Data.DataTable.SetValue("TEMPLATE",v.global.iassembly,"GSS_PART_NUMBER",v.Local.sret)	</string>
        <string>'		F.Data.DataTable.SetValue("TEMPLATE",v.global.iassembly,"ALREADYMADE","MADE")</string>
        <string>'		F.Data.DataTable.SetValue("TEMPLATE",v.global.iassembly,"COLOR","P")</string>
        <string />
        <string>	f.Intrinsic.Control.EndIf</string>
        <string />
        <string>	f.Intrinsic.Control.If(v.Global.iassembly,&gt;,0)</string>
        <string>		f.Intrinsic.Control.If(v.Local.ssequence,=,"0000")</string>
        <string>			v.Local.ssequence.Set("0001")</string>
        <string>		f.Intrinsic.Control.EndIf</string>
        <string>	f.Intrinsic.Control.endif</string>
        <string>	'check the part against the file name</string>
        <string>	f.Intrinsic.Control.If(v.datatable.IMPORT(v.global.iassembly).GSS_PART_NUMBER.fieldvaltrim,&lt;&gt;,v.Local.sfilename.Trim)</string>
        <string>		v.Local.spart.Set(v.Local.sfilename.trim)</string>
        <string>	f.Intrinsic.Control.EndIf</string>
        <string>'	f.Intrinsic.String.GSSPartString(v.Local.spart,v.Local.srev,v.Local.spart)</string>
        <string>	'check to see if the part has already been made</string>
        <string>	f.Intrinsic.Control.If(v.datatable.IMPORT(v.Global.iassembly).ALREADYMADE.fieldvaltrim,&lt;&gt;,"MADE")</string>
        <string />
        <string>		f.Intrinsic.Control.If(v.Local.spart.trim,&lt;&gt;,v.Local.sfilename.Trim)</string>
        <string>			v.Local.spart.Set(v.datatable.IMPORT(v.global.iassembly).GSS_FILE_NAME.fieldvaltrim)</string>
        <string>			F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"GSS_EXTRA_DESC",v.Local.spart)</string>
        <string>			f.Intrinsic.String.GSSPartString(v.Local.spart,v.Local.srev,v.Local.spart)</string>
        <string>			F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"GSS_PART_NUMBER",v.Local.spart)</string>
        <string>			F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"Color","Y")</string>
        <string>			F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"ALREADYMADE","MADE")	</string>
        <string />
        <string>			v.Local.itest.Set(v.dataTable.Upload.RowCount--)</string>
        <string>			f.Intrinsic.Control.If(v.Local.itest,&gt;,0)</string>
        <string>				F.Data.DataTable.AddRow("UPLOAD","PARENT",V.Local.sparentpart.Trim,"SEQUENCE",v.Local.ssequence,"PART",v.Local.spart.trim,"UM",v.Local.sum,"DESC",v.Local.sdesc.Trim,"REV",v.Local.srev.Trim,"CATEGORY",v.Local.scat,"SOURCE",v.Local.ssource.Trim,"COUNT",v.Local.scount)	</string>
        <string>				f.Intrinsic.Control.If(v.Global.isbom,=,True)</string>
        <string>					v.Local.itemplate.Set(v.DataTable.TEMPLATE.rowcount--)</string>
        <string>					f.Intrinsic.Control.If(v.Local.itemplate,&gt;,0)</string>
        <string>						F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.spart.Trim,"GSS_COUNT",v.Local.fcount,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Global.iassembly).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"COlor","Y")</string>
        <string>					f.Intrinsic.Control.Else</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_PART_NUMBER",V.Local.spart.trim)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_SEQUENCE",V.Local.ssequence)		</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_CATEGORY",V.Local.scat)			</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_COUNT",V.Local.fcount)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_PARENT",V.Local.sparentpart.trim)	</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_LEVEL",V.Local.slevel)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_DESCRIPTION","PLACE HOLDER")</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_REVISION",V.Local.srev)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_UOM",V.Local.sum)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_SOURCE_CODE",V.Local.ssource)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_PART_TYPE",v.datatable.IMPORT(v.Global.iassembly).GSS_PART_TYPE.fieldvaltrim)</string>
        <string>					f.Intrinsic.Control.EndIf</string>
        <string>				f.intrinsic.Control.EndIf</string>
        <string>				f.Global.Inventory.AddPartToBatch(v.Local.spart.Trim,"EA",v.Local.sdesc.Trim,"","11",v.Local.ssource,"","","0","NOMAINT")</string>
        <string>					f.Intrinsic.String.Build("GSS_DESCRIPTION = '{0}' and ALREADYMADE &lt;&gt; '{1}'",v.DataTable.IMPORT(v.Global.iassembly).GSS_DESCRIPTION.fieldvaltrim,"MADE",v.Local.sexp)</string>
        <string>					'make sure there are no new custom parts being created for the same extra desc</string>
        <string>					f.Data.DataTable.Select("IMPORT",v.Local.sexp.trim,v.Local.sret)</string>
        <string>				'	'split the ret</string>
        <string>					f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)</string>
        <string>					f.Intrinsic.Control.If(v.Local.sret.UBound,&gt;,0)</string>
        <string>				'		'loop through the return to get the ordinals and set the parts</string>
        <string>						f.Intrinsic.Control.For(v.Local.iloop,0,v.Local.sret.UBound,1)</string>
        <string>					'			'if its the first loop around set the part</string>
        <string>								f.Intrinsic.Control.If(v.Local.iloop,=,0)</string>
        <string>									v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>									f.Intrinsic.String.GSSPartString(v.Local.spart,v.Local.srev,v.Local.spart)</string>
        <string>									v.Local.sfirstpart.Set(v.Local.spart)</string>
        <string>									v.Local.syeller.Set(v.datatable.IMPORT(v.Local.iret).Color.fieldvaltrim)</string>
        <string>									f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>									F.Data.DataTable.SetValue("IMPORT",V.Local.iret,"GSS_EXTRA_DESC",v.local.sfilename.trim)</string>
        <string>								f.Intrinsic.Control.Else</string>
        <string>									v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>									f.Intrinsic.Control.If(v.DataTable.IMPORT(v.Local.iret).ALREADYMADE.fieldvaltrim,&lt;&gt;,"MADE")</string>
        <string>										f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"GSS_PART_NUMBER",v.local.sfirstpart)</string>
        <string>										f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"Color",v.Local.syeller)</string>
        <string>										f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>									f.Intrinsic.Control.EndIf</string>
        <string>	'								F.Data.DataTable.SetValue("IMPORT",V.Local.iret,"GSS_EXTRA_DESC",v.local.sfilename.trim)					</string>
        <string>								f.Intrinsic.Control.endif	</string>
        <string>						f.Intrinsic.Control.Next(v.local.iloop)</string>
        <string>					f.Intrinsic.Control.EndIf				</string>
        <string>				f.Intrinsic.control.EndIf</string>
        <string>		f.Intrinsic.Control.Else</string>
        <string>		'query to see if that part is in inventory</string>
        <string>		f.Intrinsic.String.Build("Select PART from  V_INVENTORY_MSTR where PART = '{0}'",v.Local.spart.Trim,v.Local.ssql)</string>
        <string>		F.ODBC.Connection!con.OpenLocalRecordsetRO("rsta",V.Local.sSQL)</string>
        <string>		F.Intrinsic.Control.If(V.ODBC.con!rsta.EOF,=,True)</string>
        <string>			'build the part number</string>
        <string>'			f.Intrinsic.String.GSSPartString(v.Local.sfilename.Trim,v.Local.srev.Trim,v.Local.spart)</string>
        <string>			F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"GSS_PART_NUMBER",v.Local.spart)</string>
        <string>			F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"GSS_EXTRA_DESC",v.Local.sfilename)</string>
        <string>			F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"Color","Y")		</string>
        <string>			F.Data.DataTable.SetValue("IMPORT",v.global.iassembly,"ALREADYMADE","MADE")	</string>
        <string />
        <string>			f.Intrinsic.Control.If(v.DataView.IMPORT!SELECTTEST.exists,=,True)</string>
        <string>				f.Data.DataView.Close("IMPORT","SELECTTEST")</string>
        <string>			f.Intrinsic.Control.EndIf</string>
        <string>			f.Intrinsic.Control.If(v.DataView.SELECTTESTDT!SELECTTESTVIEW.exists,=,True)</string>
        <string>				f.Data.DataView.Close("SELECTTESTDT","SELECTTESTVIEW")</string>
        <string>			f.Intrinsic.Control.EndIf</string>
        <string />
        <string>			v.Local.ivalue.Declare(long)</string>
        <string>			v.Local.itestloop.Declare(long)</string>
        <string>			v.local.ivalue.Set(v.Global.iassembly)</string>
        <string />
        <string>			f.Intrinsic.String.Build("Trim(GSS_FILE_NAME) = '{0}'",v.DataTable.IMPORT(v.Local.ivalue).GSS_PART_NUMBER!fieldvaltrim,v.Local.sexp)</string>
        <string>			'create the dataview</string>
        <string>			f.data.dataview.create("IMPORT","SELECTTEST",22,v.Local.sexp,"")</string>
        <string>'			f.Data.DataView.ToDataTable("IMPORT","SELECTTEST","SELECTTESTDT")</string>
        <string>'			f.Intrinsic.String.Build("Trim(ALREADYMADE) &lt;&gt; '{0}'","MADE",v.Local.sexp)	</string>
        <string>'			f.Data.DataView.Create("SELECTTESTDT","SELECTTESTVIEW",22,v.Local.sexp,"")</string>
        <string />
        <string>			'make sure there are no new custom parts being created for the same extra desc</string>
        <string>'			f.Data.DataTable.Select("IMPORT",v.Local.sexp.trim,v.Local.sret)</string>
        <string>			'	'split the ret</string>
        <string>'				f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)</string>
        <string>'				f.Intrinsic.Control.If(v.Local.sret.UBound,&gt;,0)</string>
        <string>				'loop through the return to get the ordinals and set the parts</string>
        <string>				f.Intrinsic.Control.For(v.Local.iloop,0,v.DataView.IMPORT!SELECTTEST.rowcount--,1)</string>
        <string>					f.Intrinsic.Control.If(v.DataView.import!SELECTTABLE(v.Local.iloop).ALREADYMADE!fieldvaltrim,&lt;&gt;,"MADE")</string>
        <string>						'if its the first loop around set the part</string>
        <string>						f.Intrinsic.Control.If(v.Local.iloop,=,0)</string>
        <string>'							v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>							f.Intrinsic.String.GSSPartString(v.Local.spart,v.Local.srev,v.Local.spart)</string>
        <string>							v.Local.sfirstpart.Set(v.Local.spart)</string>
        <string>							v.Local.syeller.Set(v.dataview.IMPORT!SELECTTEST(v.Local.iloop).Color.fieldvaltrim)</string>
        <string>							f.Data.DataView.SetValue("IMPORT","SELECTTEST",v.Local.iloop,"ALREADYMADE","MADE")</string>
        <string>							F.Data.Dataview.SetValue("IMPORT","SELECTTEST",V.Local.iloop,"GSS_EXTRA_DESC",v.local.sfilename.trim)</string>
        <string>							f.Data.Dataview.SetValue("IMPORT","SELECTTEST",v.Local.iloop,"GSS_PART_NUMBER",v.local.spart)			</string>
        <string>						f.Intrinsic.Control.Else</string>
        <string>'							v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>							f.Intrinsic.Control.If(v.DataView.IMPORT!SELECTTEST(v.Local.iloop).ALREADYMADE.fieldvaltrim,&lt;&gt;,"MADE")</string>
        <string>								f.Data.Dataview.SetValue("IMPORT","SELECTTEST",v.Local.iloop,"GSS_PART_NUMBER",v.local.sfirstpart)</string>
        <string>								f.Data.Dataview.SetValue("IMPORT","SELECTTEST",v.Local.iloop,"Color",v.Local.syeller)</string>
        <string>								f.Data.Dataview.SetValue("IMPORT","SELECTTEST",v.Local.iloop,"ALREADYMADE","MADE")</string>
        <string>							f.Intrinsic.Control.EndIf</string>
        <string>						f.Intrinsic.Control.endif							</string>
        <string>					f.Intrinsic.Control.endif	</string>
        <string>				f.Intrinsic.Control.Next(v.local.iloop)</string>
        <string>'			f.Intrinsic.Control.EndIf							</string>
        <string>'			</string>
        <string />
        <string />
        <string>			'if the part exists set the info with part that was created</string>
        <string>			v.Local.itest.Set(v.dataTable.Upload.RowCount--)</string>
        <string>			f.Intrinsic.Control.If(v.Local.itest,&gt;,0)</string>
        <string>				F.Data.DataTable.AddRow("UPLOAD","PARENT",V.Local.sparentpart.Trim,"SEQUENCE",v.Local.ssequence,"PART",v.Local.spart.trim,"UM",v.Local.sum,"DESC",v.Local.sdesc.Trim,"REV",v.Local.srev.Trim,"CATEGORY",v.Local.scat,"SOURCE",v.Local.ssource.Trim,"COUNT",v.Local.scount)	</string>
        <string>				f.Intrinsic.Control.If(v.Global.isbom,=,True)</string>
        <string>					v.Local.itemplate.Set(v.DataTable.TEMPLATE.rowcount--)</string>
        <string>					f.Intrinsic.Control.If(v.Local.itemplate,&gt;,0)</string>
        <string>						F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.spart.Trim,"GSS_COUNT",v.Local.fcount,"GSS_PARENT",v.Local.sparentpart.trim,"GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Global.iassembly).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"COlor","Y")</string>
        <string>					f.Intrinsic.Control.Else</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_PART_NUMBER",V.Local.spart.trim)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_SEQUENCE",V.Local.ssequence)		</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_CATEGORY",V.Local.scat)			</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_COUNT",V.Local.fcount)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_PARENT",V.Local.sparentpart.trim)	</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_LEVEL",V.Local.slevel)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_DESCRIPTION","PLACE HOLDER")</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_REVISION",V.Local.srev)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_UOM",V.Local.sum)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_SOURCE_CODE",V.Local.ssource)</string>
        <string>						F.Data.DataTable.SetValue("TEMPLATE",0,"GSS_PART_TYPE",v.datatable.IMPORT(v.Global.iassembly).GSS_PART_TYPE.fieldvaltrim)</string>
        <string>					f.Intrinsic.Control.EndIf</string>
        <string>				f.intrinsic.Control.EndIf</string>
        <string>				f.Global.Inventory.AddPartToBatch(v.Local.spart.Trim,"EA",v.Local.sdesc.Trim,"","11",v.Local.ssource,"","","0","NOMAINT")</string>
        <string />
        <string>		f.Intrinsic.Control.EndIf</string>
        <string />
        <string>	f.Intrinsic.Control.EndIf</string>
        <string>				f.Intrinsic.Control.If(v.Global.isbom,=,True)</string>
        <string />
        <string>				f.Intrinsic.String.Build("GSS_PART_NUMBER = '{0}'",v.DataTable.IMPORT(v.Global.iassembly).GSS_FILE_NAME.fieldvaltrim,v.Local.sexp)</string>
        <string>				'make sure there are no new custom parts being created for the same extra desc</string>
        <string>				f.Data.DataTable.Select("IMPORT",v.Local.sexp.trim,v.Local.sret)</string>
        <string>			'	'split the ret</string>
        <string>				f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)</string>
        <string>				f.Intrinsic.Control.If(v.Local.sret.UBound,&gt;,0)</string>
        <string>			'		'loop through the return to get the ordinals and set the parts</string>
        <string>					f.Intrinsic.Control.For(v.Local.iloop,0,v.Local.sret.UBound,1)</string>
        <string>			'			'if its the first loop around set the part</string>
        <string>						f.Intrinsic.Control.If(v.Local.iloop,=,0)</string>
        <string>							v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>							v.Local.sfirstpart.Set(v.datatable.IMPORT(v.Local.iret).GSS_PART_NUMBER.fieldvaltrim)</string>
        <string>							v.Local.syeller.Set(v.datatable.IMPORT(v.Local.iret).Color.fieldvaltrim)</string>
        <string>							f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>'							f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"GSS_PART_NUMBER",v.local.sfirstpart)</string>
        <string>							F.Data.DataTable.SetValue("Import",V.Local.iret,"GSS_EXTRA_DESC",v.local.sfilename.trim)</string>
        <string>						f.Intrinsic.Control.Else</string>
        <string>							v.Local.iret.Set(v.Local.sret(v.Local.iloop))</string>
        <string>							f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"GSS_PART_NUMBER",v.local.sfilename)</string>
        <string>							f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"Color",v.Local.syeller)</string>
        <string>							f.Data.DataTable.SetValue("IMPORT",v.Local.iret,"ALREADYMADE","MADE")</string>
        <string>							F.Data.DataTable.SetValue("Import",V.Local.iret,"GSS_EXTRA_DESC",v.local.sfilename.trim)					</string>
        <string>						f.Intrinsic.Control.EndIf</string>
        <string>					f.Intrinsic.Control.Next(v.local.iloop)</string>
        <string>				f.Intrinsic.Control.EndIf				</string>
        <string>				'add the part to the batch	</string>
        <string>				f.Global.Inventory.AddPartToBatch(v.Local.spart.Trim,"EA",v.Local.sdesc.Trim,"","11",v.Local.ssource,"","","0","NOMAINT")	</string>
        <string>			f.Intrinsic.Control.endif		</string>
        <string>		f.Intrinsic.Control.Else</string>
        <string>			f.Intrinsic.Control.If(v.Global.isBOM,=,True)</string>
        <string>				f.Intrinsic.String.GSSPartString(v.Local.spart.Trim,v.Local.srev.Trim,v.Local.spart)</string>
        <string>				F.Data.DataTable.SetValue("Import",V.Global.iassembly,"GSS_PART_NUMBER",V.Local.spart.trim)</string>
        <string>				F.Intrinsic.String.Left(v.Local.spart, 17, V.Local.sExtradescPart)</string>
        <string>'				F.Data.DataTable.SetValue("Import",V.Global.iassembly,"GSS_EXTRA_DESC",V.Local.spart.trim)</string>
        <string>'				F.Data.DataTable.SetValue("Import",V.Global.iassembly,"GSS_EXTRA_DESC",V.Local.sExtradescPart.trim)</string>
        <string>				v.Local.itemplate.Set(v.DataTable.TEMPLATE.rowcount--)</string>
        <string>				f.Intrinsic.Control.If(v.Local.itemplate,&gt;,0)</string>
        <string />
        <string>                     'update count with the count from the Bom Master</string>
        <string>                     F.Intrinsic.Control.If(v.DataTable.Import(v.Local.i).GSS_Sequence!FieldValtrim, !=, "")</string>
        <string>                          F.Intrinsic.String.Build("{0}00", v.DataTable.Import(v.Local.i).GSS_Sequence!FieldValtrim, v.Local.sBomSeq)</string>
        <string>                     F.Intrinsic.Control.Else</string>
        <string>                          v.Local.sbomseq.Set("0")</string>
        <string>                     F.Intrinsic.Control.EndIf</string>
        <string>                     F.Intrinsic.String.Right(v.Local.sBomSeq, 4, v.Local.sBomSeq)</string>
        <string>                     F.Intrinsic.String.GSSPartString(v.Local.sparentpart.Trim, v.Local.srev.Trim, v.Local.sparentpartCombo)</string>
        <string>                     F.Intrinsic.String.Build("Select Quantity from Bom_Mstr where Part = '{0}' and Parent = '{1}' and Sequence_Bom = '{2}'", v.Local.sPart.Trim, v.Local.sparentpartCombo.Trim, v.Local.sBomSeq,v.Local.ssql)</string>
        <string>                     F.ODBC.Connection!con.OpenLocalRecordsetRO("rstQty", v.Local.ssql)</string>
        <string>                     F.Intrinsic.Control.If(v.ODBC.con!rstQty.EOF, =, False)</string>
        <string>                                     v.Local.fcountGSS.Set(v.ODBC.con!rstQty.FieldValFloat!Quantity)</string>
        <string>                     F.Intrinsic.Control.EndIf</string>
        <string>                     F.ODBC.con!rstQty.Close</string>
        <string>                     F.Intrinsic.String.Format(v.Local.fcountGSS, "0.####", v.Local.fcountGSS)</string>
        <string>                     F.Intrinsic.Control.If(v.Local.fcountGSS, =, 0)</string>
        <string>                                     v.Local.fcountGSS.Set(v.Local.fcount)</string>
        <string>                     Function.Intrinsic.Control.EndIf</string>
        <string>					F.Data.DataTable.AddRow("TEMPLATE","GSS_PART_NUMBER",V.Local.spart.Trim,"GSS_COUNT",v.Local.fcountgss,"GSS_PARENT",v.Local.sparentpart.trim,"Color","P","GSS_LEVEL",v.Local.slevel,"GSS_DESCRIPTION",v.Local.sdesc.Trim,"GSS_REVISION",v.Local.srev.Trim,"GSS_PART_TYPE",v.datatable.IMPORT(v.Global.iassembly).GSS_PART_TYPE.fieldvaltrim,"GSS_UOM",v.Local.sum.Trim,"GSS_SOURCE_CODE",v.Local.ssource,"GSS_EXTRA_DESC","Already in GSS","GSS_SEQUENCE",v.Local.ssequence)</string>
        <string>				f.Intrinsic.Control.Else</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_PARENT",V.Local.sparentpart)</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_PART_NUMBER",V.Local.spart.trim)</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_COUNT",V.Local.fcount)</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_LEVEL",V.Local.slevel)</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_DESCRIPTION",v.Local.sdesc)</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_UOM",V.Local.sum)</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_SOURCE_CODE",V.Local.ssource)</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_REVISION",V.Local.srev)</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_SEQUENCE",V.Local.ssequence)		</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_CATEGORY",V.Local.scat)	</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"GSS_EXTRA_DESC","Already in GSS")</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.local.itemplate,"COLOR","P")	</string>
        <string>					F.Data.DataTable.SetValue("TEMPLATE",v.Local.itemplate,"GSS_PART_TYPE",v.datatable.IMPORT(v.Global.iassembly).GSS_PART_TYPE.fieldvaltrim)			</string>
        <string>				f.Intrinsic.Control.EndIf</string>
        <string>			f.Intrinsic.Control.EndIf</string>
        <string>		f.Intrinsic.Control.endif</string>
        <string>	f.Intrinsic.Control.Else</string>
        <string />
        <string />
        <string />
        <string />
        <string>	f.Intrinsic.Control.EndIf</string>
        <string>f.Intrinsic.Control.EndIf	</string>
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("ASSEMBLY_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	f.Intrinsic.Control.CallSub(form_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.ASSEMBLY.End</string>
        <string />
        <string>Program.Sub.colors.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("colors_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>v.Local.i.Declare(long)</string>
        <string>v.Local.sfilter.Declare(String)</string>
        <string>'v.Local.sextradesc.Declare(string)</string>
        <string>'v.Local.byellow.Declare(boolean,false)</string>
        <string />
        <string>'''loop through the datatable</string>
        <string>'F.Intrinsic.Control.For(V.Local.i,0,v.dataTable.template.RowCount--,1)</string>
        <string>''	'if this is an already in GSS part color the row pink</string>
        <string>'	f.Intrinsic.Control.If(v.datatable.TEMPLATE(v.Local.i).COLOR.fieldvaltrim,=,"P")</string>
        <string>'		gui.Form.GsGridControlMatch.SetRowAppearance("TEMPLATE",v.Local.i,"Backcolor","Pink")</string>
        <string>'	f.Intrinsic.Control.EndIf	</string>
        <string>'f.Intrinsic.Control.Next(v.Local.i)</string>
        <string>'''loop through the datatable</string>
        <string>'F.Intrinsic.Control.For(V.Local.i,0,v.dataTable.IMPORT.RowCount--,1)</string>
        <string>'	f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).COLOR.fieldvaltrim,=,"Y")</string>
        <string>'		gui.Form.GsGridControlImport.SetRowAppearance("GRID1",v.Local.i,"Backcolor","Yellow")</string>
        <string>'	f.Intrinsic.Control.EndIf</string>
        <string>'f.Intrinsic.Control.Next(v.Local.i)</string>
        <string>'F.Data.DataView.Create("IMPORT", "Parts", 22,"[COLOR] = 'Y'", )</string>
        <string>'f.Intrinsic.Control.If(V.DataView.IMPORT!Parts.RowCount, =,0)</string>
        <string>'	gui.Form.cmdCreate.Enabled(False)</string>
        <string>'F.Intrinsic.Control.Else</string>
        <string>'	gui.Form.cmdCreate.Enabled(True)</string>
        <string>'F.Intrinsic.Control.EndIf</string>
        <string>'''display the grids</string>
        <string>'gui.Form..Visible(true)</string>
        <string>'gui.Form.GsGridControlImport.Visible(True)</string>
        <string>'gui.Form.GsGridControlMatch.Visible(True)</string>
        <string>''loop through the datatable</string>
        <string />
        <string>F.Intrinsic.Control.For(V.Local.i,0,v.dataTable.template.RowCount--,1)</string>
        <string>     'if this is an already in GSS part color the row pink</string>
        <string>   f.Intrinsic.Control.If(v.datatable.TEMPLATE(v.Local.i).COLOR.fieldvaltrim,=,"P")</string>
        <string>                   gui.Form.GsGridControlMatch.SetRowAppearance("TEMPLATE",v.Local.i,"Backcolor","Pink")</string>
        <string>   f.Intrinsic.Control.EndIf </string>
        <string>f.Intrinsic.Control.Next(v.Local.i)</string>
        <string />
        <string>''loop through the datatable</string>
        <string>F.Intrinsic.Control.For(V.Local.i,0,v.dataTable.IMPORT.RowCount--,1)</string>
        <string>   f.Intrinsic.Control.If(v.datatable.IMPORT(v.Local.i).COLOR.fieldvaltrim,=,"Y")</string>
        <string>                   gui.Form.GsGridControlImport.SetRowAppearance("GRID1",v.Local.i,"Backcolor","Yellow")</string>
        <string>   F.Intrinsic.Control.Else</string>
        <string>      'Check to see if the Qty in the Import Matches the Qty in the Template.</string>
        <string>      F.Intrinsic.String.Build("[GSS_Parent] = '{0}' and [GSS_Part_Number] = '{1}' and [GSS_Sequence] = '{2}' ", v.DataTable.Import(v.Local.i).GSS_Parent!FieldValTrim, v.DataTable.Import(v.Local.i).GSS_Part_Number!FieldValTrim,v.DataTable.Import(v.Local.i).GSS_Sequence!FieldValtrim, v.Local.sFilter)</string>
        <string>      F.Data.DataView.Create("Template", "Qty",22,v.Local.sFilter,)</string>
        <string>      F.Intrinsic.Control.If(v.DataView.Template!Qty.Rowcount, &gt;,0)</string>
        <string>         F.Intrinsic.Control.If(v.DataView.Template!Qty(0).GSS_Count!FieldvalFloat, !=, v.DataTable.Import(v.Local.i).GSS_Count!FieldvalFloat)</string>
        <string>            'Color orange</string>
        <string>              Gui.Form.GsGridControlImport.SetCellAppearance("GRID1", 8,v.Local.i, "Backcolor", "Orange")</string>
        <string>         F.Intrinsic.Control.EndIf</string>
        <string>         'Check to see if the Desc in GSS is different from the Import</string>
        <string>         F.Intrinsic.Control.If(v.DataView.Template!Qty(0).GSS_DESCRIPTION!FieldvalTrim, !=, v.DataTable.Import(v.Local.i).GSS_DESCRIPTION!FieldvalTrim)</string>
        <string>                    Gui.Form.GsGridControlImport.SetCellAppearance("GRID1", 3,v.Local.i, "Backcolor", "Orange")</string>
        <string>         F.Intrinsic.Control.EndIf</string>
        <string>      F.Intrinsic.Control.EndIf</string>
        <string>                   F.Data.DataView.Close("Template", "Qty")</string>
        <string>   f.Intrinsic.Control.EndIf</string>
        <string>f.Intrinsic.Control.Next(v.Local.i)</string>
        <string />
        <string>F.Data.DataView.Create("IMPORT", "Parts", 22,"[COLOR] = 'Y'", )</string>
        <string>f.Intrinsic.Control.If(V.DataView.IMPORT!Parts.RowCount, =,0)</string>
        <string>                gui.Form.cmdCreate.Enabled(False)</string>
        <string>F.Intrinsic.Control.Else</string>
        <string>                gui.Form.cmdCreate.Enabled(True)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>''display the grids</string>
        <string>gui.Form..Visible(true)</string>
        <string>gui.Form.GsGridControlImport.Visible(True)</string>
        <string>gui.Form.GsGridControlMatch.Visible(True)</string>
        <string />
        <string />
        <string />
        <string />
        <string />
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("colors_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	f.Intrinsic.Control.CallSub(form_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.colors.End</string>
        <string />
        <string>Program.Sub.LoadScreenWithNothinginGss.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("LoadScreenWithNothinginGss_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>'create the dataview</string>
        <string>f.data.dataview.create("Import","GRID1")</string>
        <string />
        <string>'hide some columns and format others</string>
        <string>Gui.Form.GsGridControlImport.AddGridViewFromDataView("GRID1","Import","GRID1")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_LEVEL","MaxWidth","40")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_LEVEL","Caption","Lvl")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_DESCRIPTION","MaxWidth","200")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_DESCRIPTION","Width","200")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_DESCRIPTION","Caption","Description")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_UOM","Caption","UM")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_UOM","MaxWidth","50")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_UOM","Width","50")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PARENT","Caption","Parent")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_EXTRA_DESC","MaxWidth","200")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_EXTRA_DESC","Width","200")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_EXTRA_DESC","Caption","Extra Desc.")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PART_TYPE","Caption","Type")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_COUNT","Caption","Count")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_COUNT","MaxWidth","75")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_COUNT","Width","75")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PART_NUMBER","Caption","Part and Rev")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PART_NUMBER","MaxWidth","150")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PART_NUMBER","Width","150")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_BOM_DESIGNATION","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_Length","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_SUPPLIER","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_BALLOON_CALLOUT","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_LENGTH","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_IsParent","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_FILE_NAME","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_CATEGORY","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_SEQUENCE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_SUPPLIER_PART_NUMBER","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_CHILD_SOURCE_CODE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_SPARE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_ASSEMBLY_TYPE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_SOURCE_CODE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PART_TYPE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_PARENT","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","GSS_REVISION","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","Color","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","ALREADYMADE","visible",False)</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","Color","MaxWidth","0")</string>
        <string>gui.Form.GsGridControlImport.setcolumnproperty("GRID1","Color","Width","0")</string>
        <string>gui.Form.GsGridControlImport.setGridviewProperty("GRID1","Editable",False)</string>
        <string>gui.Form.GsGridControlImport.mainview("GRID1")	</string>
        <string />
        <string>gui.Form.GsGridControlImport.HideRow("GRID1",0,True)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("LoadScreenWithNothinginGss_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	f.Intrinsic.Control.CallSub(form_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.LoadScreenWithNothinginGss.End</string>
        <string />
        <string>Program.Sub.ColorsWithNothinginGSS.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("ColorsWithNothinginGSS_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>v.Local.i.Declare(long)</string>
        <string>v.Local.scolor.Declare(string)</string>
        <string>v.Local.bcolor.Declare(boolean,false)</string>
        <string>v.Local.sfirstpart.Declare(String)</string>
        <string>v.Local.srepeatpart.Declare(String)</string>
        <string>v.Local.spart.Declare(String)</string>
        <string>v.Local.sret.Declare(string)</string>
        <string>v.Local.iret.Declare(long)</string>
        <string>v.Local.iloop.declare(long)</string>
        <string>v.Local.sexp.Declare(string)</string>
        <string />
        <string>v.Local.syeller.Declare(String)</string>
        <string />
        <string>''loop through the datatable</string>
        <string>F.Intrinsic.Control.For(V.Local.i,0,v.dataTable.IMPORT.RowCount--,1)</string>
        <string>	'check the extra description to see if the row needs to be colored yellow</string>
        <string>	v.Local.scolor.Set(v.datatable.IMPORT(v.Local.i).Color.fieldvaltrim)</string>
        <string>	f.Intrinsic.String.IsInString(v.Local.scolor,"Y",True,v.Local.bcolor)</string>
        <string>	f.Intrinsic.Control.If(v.Local.bcolor,=,True)</string>
        <string>		gui.Form.GsGridControlImport.SetRowAppearance("GRID1",v.Local.i,"Backcolor","Yellow")</string>
        <string>		gui.Form.cmdUpload.Enabled(False)</string>
        <string>	f.Intrinsic.Control.EndIf</string>
        <string>	v.Local.bcolor.set(False)</string>
        <string>f.Intrinsic.Control.Next(v.Local.i)</string>
        <string>'</string>
        <string>''display the grids</string>
        <string>gui.Form..Visible(true)</string>
        <string>gui.Form.GsGridControlImport.Visible(True)</string>
        <string>gui.Form.GsGridControlMatch.Visible(False)</string>
        <string />
        <string>gui.Form.GsGridControlImport.mainview("GRID1")	</string>
        <string>gui.Form.GsGridControlImport.HideRow("GRID1",0,True)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("ColorsWithNothinginGSS_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4223_Cobalt_Bom_Import.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	f.Intrinsic.Control.CallSub(form_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.ColorsWithNothinginGSS.End</string>
        <string />
        <string>Program.Sub.Comments.Start</string>
        <string>${$0$}$$}$$}$12:00:00 AM$}$False</string>
        <string>${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$This will be a custom GAB script that will run from a custom Menu Item under Bill of Material -&gt; File -&gt; Custom Cobalt BOM Import.  The user will navigate to the xml file that needs to be loaded into Global Shop.  Once the xml is parsed there will be a search in Global Shop to see if a BOM already exists for that Part Number.  If one already exists a compare screen will display showing the differences between the two.  If one does not exist then the screen will display the BOM as it will be uploaded into Global Shop.  Any parts that are listed in the BOM that are not Inventory Parts will be highlighted in Yellow.  If there are any parts not in inventory the user will have the option to click the create Parts button to generate those parts in Global Shop.  If the BOM exists in Global shop then any differences on the new import will be highlighted in Red.  After the Parts have been created then the Upload button will upload and override any previous BOM for that part.</string>
        <string>Program.Sub.Comments.End</string>
        <string />
        <string />
      </Lines>
    </TextStrings>
  </TextSource>
  <Scrolling>
    <WindowOriginY>2009</WindowOriginY>
    <Options>None</Options>
  </Scrolling>
  <Outlining>
    <AllowOutlining>true</AllowOutlining>
    <ImageSize>8</ImageSize>
    <Ranges>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>0</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>107</Y>
        </EndPoint>
        <Text>Program.Sub.ScreenSU</Text>
        <DisplayText>Program.Sub.ScreenSU</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>109</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>110</Y>
        </EndPoint>
        <Text>Program.Sub.Preflight</Text>
        <DisplayText>Program.Sub.Preflight</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>112</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>159</Y>
        </EndPoint>
        <Text>Program.Sub.Main</Text>
        <DisplayText>Program.Sub.Main</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>161</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>181</Y>
        </EndPoint>
        <Text>Program.Sub.SS_Form_File_UnLoad</Text>
        <DisplayText>Program.Sub.SS_Form_File_UnLoad</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>183</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>208</Y>
        </EndPoint>
        <Text>Program.Sub.cmd_txt_FileSelection_Click</Text>
        <DisplayText>Program.Sub.cmd_txt_FileSelection_Click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>210</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>230</Y>
        </EndPoint>
        <Text>Program.Sub.cmd_Done_Click</Text>
        <DisplayText>Program.Sub.cmd_Done_Click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>232</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>380</Y>
        </EndPoint>
        <Text>Program.Sub.ReadXML</Text>
        <DisplayText>Program.Sub.ReadXML</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>382</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1403</Y>
        </EndPoint>
        <Text>Program.Sub.ExplodeBOM</Text>
        <DisplayText>Program.Sub.ExplodeBOM</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1405</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1517</Y>
        </EndPoint>
        <Text>Program.Sub.Loadscreen</Text>
        <DisplayText>Program.Sub.Loadscreen</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1519</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1545</Y>
        </EndPoint>
        <Text>Program.Sub.CreateDataTable</Text>
        <DisplayText>Program.Sub.CreateDataTable</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1547</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1568</Y>
        </EndPoint>
        <Text>Program.Sub.Form_UnLoad</Text>
        <DisplayText>Program.Sub.Form_UnLoad</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1570</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1682</Y>
        </EndPoint>
        <Text>Program.Sub.cmdCreate_Click</Text>
        <DisplayText>Program.Sub.cmdCreate_Click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1684</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1898</Y>
        </EndPoint>
        <Text>Program.Sub.cmdUpload_Click</Text>
        <DisplayText>Program.Sub.cmdUpload_Click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1900</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1922</Y>
        </EndPoint>
        <Text>Program.Sub.Refresh</Text>
        <DisplayText>Program.Sub.Refresh</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1924</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>2675</Y>
        </EndPoint>
        <Text>Program.Sub.LoadWithNothingInGSS</Text>
        <DisplayText>Program.Sub.LoadWithNothingInGSS</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>2677</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>3175</Y>
        </EndPoint>
        <Text>Program.Sub.ASSEMBLY</Text>
        <DisplayText>Program.Sub.ASSEMBLY</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>3177</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>3267</Y>
        </EndPoint>
        <Text>Program.Sub.colors</Text>
        <DisplayText>Program.Sub.colors</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>3269</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>3334</Y>
        </EndPoint>
        <Text>Program.Sub.LoadScreenWithNothinginGss</Text>
        <DisplayText>Program.Sub.LoadScreenWithNothinginGss</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>3336</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>3384</Y>
        </EndPoint>
        <Text>Program.Sub.ColorsWithNothinginGSS</Text>
        <DisplayText>Program.Sub.ColorsWithNothinginGSS</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>3386</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>3389</Y>
        </EndPoint>
        <Text>Program.Sub.Comments</Text>
        <DisplayText>Program.Sub.Comments</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
    </Ranges>
  </Outlining>
  <HyperText />
  <Spelling />
  <Braces />
</SyntaxEdit>